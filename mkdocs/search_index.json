{
    "docs": [
        {
            "location": "/", 
            "text": "Netscaler Ansible Docs\n\n\nThis project implements a set of Ansible modules for the Citrix Netscaler. Users of these modules can create, edit, update, and delete configuration objects on a Netscaler. For more information on the basic principals that the modules use, see the usage/index.\n\n\nThe code is licensed under the GPL and the authoritative repository is on github\n\n\nThe main documentation for the modules is organized into several sections listed below.\n\n\nUser Documentation\n\n\nGetting Started\nInstalling Ansible\nInstalling Modules\nPlaybook\nSpeeding up execution\nSaving configuration\nSample playbook\nClosing remarks\nRolling upgrades\nSetup\nTestbed\nUpgrade process\nReferences\nRolling upgrades (VPX)\nSetup\nInitializing the testbed\nUpgrade process\nReferences\nNetscaler ansible docker image\nInstallation\nUsage\nExample\n\n\nUsing generic ansible modules\n\n\nUsing generic Ansible modules\nReferences\nTemplating the configuration file\nWorkflow\nPlaybook\nReferences\nDirect NITRO API calls\nWorkflow\nPlaybook\nReferences\n\n\nModule Documentation\n\n\nModule Index\nAll Modules\nNetwork Modules\n\n\nDeveloper Documentation\n\n\nDevelopment Utilities\nDeveloping a new module\nGetting the spec of a nitro object\nGenerating the boilerplate", 
            "title": "NetScaler Ansible Docs"
        }, 
        {
            "location": "/#netscaler-ansible-docs", 
            "text": "This project implements a set of Ansible modules for the Citrix Netscaler. Users of these modules can create, edit, update, and delete configuration objects on a Netscaler. For more information on the basic principals that the modules use, see the usage/index.  The code is licensed under the GPL and the authoritative repository is on github  The main documentation for the modules is organized into several sections listed below.", 
            "title": "Netscaler Ansible Docs"
        }, 
        {
            "location": "/#user-documentation", 
            "text": "Getting Started\nInstalling Ansible\nInstalling Modules\nPlaybook\nSpeeding up execution\nSaving configuration\nSample playbook\nClosing remarks\nRolling upgrades\nSetup\nTestbed\nUpgrade process\nReferences\nRolling upgrades (VPX)\nSetup\nInitializing the testbed\nUpgrade process\nReferences\nNetscaler ansible docker image\nInstallation\nUsage\nExample", 
            "title": "User Documentation"
        }, 
        {
            "location": "/#using-generic-ansible-modules", 
            "text": "Using generic Ansible modules\nReferences\nTemplating the configuration file\nWorkflow\nPlaybook\nReferences\nDirect NITRO API calls\nWorkflow\nPlaybook\nReferences", 
            "title": "Using generic ansible modules"
        }, 
        {
            "location": "/#module-documentation", 
            "text": "Module Index\nAll Modules\nNetwork Modules", 
            "title": "Module Documentation"
        }, 
        {
            "location": "/#developer-documentation", 
            "text": "Development Utilities\nDeveloping a new module\nGetting the spec of a nitro object\nGenerating the boilerplate", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/usage/getting-started/", 
            "text": "Getting Started\n\n\nThis document will show you how to begin using the Netscaler Ansible modules.\n\n\nFirst, obtain \nPython 2.7\n and \nAnsible\n if you do not already have them.\n\n\nThe version of Ansible that is required is at least 2.4.0.\n\n\nInstalling Ansible\n\n\nInstalling Ansible may be accomplished through the following methods.\n\n\nFurther documentation on installing Ansible  may be found in \ngithub\n\n\nUsing pip\n\n\npip install ansible\n\n\n\n\n\nUsing your package manager\n\n\nE.g. in a Debian based Linux distribution\n\n\napt-get install ansible\n\n\n\n\n\nUsing a direct checkout\n\n\ngit clone https://github.com/ansible/ansible\n\n\ncd\n ansible\n\n\nsource\n hacking/env-setup\n\n\n\n\n\nVerifying the installation\n\n\nFollowing any installation method you should be able to run the following code which will print out the ansible version you will be using\n\n\nansible --version\n\n\n\n\n\nInstalling Modules\n\n\nTo install the latest version of the Netscaler modules run the following commands\n\n\ngit clone https://github.com/citrix/netscaler-ansible-modules\n\n\ncd\n netscaler-ansible-modules\n\npython install.py\n\n\n\n\n\nThe install script will detect where the ansible library is installed and will try to copy the module files to the appropriate directories.\n\n\n\n\nNote\nThe last step may require root priviledges depending on where ansible is installed.\n\n\n\n\n\n\nPlaybook\n\n\nLast we are going to see how to make a simple playbook. \n\n\n   \n-\n \nname\n:\n \nCreate a server\n\n       \ndelegate_to\n:\n \nlocalhost\n\n       \ngather_facts\n:\n \nno\n\n\n       \nnetscaler_server\n:\n\n           \nnsip\n:\n \n172.18.0.2\n\n           \nnitro_user\n:\n \nnsroot\n\n           \nnitro_pass\n:\n \nnsroot\n\n\n           \nstate\n:\n \npresent\n\n\n           \nname\n:\n \ntest-server-1\n\n           \nipaddress\n:\n \n192.168.1.1", 
            "title": "Getting Started"
        }, 
        {
            "location": "/usage/getting-started/#getting-started", 
            "text": "This document will show you how to begin using the Netscaler Ansible modules.  First, obtain  Python 2.7  and  Ansible  if you do not already have them.  The version of Ansible that is required is at least 2.4.0.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/usage/getting-started/#installing-ansible", 
            "text": "Installing Ansible may be accomplished through the following methods.  Further documentation on installing Ansible  may be found in  github", 
            "title": "Installing Ansible"
        }, 
        {
            "location": "/usage/getting-started/#using-pip", 
            "text": "pip install ansible", 
            "title": "Using pip"
        }, 
        {
            "location": "/usage/getting-started/#using-your-package-manager", 
            "text": "E.g. in a Debian based Linux distribution  apt-get install ansible", 
            "title": "Using your package manager"
        }, 
        {
            "location": "/usage/getting-started/#using-a-direct-checkout", 
            "text": "git clone https://github.com/ansible/ansible cd  ansible source  hacking/env-setup", 
            "title": "Using a direct checkout"
        }, 
        {
            "location": "/usage/getting-started/#verifying-the-installation", 
            "text": "Following any installation method you should be able to run the following code which will print out the ansible version you will be using  ansible --version", 
            "title": "Verifying the installation"
        }, 
        {
            "location": "/usage/getting-started/#installing-modules", 
            "text": "To install the latest version of the Netscaler modules run the following commands  git clone https://github.com/citrix/netscaler-ansible-modules cd  netscaler-ansible-modules\n\npython install.py  The install script will detect where the ansible library is installed and will try to copy the module files to the appropriate directories.   Note The last step may require root priviledges depending on where ansible is installed.", 
            "title": "Installing Modules"
        }, 
        {
            "location": "/usage/getting-started/#playbook", 
            "text": "Last we are going to see how to make a simple playbook.       -   name :   Create a server \n        delegate_to :   localhost \n        gather_facts :   no \n\n        netscaler_server : \n            nsip :   172.18.0.2 \n            nitro_user :   nsroot \n            nitro_pass :   nsroot \n\n            state :   present \n\n            name :   test-server-1 \n            ipaddress :   192.168.1.1", 
            "title": "Playbook"
        }, 
        {
            "location": "/usage/speeding-up-execution/", 
            "text": "Speeding up execution\n\n\nThis document details how to speed up the execution time of a playbook\ncontaining invocations of Netscaler ansible modules.\n\n\nAnsible has some options to help with speeding up execution by making\nforks of itself to execute playbooks in multiple target hosts.\n\n\nAlso in the context of a single playbook the use of the \nasync\n keyword\nmay help with parallelizing the execution of the tasks therein but at\nthe cost of increased complexity.\n\n\nBoth of the above methods can be used to speed up the execution of\nplaybooks containing invocations of Netscaler modules.\n\n\nHere we will detail a third option which is specific to the Netscaler\nmodules and the way the underlying API is used.\n\n\nSaving configuration\n\n\nBy default every Netscaler module after it performs any changes to the configuration\nof the Netscaler node will also save the configuration.\n\n\nWhile this is the safest option as far as robustness is concerned, it turns out that the save configuration operation\nis quite costly time wise, taking up to 5 seconds.\n\n\nWhen multiple tasks within a playbook make changes to Netscaler entities these\ndelays accumulate to a substantial amount.\n\n\nThe solution is to instruct the Netscaler modules not to save the configuration\nindividually but instead notify a handler which will save the configuration once\nat the end of the playbook execution.\n\n\nTo do this we need to use the \nsave_config\n option along with the \nnetscaler_save_config\n\nmodule which will be invoked by the handler.\n\n\nSample playbook\n\n\nThe following playbook demonstrates this technique.\n\n\n        \n-\n \nhosts\n:\n \nnetscaler\n\n\n          \nvars\n:\n\n            \nsave_config\n:\n \nno\n\n            \nstate\n:\n \npresent\n\n\n          \ntasks\n:\n\n            \n-\n \nname\n:\n \nSetup server 1\n\n\n              \ndelegate_to\n:\n \nlocalhost\n\n              \nnotify\n:\n \nSave netscaler configuration\n\n\n              \nnetscaler_server\n:\n\n                \nnsip\n:\n \n172.18.0.2\n\n                \nnitro_user\n:\n \nnsroot\n\n                \nnitro_pass\n:\n \nnsroot\n\n\n                \nstate\n:\n \n{{\n \nstate\n \n}}\n\n                \nsave_config\n:\n \n{{\n \nsave_config\n \n}}\n\n\n                \nname\n:\n \nserver-1\n\n                \nipaddress\n:\n \n192.168.1.1\n\n                \ncomment\n:\n \nOur first server\n\n\n            \n-\n \nname\n:\n \nSet server 2\n\n\n              \ndelegate_to\n:\n \nlocalhost\n\n              \nnotify\n:\n \nSave netscaler configuration\n\n\n              \nnetscaler_server\n:\n\n                \nnsip\n:\n \n172.18.0.2\n\n                \nnitro_user\n:\n \nnsroot\n\n                \nnitro_pass\n:\n \nnsroot\n\n\n                \nstate\n:\n \n{{\n \nstate\n \n}}\n\n                \nsave_config\n:\n \n{{\n \nsave_config\n \n}}\n\n\n                \nname\n:\n \nserver-2\n\n                \nipaddress\n:\n \n192.168.1.2\n\n                \ncomment\n:\n \nOur second server\n\n\n          \nhandlers\n:\n\n            \n-\n \nname\n:\n \nSave netscaler configuration\n\n              \ndelegate_to\n:\n \nlocalhost\n\n              \nnetscaler_save_config\n:\n\n                \nnsip\n:\n \n172.18.0.2\n\n                \nnitro_user\n:\n \nnsroot\n\n                \nnitro_pass\n:\n \nnsroot\n\n\n\n\n\n\nClosing remarks\n\n\nAs you see in the example we need to explicitly set the \nsave_config\n option\nsince by default it is set to \nyes\n.\n\n\nAlso we call the \nnetscaler_save_config\n module only once in the handlers section.\n\n\nThe number of times the configuration will be saved on the Netscaler module is\nonly one regardless of the number of changes, or none if there is no change recorded\nin the result of any of the netscaler modules.\n\n\nThis is much better than the worst case with the default \nsave_config\n option which would\nsave the configuration twice if both server modules made changes.\n\n\nIt is also just as fast as the best case with the default \nsave_config\n option which would be\nto save the configuration once in case only one of the tasks made any change.\n\n\nAlso note that the potential benefit increases, for each Netscaler module which utilizes the\nsave configuration handler. For example if we had ten Netscaler modules making changes we would\nbe saving the configuration ten times. Instead if these modules use the \nnetscaler_save_config\n\nas a handler we will have only one call to the save operation.", 
            "title": "Speeding up execution"
        }, 
        {
            "location": "/usage/speeding-up-execution/#speeding-up-execution", 
            "text": "This document details how to speed up the execution time of a playbook\ncontaining invocations of Netscaler ansible modules.  Ansible has some options to help with speeding up execution by making\nforks of itself to execute playbooks in multiple target hosts.  Also in the context of a single playbook the use of the  async  keyword\nmay help with parallelizing the execution of the tasks therein but at\nthe cost of increased complexity.  Both of the above methods can be used to speed up the execution of\nplaybooks containing invocations of Netscaler modules.  Here we will detail a third option which is specific to the Netscaler\nmodules and the way the underlying API is used.", 
            "title": "Speeding up execution"
        }, 
        {
            "location": "/usage/speeding-up-execution/#saving-configuration", 
            "text": "By default every Netscaler module after it performs any changes to the configuration\nof the Netscaler node will also save the configuration.  While this is the safest option as far as robustness is concerned, it turns out that the save configuration operation\nis quite costly time wise, taking up to 5 seconds.  When multiple tasks within a playbook make changes to Netscaler entities these\ndelays accumulate to a substantial amount.  The solution is to instruct the Netscaler modules not to save the configuration\nindividually but instead notify a handler which will save the configuration once\nat the end of the playbook execution.  To do this we need to use the  save_config  option along with the  netscaler_save_config \nmodule which will be invoked by the handler.", 
            "title": "Saving configuration"
        }, 
        {
            "location": "/usage/speeding-up-execution/#sample-playbook", 
            "text": "The following playbook demonstrates this technique.           -   hosts :   netscaler \n\n           vars : \n             save_config :   no \n             state :   present \n\n           tasks : \n             -   name :   Setup server 1 \n\n               delegate_to :   localhost \n               notify :   Save netscaler configuration \n\n               netscaler_server : \n                 nsip :   172.18.0.2 \n                 nitro_user :   nsroot \n                 nitro_pass :   nsroot \n\n                 state :   {{   state   }} \n                 save_config :   {{   save_config   }} \n\n                 name :   server-1 \n                 ipaddress :   192.168.1.1 \n                 comment :   Our first server \n\n             -   name :   Set server 2 \n\n               delegate_to :   localhost \n               notify :   Save netscaler configuration \n\n               netscaler_server : \n                 nsip :   172.18.0.2 \n                 nitro_user :   nsroot \n                 nitro_pass :   nsroot \n\n                 state :   {{   state   }} \n                 save_config :   {{   save_config   }} \n\n                 name :   server-2 \n                 ipaddress :   192.168.1.2 \n                 comment :   Our second server \n\n           handlers : \n             -   name :   Save netscaler configuration \n               delegate_to :   localhost \n               netscaler_save_config : \n                 nsip :   172.18.0.2 \n                 nitro_user :   nsroot \n                 nitro_pass :   nsroot", 
            "title": "Sample playbook"
        }, 
        {
            "location": "/usage/speeding-up-execution/#closing-remarks", 
            "text": "As you see in the example we need to explicitly set the  save_config  option\nsince by default it is set to  yes .  Also we call the  netscaler_save_config  module only once in the handlers section.  The number of times the configuration will be saved on the Netscaler module is\nonly one regardless of the number of changes, or none if there is no change recorded\nin the result of any of the netscaler modules.  This is much better than the worst case with the default  save_config  option which would\nsave the configuration twice if both server modules made changes.  It is also just as fast as the best case with the default  save_config  option which would be\nto save the configuration once in case only one of the tasks made any change.  Also note that the potential benefit increases, for each Netscaler module which utilizes the\nsave configuration handler. For example if we had ten Netscaler modules making changes we would\nbe saving the configuration ten times. Instead if these modules use the  netscaler_save_config \nas a handler we will have only one call to the save operation.", 
            "title": "Closing remarks"
        }, 
        {
            "location": "/usage/rolling-upgrades/", 
            "text": "Rolling upgrades\n\n\nThis document demonstrates how to to a rolling upgrade with zero\ndowntime for a simple load balanced service.\n\n\nThe methods showcased here are also applicable to more complex\nnetworking setups.\n\n\nSetup\n\n\nThe example utilizes Netscaler CPX and docker images.\n\n\nThe dependencies needed to run the playbooks are at\nthe following \ngithub repository\n\n\nTo create the docker containers from the checkout root run the following\n\ndocker-compose up -d\n.\n\n\nTo setup the cpx image you will need to run the rolling_init.yaml playbook\n\nansible-playbook -i inventory.txt rolling_init.yaml\n\n\nTIP: If you are running this using Docker for Mac or Docker for Windows, then ansible will not be able to reach the NetScaler CPX container on the specified IP in the inventory. You have to change the inventory.txt file to point to the actual port that the CPX API port is mapped to\n\n\ndocker port netscalerrollingupdatesexample_cpx_1\n161/tcp -\n 0.0.0.0:32805\n22/tcp -\n 0.0.0.0:32807\n443/tcp -\n 0.0.0.0:32804\n80/tcp -\n 0.0.0.0:32806\ncat inventory.txt\n    [all:vars]\n    nsip=127.0.0.1:32806\n\n\n\n\n\nThis will initialize the testbed to the topology shown below.\n\n\nTestbed\n\n\nThe testbed is comprised of a Netscaler CPX load balancer and 2 docker containers\nthat act as the backend servers for the load balanced service.\n\n\nThe logical diagram of the testbed is as follows\n\n\n                          +\n                          |\n                          |\n                          |\n                +---------V----------+\n                | Load balancer      |\n                | lb_vserver_1       |----------+\n                | 172.30.0.200:8000  |          |\n                +--------------------+          |\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V-----+           +-----V-------+\n                | Service 1   |           | Service 2   |\n                | server_1    |           | server_2    |\n                | port 8000   |           | port 8000   |\n                +-------------+           +-------------+\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V-----+           +-----V-------+\n                | server_1    |           | server_2    |\n                | 172.30.0.21 |           | 172.30.0.22 |\n                +-------------+           +-------------+\n                        |                       |\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V----------+    +-------V----------+\n                | web server 1     |    | web server 2     |\n                | 172.30.0.21:8000 |    | 172.30.0.22:8000 |\n                +------------------+    +------------------+\n\n\n\n\n\nIn this setup the load balancer virtual server is configured with the\nROUNDROBIN load balancing method and has 2 service members with 50%\nweight each.\n\n\nTo check that the load balancer works correctly run the following command\n\n\ncurl 172.30.0.200:8000\n\n\n\n\n\nYou should see a \nHello webapp1\n.\nRunning the same a second time should output \nHello webapp2\n.\n\n\nTIP: If you are running this example using Docker for Mac or Docker for Windows, the docker network is not visible to your OS. In this case, use another container to execute this curl\n\n\ndocker\n \nrun\n \n--rm\n \n--network\n=\nnetscalerrollingupdatesexample_netscaler\n \n--entrypoint\n \n/bin/sh\n  \nbyrnedo\n/\nalpine-curl\n \n-c\n \nwhile true; do curl  -s http://172.30.0.200:8000; sleep 1; done\n\n\n\n\n\n\nUpgrade process\n\n\nThe upgrade playbook utilizes the \npre_tasks\n and \npost_tasks\n hooks to\nbring the services down and back up during the update process.\n\n\nThe upgrade playbook is the following:\n\n\n        - hosts: webservers\n\n\n\n          remote_user: root\n\n\n          gather_facts: False\n\n\n          serial: 1\n\n\n\n          pre_tasks:\n\n\n            - name: \nDisable \n{{\n \nservername\n \n}}\n\n\n              delegate_to: localhost\n\n\n              netscaler_server:\n\n\n                nsip: \n{{\n \nnsip\n \n}}\n\n\n                nitro_user: \n{{\n \nnitro_user\n \n}}\n\n\n                nitro_pass: \n{{\n \nnitro_pass\n \n}}\n\n\n\n                disabled: yes\n\n\n\n                name: \n{{\n \nservername\n \n}}\n\n\n                ipaddress: \n{{\n \nhostip\n \n}}\n\n\n\n          post_tasks:\n\n\n\n            - name: \nRe enable \n{{\n \nservername\n \n}}\n\n\n              delegate_to: localhost\n\n\n              netscaler_server:\n\n\n                nsip: \n{{\n \nnsip\n \n}}\n\n\n                nitro_user: \n{{\n \nnitro_user\n \n}}\n\n\n                nitro_pass: \n{{\n \nnitro_pass\n \n}}\n\n\n\n                name: \n{{\n \nservername\n \n}}\n\n\n                ipaddress: \n{{\n \nhostip\n \n}}\n\n\n\n          tasks:\n\n\n\n            - name: \nUpdate \n{{\n \nservername\n \n}}\n\n\n              delegate_to: localhost\n\n\n              command: docker-compose exec -d \n{{\n \nservername\n \n}}\n bash -c \necho \nhello updated \n{{\n \nservername\n \n}}\n \n /app/content.txt\n\n\n\n\n\n\nThe function of the pre_tasks and post_tasks hooks is documented by\n\nansible \nhttps://docs.ansible.com/ansible/playbooks_roles.html\n_.\n\n\nEssentially what we do is that we disable the server entity in Netscaler\nfor each web service before the update process and after the update we\nre enable the server entity.\n\n\nThe \nserial: 1\n option instructs ansible to operate on the webservers\none at a time. This is a deviation from the default behavior of Ansible\nwhich is to operate on multiple nodes at once.\n\n\nIn our example the update process is just a simple change of the\ncontent file on the web service docker container to verify\nthe update has taken effect.\n\n\nTo see how the update works you can run\n\n\ncurl 172.30.0.200:8000\n\n\n\n\n\nduring the update process and see how the output changes.\n\n\nSince the update itself is a relatively quick process  you may\nnot be able to see the \nrolling\n nature of the upgrade.\n\n\nFor that you may want to run the update script in step mode\n\n\nansible-playbook -i inventory.txt rolling_update.yml --step\n\n\n\n\n\nand watch the output of\n\n\ncurl 172.30.0.200:8000\n\n\n\n\n\na number of times to actually see what happens.\n\n\nWhat you should see is each server taken out of the load balancing\npool and then brought up without any service interruption.\n\n\nIn our example the update of the web server is instantaneous\nwe do not have any down time.\n\n\nIn a real world situation the update would put the webserver in a\nstate that would be unable to respond to requests.\n\n\nHad we not disabled the corresponding server, in this case, would\nmean that a number of requests would be directed to the offline\nserver resulting in clients getting error responses.\n\n\nEventually the monitors attached to the Netscaler services would\ntake the disrupted service out of the load balancing pool\nbut depending on the traffic volume several requests would have\nbeen affected by the non functioning service by that time.\n\n\nDisabling the server before the update process guarantees that\nNetscaler will not direct any traffic to it during that time,\nensuring continuous delivery of the content.\n\n\nReferences\n\n\n\n\nNetscaler ansible modules repository\n\n\nAnsible documentation", 
            "title": "Rolling upgrades"
        }, 
        {
            "location": "/usage/rolling-upgrades/#rolling-upgrades", 
            "text": "This document demonstrates how to to a rolling upgrade with zero\ndowntime for a simple load balanced service.  The methods showcased here are also applicable to more complex\nnetworking setups.", 
            "title": "Rolling upgrades"
        }, 
        {
            "location": "/usage/rolling-upgrades/#setup", 
            "text": "The example utilizes Netscaler CPX and docker images.  The dependencies needed to run the playbooks are at\nthe following  github repository  To create the docker containers from the checkout root run the following docker-compose up -d .  To setup the cpx image you will need to run the rolling_init.yaml playbook ansible-playbook -i inventory.txt rolling_init.yaml  TIP: If you are running this using Docker for Mac or Docker for Windows, then ansible will not be able to reach the NetScaler CPX container on the specified IP in the inventory. You have to change the inventory.txt file to point to the actual port that the CPX API port is mapped to  docker port netscalerrollingupdatesexample_cpx_1\n161/tcp -  0.0.0.0:32805\n22/tcp -  0.0.0.0:32807\n443/tcp -  0.0.0.0:32804\n80/tcp -  0.0.0.0:32806\ncat inventory.txt\n    [all:vars]\n    nsip=127.0.0.1:32806  This will initialize the testbed to the topology shown below.", 
            "title": "Setup"
        }, 
        {
            "location": "/usage/rolling-upgrades/#testbed", 
            "text": "The testbed is comprised of a Netscaler CPX load balancer and 2 docker containers\nthat act as the backend servers for the load balanced service.  The logical diagram of the testbed is as follows                            +\n                          |\n                          |\n                          |\n                +---------V----------+\n                | Load balancer      |\n                | lb_vserver_1       |----------+\n                | 172.30.0.200:8000  |          |\n                +--------------------+          |\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V-----+           +-----V-------+\n                | Service 1   |           | Service 2   |\n                | server_1    |           | server_2    |\n                | port 8000   |           | port 8000   |\n                +-------------+           +-------------+\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V-----+           +-----V-------+\n                | server_1    |           | server_2    |\n                | 172.30.0.21 |           | 172.30.0.22 |\n                +-------------+           +-------------+\n                        |                       |\n                        |                       |\n                        |                       |\n                        |                       |\n                +-------V----------+    +-------V----------+\n                | web server 1     |    | web server 2     |\n                | 172.30.0.21:8000 |    | 172.30.0.22:8000 |\n                +------------------+    +------------------+  In this setup the load balancer virtual server is configured with the\nROUNDROBIN load balancing method and has 2 service members with 50%\nweight each.  To check that the load balancer works correctly run the following command  curl 172.30.0.200:8000  You should see a  Hello webapp1 .\nRunning the same a second time should output  Hello webapp2 .  TIP: If you are running this example using Docker for Mac or Docker for Windows, the docker network is not visible to your OS. In this case, use another container to execute this curl  docker   run   --rm   --network = netscalerrollingupdatesexample_netscaler   --entrypoint   /bin/sh    byrnedo / alpine-curl   -c   while true; do curl  -s http://172.30.0.200:8000; sleep 1; done", 
            "title": "Testbed"
        }, 
        {
            "location": "/usage/rolling-upgrades/#upgrade-process", 
            "text": "The upgrade playbook utilizes the  pre_tasks  and  post_tasks  hooks to\nbring the services down and back up during the update process.  The upgrade playbook is the following:          - hosts: webservers            remote_user: root            gather_facts: False            serial: 1            pre_tasks:              - name:  Disable  {{   servername   }}                delegate_to: localhost                netscaler_server:                  nsip:  {{   nsip   }}                  nitro_user:  {{   nitro_user   }}                  nitro_pass:  {{   nitro_pass   }}                  disabled: yes                  name:  {{   servername   }}                  ipaddress:  {{   hostip   }}            post_tasks:              - name:  Re enable  {{   servername   }}                delegate_to: localhost                netscaler_server:                  nsip:  {{   nsip   }}                  nitro_user:  {{   nitro_user   }}                  nitro_pass:  {{   nitro_pass   }}                  name:  {{   servername   }}                  ipaddress:  {{   hostip   }}            tasks:              - name:  Update  {{   servername   }}                delegate_to: localhost                command: docker-compose exec -d  {{   servername   }}  bash -c  echo  hello updated  {{   servername   }}    /app/content.txt   The function of the pre_tasks and post_tasks hooks is documented by ansible  https://docs.ansible.com/ansible/playbooks_roles.html _.  Essentially what we do is that we disable the server entity in Netscaler\nfor each web service before the update process and after the update we\nre enable the server entity.  The  serial: 1  option instructs ansible to operate on the webservers\none at a time. This is a deviation from the default behavior of Ansible\nwhich is to operate on multiple nodes at once.  In our example the update process is just a simple change of the\ncontent file on the web service docker container to verify\nthe update has taken effect.  To see how the update works you can run  curl 172.30.0.200:8000  during the update process and see how the output changes.  Since the update itself is a relatively quick process  you may\nnot be able to see the  rolling  nature of the upgrade.  For that you may want to run the update script in step mode  ansible-playbook -i inventory.txt rolling_update.yml --step  and watch the output of  curl 172.30.0.200:8000  a number of times to actually see what happens.  What you should see is each server taken out of the load balancing\npool and then brought up without any service interruption.  In our example the update of the web server is instantaneous\nwe do not have any down time.  In a real world situation the update would put the webserver in a\nstate that would be unable to respond to requests.  Had we not disabled the corresponding server, in this case, would\nmean that a number of requests would be directed to the offline\nserver resulting in clients getting error responses.  Eventually the monitors attached to the Netscaler services would\ntake the disrupted service out of the load balancing pool\nbut depending on the traffic volume several requests would have\nbeen affected by the non functioning service by that time.  Disabling the server before the update process guarantees that\nNetscaler will not direct any traffic to it during that time,\nensuring continuous delivery of the content.", 
            "title": "Upgrade process"
        }, 
        {
            "location": "/usage/rolling-upgrades/#references", 
            "text": "Netscaler ansible modules repository  Ansible documentation", 
            "title": "References"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/", 
            "text": "Rolling upgrades (VPX)\n\n\nThis document demonstrates how to to a rolling upgrade with zero\ndowntime for a simple load balanced service.\n\n\nThe methods showcased here are also applicable to more complex\nnetworking setups.\n\n\nSetup\n\n\nThe example utilizes Netscaler VPX and some virtualized hosts to provide\nthe back end web services.\n\n\nThe ansible playbooks along with other files needed to run this example\ncan be found at the following \ngithub\nrepository\n\n\nThe testbed required to run the examples is the following.\n\n\n    +--------------------+\n    | Netscaler VPX      |\n    |                    | 192.168.10.2                  +----------+\n    |               SNIP |\n-----------------------------\n| server 1 |\n    |                    |              |  192.168.10.10 +----------+\n    | NSIP          VIP  |              |                          ^\n    +--------------------+              |                          |10.78.60.204\n      ^              ^                  |            +----------+  |\n      |10.78.60.202  |10.78.60.203      +-----------\n| server 2 |  |\n      |              |                 192.168.10.11 +----------+  |\n      |              |                                       ^     |\n      |              |                           10.78.60.205|     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |=NITRO        |=HTTP                                  |     |\n      |              |                                       |     |\n      |              |     +-----------+             SSH     |     |\n      +--------------+-----| user host |---------------------+-----+\n                           +-----------+\n\n\n\n\n\nWe need a virtual host to run Netscaler VPX and we also need two hosts\nto run the back end web services. These can be any kind of hosts, as\nlong as it is possible for the Netscaler node and the web server nodes\nto communicate via a specified subnet. Having the backend servers as\nvirtual hosts on the same Xen Server as the Netscaler VPX is recommended\nsince it simplifies the networking setup needed.\n\n\nIn our example the back end servers and the Netscaler host communicate\nvia the \n192.168.10.0/24\n subnet.\n\n\nAlso there is a user host which is the machine that will run the\nplaybooks for this example. This host needs to be able to communicate\nvia SSH with the back end servers to be able to setup and update the web\nservices and also needs to be able to make NITRO API calls to the\nNetscaler node on the configured NSIP.\n\n\nFinally Netscaler needs to have a Virtual IP configured which will be\nthe client facing address of our load balanced service.\n\n\n\n\nTip\n\n\n\n\n\"Note\n        The playbooks and scripts do not configure any of these ip addresses on the Netscaler node or the server nodes. You need to set them up prior to running the playbooks in this example and modify the \ninventory.txt\n file to match your particular configuration.\n\n\nMore details for the requirements of each node are included in the\nREADME file of the \ngithub\nrepository\n\ncontaining this example's files.\n\n\nInitializing the testbed\n\n\nHaving setup the testbed and modified the inventory.txt file to match\nthe configured ip addresses we need to initialize the Netscaler and the\nback end server nodes.\n\n\nThis is done by running on the user host from a fresh checkout of the\nfiles from the \ngithub\nrepository\n\nby running the following command\n\n\nansible-playbook -i inventory.txt rolling_init.yaml\n\n\n\n\n\nRunning this playbook will initialize the back end services and also\nconfigure the Netscaler in order to serve them over the VIP of the load\nbalancer.\n\n\nThe logical configuration of the Netscaler node can be seen in the\nfollowing diagram.\n\n\n          +\n          |\n          |\n          |\n+---------V----------+\n| Load balancer      |\n| lb_vserver_1       |----------+\n| 10.78.60.203:80    |          |\n+--------------------+          |\n        |                       |\n        |                       |\n        |                       |\n+-------V-----+           +-----V-------+\n| Service 1   |           | Service 2   |\n| server_1    |           | server_2    |\n| port 80     |           | port 80     |\n+-------------+           +-------------+\n        |                       |\n        |                       |\n        |                       |\n+-------V-------+           +-----V---------+\n| server_1      |           | server_2      |\n| 192.168.10.10 |           | 192.168.10.11 |\n+---------------+           +---------------+\n\n\n\n\n\nIn this setup the load balancer virtual server is configured with the\nROUNDROBIN load balancing method and has 2 service members with 50%\nweight each.\n\n\nTo check that the load balancer works correctly run the following\ncommand\n\n\ncurl \n10\n.78.60.203\n\n\n\n\n\nYou should see a \nHello webserver1\n. Running the same command a second\ntime should output \nHello webserver2\n.\n\n\nUpgrade process\n\n\nThe upgrade playbook utilizes the \npre_tasks\n and \npost_tasks\n hooks to\nbring the services down and back up during the update process.\n\n\nThe upgrade playbook is the following:\n\n\n-\n \nhosts\n:\n \nservice_hosts\n\n  \nvars\n:\n\n    \ncompose_yaml\n:\n \n/var/tmp/docker-compose.yaml\n\n\n  \nremote_user\n:\n \nroot\n\n  \ngather_facts\n:\n \nFalse\n\n  \nserial\n:\n \n1\n\n\n  \npre_tasks\n:\n\n    \n-\n \nname\n:\n \nDisable\n \n{{\n \nservername\n \n}}\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nnetscaler_server\n:\n\n        \nnsip\n:\n \n{{\n \nnsip\n \n}}\n\n        \nnitro_user\n:\n \n{{\n \nnitro_user\n \n}}\n\n        \nnitro_pass\n:\n \n{{\n \nnitro_pass\n \n}}\n\n\n        \ndisabled\n:\n \nyes\n\n\n        \nname\n:\n \n{{\n \nservername\n \n}}\n\n\n  \npost_tasks\n:\n\n\n    \n-\n \nname\n:\n \nRe\n \nenable\n \n{{\n \nservername\n \n}}\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nnetscaler_server\n:\n\n        \nnsip\n:\n \n{{\n \nnsip\n \n}}\n\n        \nnitro_user\n:\n \n{{\n \nnitro_user\n \n}}\n\n        \nnitro_pass\n:\n \n{{\n \nnitro_pass\n \n}}\n\n\n        \ndisabled\n:\n \nno\n\n        \nname\n:\n \n{{\n \nservername\n \n}}\n\n\n  \ntasks\n:\n\n\n    \n-\n \nname\n:\n \nUpdate\n \nbackend\n \n{{\n \nservername\n \n}}\n\n      \ncommand\n:\n \ndocker-compose -f \n{{ compose_yaml }}\n exec -d webserver bash -c \necho \nhello updated {{ servername }}\n \n /app/content.txt\n\n\n\n\n\n\nThe function of the pre_tasks and post_tasks hooks is documented by\n\nansible\n.\n\n\nEssentially what we do is that we disable the server entity in Netscaler\nfor each web service before the update process and after the update has\ntaken place we re enable the server entity.\n\n\nThe \nserial: 1\n option instructs ansible to operate on the webservers\none at a time. This is a deviation from the default behavior of Ansible\nwhich is to operate on multiple nodes at once.\n\n\nIn our example the update process is just a simple change of the content\nfile on the web service docker container to verify the update has taken\neffect.\n\n\nTo see how the update works you can run\n\n\ncurl \n10\n.78.60.203\n\n\n\n\n\nduring the update process and see how the output changes.\n\n\nSince the update itself is a relatively quick process you may not be\nable to see the rolling nature of the upgrade.\n\n\nFor that you may want to run the update script in step mode\n\n\nansible-playbook -i inventory.txt rolling_update.yml --step\n\n\n\n\n\nand watch the output of\n\n\ncurl \n10\n.78.60.203\n\n\n\n\n\na number of times to actually see what happens.\n\n\nWhat you should see is each server taken out of the load balancing pool\nand then brought up without any service interruption.\n\n\nIn our example the update of the web server is instantaneous we do not\nhave any actual down time.\n\n\nIn a real world situation the update would put the webserver in a state\nthat would be unable to respond to requests.\n\n\nHad we not disabled the corresponding server, in this case, would mean\nthat a number of requests would be directed to the offline server\nresulting in clients getting error responses.\n\n\nEventually the monitors attached to the Netscaler services would take\nthe disrupted service out of the load balancing pool but depending on\nthe traffic volume several requests would have been affected by the non\nfunctioning service by that time.\n\n\nDisabling the server before the update process guarantees that Netscaler\nwill not direct any traffic to it during that time, ensuring continuous\ndelivery of the content.\n\n\nReferences\n\n\n\n\nNetscaler ansible modules repository\n\n\nAnsible documentation", 
            "title": "Rolling upgrades (VPX)"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/#rolling-upgrades-vpx", 
            "text": "This document demonstrates how to to a rolling upgrade with zero\ndowntime for a simple load balanced service.  The methods showcased here are also applicable to more complex\nnetworking setups.", 
            "title": "Rolling upgrades (VPX)"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/#setup", 
            "text": "The example utilizes Netscaler VPX and some virtualized hosts to provide\nthe back end web services.  The ansible playbooks along with other files needed to run this example\ncan be found at the following  github\nrepository  The testbed required to run the examples is the following.      +--------------------+\n    | Netscaler VPX      |\n    |                    | 192.168.10.2                  +----------+\n    |               SNIP | ----------------------------- | server 1 |\n    |                    |              |  192.168.10.10 +----------+\n    | NSIP          VIP  |              |                          ^\n    +--------------------+              |                          |10.78.60.204\n      ^              ^                  |            +----------+  |\n      |10.78.60.202  |10.78.60.203      +----------- | server 2 |  |\n      |              |                 192.168.10.11 +----------+  |\n      |              |                                       ^     |\n      |              |                           10.78.60.205|     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |              |                                       |     |\n      |=NITRO        |=HTTP                                  |     |\n      |              |                                       |     |\n      |              |     +-----------+             SSH     |     |\n      +--------------+-----| user host |---------------------+-----+\n                           +-----------+  We need a virtual host to run Netscaler VPX and we also need two hosts\nto run the back end web services. These can be any kind of hosts, as\nlong as it is possible for the Netscaler node and the web server nodes\nto communicate via a specified subnet. Having the backend servers as\nvirtual hosts on the same Xen Server as the Netscaler VPX is recommended\nsince it simplifies the networking setup needed.  In our example the back end servers and the Netscaler host communicate\nvia the  192.168.10.0/24  subnet.  Also there is a user host which is the machine that will run the\nplaybooks for this example. This host needs to be able to communicate\nvia SSH with the back end servers to be able to setup and update the web\nservices and also needs to be able to make NITRO API calls to the\nNetscaler node on the configured NSIP.  Finally Netscaler needs to have a Virtual IP configured which will be\nthe client facing address of our load balanced service.   Tip   \"Note\n        The playbooks and scripts do not configure any of these ip addresses on the Netscaler node or the server nodes. You need to set them up prior to running the playbooks in this example and modify the  inventory.txt  file to match your particular configuration.  More details for the requirements of each node are included in the\nREADME file of the  github\nrepository \ncontaining this example's files.", 
            "title": "Setup"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/#initializing-the-testbed", 
            "text": "Having setup the testbed and modified the inventory.txt file to match\nthe configured ip addresses we need to initialize the Netscaler and the\nback end server nodes.  This is done by running on the user host from a fresh checkout of the\nfiles from the  github\nrepository \nby running the following command  ansible-playbook -i inventory.txt rolling_init.yaml  Running this playbook will initialize the back end services and also\nconfigure the Netscaler in order to serve them over the VIP of the load\nbalancer.  The logical configuration of the Netscaler node can be seen in the\nfollowing diagram.            +\n          |\n          |\n          |\n+---------V----------+\n| Load balancer      |\n| lb_vserver_1       |----------+\n| 10.78.60.203:80    |          |\n+--------------------+          |\n        |                       |\n        |                       |\n        |                       |\n+-------V-----+           +-----V-------+\n| Service 1   |           | Service 2   |\n| server_1    |           | server_2    |\n| port 80     |           | port 80     |\n+-------------+           +-------------+\n        |                       |\n        |                       |\n        |                       |\n+-------V-------+           +-----V---------+\n| server_1      |           | server_2      |\n| 192.168.10.10 |           | 192.168.10.11 |\n+---------------+           +---------------+  In this setup the load balancer virtual server is configured with the\nROUNDROBIN load balancing method and has 2 service members with 50%\nweight each.  To check that the load balancer works correctly run the following\ncommand  curl  10 .78.60.203  You should see a  Hello webserver1 . Running the same command a second\ntime should output  Hello webserver2 .", 
            "title": "Initializing the testbed"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/#upgrade-process", 
            "text": "The upgrade playbook utilizes the  pre_tasks  and  post_tasks  hooks to\nbring the services down and back up during the update process.  The upgrade playbook is the following:  -   hosts :   service_hosts \n   vars : \n     compose_yaml :   /var/tmp/docker-compose.yaml \n\n   remote_user :   root \n   gather_facts :   False \n   serial :   1 \n\n   pre_tasks : \n     -   name :   Disable   {{   servername   }} \n       delegate_to :   localhost \n       netscaler_server : \n         nsip :   {{   nsip   }} \n         nitro_user :   {{   nitro_user   }} \n         nitro_pass :   {{   nitro_pass   }} \n\n         disabled :   yes \n\n         name :   {{   servername   }} \n\n   post_tasks : \n\n     -   name :   Re   enable   {{   servername   }} \n       delegate_to :   localhost \n       netscaler_server : \n         nsip :   {{   nsip   }} \n         nitro_user :   {{   nitro_user   }} \n         nitro_pass :   {{   nitro_pass   }} \n\n         disabled :   no \n         name :   {{   servername   }} \n\n   tasks : \n\n     -   name :   Update   backend   {{   servername   }} \n       command :   docker-compose -f  {{ compose_yaml }}  exec -d webserver bash -c  echo  hello updated {{ servername }}    /app/content.txt   The function of the pre_tasks and post_tasks hooks is documented by ansible .  Essentially what we do is that we disable the server entity in Netscaler\nfor each web service before the update process and after the update has\ntaken place we re enable the server entity.  The  serial: 1  option instructs ansible to operate on the webservers\none at a time. This is a deviation from the default behavior of Ansible\nwhich is to operate on multiple nodes at once.  In our example the update process is just a simple change of the content\nfile on the web service docker container to verify the update has taken\neffect.  To see how the update works you can run  curl  10 .78.60.203  during the update process and see how the output changes.  Since the update itself is a relatively quick process you may not be\nable to see the rolling nature of the upgrade.  For that you may want to run the update script in step mode  ansible-playbook -i inventory.txt rolling_update.yml --step  and watch the output of  curl  10 .78.60.203  a number of times to actually see what happens.  What you should see is each server taken out of the load balancing pool\nand then brought up without any service interruption.  In our example the update of the web server is instantaneous we do not\nhave any actual down time.  In a real world situation the update would put the webserver in a state\nthat would be unable to respond to requests.  Had we not disabled the corresponding server, in this case, would mean\nthat a number of requests would be directed to the offline server\nresulting in clients getting error responses.  Eventually the monitors attached to the Netscaler services would take\nthe disrupted service out of the load balancing pool but depending on\nthe traffic volume several requests would have been affected by the non\nfunctioning service by that time.  Disabling the server before the update process guarantees that Netscaler\nwill not direct any traffic to it during that time, ensuring continuous\ndelivery of the content.", 
            "title": "Upgrade process"
        }, 
        {
            "location": "/usage/rolling-upgrades-vpx/#references", 
            "text": "Netscaler ansible modules repository  Ansible documentation", 
            "title": "References"
        }, 
        {
            "location": "/usage/docker-image/", 
            "text": "Netscaler ansible docker image\n\n\nTo make the running of netscaler ansible modules easier a ready\nto run image exists which does not require\nany software packages installed on the host other than the docker engine.\n\n\nIt is suitable for running quickly and easily simple playbooks that are using\nansible modules and core ansible modules.\n\n\nThe image is not suitable for running any arbitraty ansible playbook since\nmany non core modules require extra dependencies which this docker\nimage does not have installed.\n\n\nInstallation\n\n\nThe installation is quite simple.\n\n\ndocker pull giorgosnikolopoulos/netscaler-ansible:latest\n\n\n\n\n\nUsage\n\n\nThe entrypoint of the docker image is the \nansible-playbook\n command.\n\n\nThis means that it can be used as drop in replacement of this command.\n\n\nRunning\n\n\ndocker run --rm giorgosnikolopoulos/netscaler-ansible:latest\n\n\n\n\n\nWill output the help for the command \nansible-playbook\n\n\nTo run a playbook we need to map a directory of the host to a directory\nof the docker container so that the inventory and playbook files are\naccessible from inside the docker container.\n\n\nSo provided we have in the current directory an inventory file and a playbook\nby running the following\n\n\ndocker run --rm -v $(pwd):/pwd giorgosnikolopoulos/netscaler-ansible -i inventory playbook.yml\n\n\n\n\n\nThe playbook will be executed.\n\n\nOf course the container needs to have also access to the NetScaler\nnode being configured otherwise the execution will fail.\n\n\nExample\n\n\nFollowing is an example of how to use the container along\nwith a NetScaler CPX deployment.\n\n\nWe will use \ndocker-compose\n to setup our testbed using the following\ncompose \ndocker-compose.yaml\n file.\n\n\nversion: \n2\n\n\nservices:\n    cpx:\n        image: giorgosnikolopoulos/cpx:12.0-41.22\n       ports:\n         - \n22\n\n         - \n80\n\n         - \n443\n\n         - \n161\n\n       environment:\n         EULA: \nyes\n\n       ulimits:\n         core: -1\n       tty: true\n       stdin_open: true\n       privileged: true\n\n   netscaler-ansible:\n       image: giorgosnikolopoulos/netscaler-ansible:latest\n       tty: true\n       stdin_open: true\n       volumes:\n         - .:/pwd\n       links:\n         - cpx\n\n\n\n\n\nNote that in addition to instantiating the cpx and netscaler-ansible\ncontainers we also map the current directory to the working directory\nof the netscaler-ansible container and we also create a link to the cpx\ncontainer.\n\n\nThis has the effect that the host's current directory is exposed as it is\ninside the docker container and that there is a network reference to the\ncpx container which can be used instead of the ip address of the container.\n\n\nFor our example we will use the following \ninventory.txt\n file.\n\n\n[netscaler]\n\n\n\nnetscaler_cpx nsip\n=\ncpx nitro_user=nsroot nitro_pass=nsroot\n\n\n\n\n\n\nFor our sample playbook we will use the following \nplay.yaml\n\n\n---\n\n\n\n- hosts: netscaler\n\n\n  gather_facts: false\n\n\n\n  tasks:\n\n\n    - name: lb vserver\n\n\n      delegate_to: localhost\n\n\n      netscaler_lb_vserver:\n\n\n        nsip: \n{{\n \nnsip\n \n}}\n\n\n        nitro_user: \n{{\n \nnitro_user\n \n}}\n\n\n        nitro_pass: \n{{\n \nnitro_pass\n \n}}\n\n\n\n\n        name: lb-vserver-1\n\n\n        servicetype: HTTP\n\n\n        ipv46: 6.92.2.2\n\n\n        port: 80\n\n\n\n    - name: cs action\n\n\n        delegate_to: localhost\n\n\n        netscaler_cs_action:\n\n\n          nsip: \n{{\n \nnsip\n \n}}\n\n\n          nitro_user: \n{{\n \nnitro_user\n \n}}\n\n\n          nitro_pass: \n{{\n \nnitro_pass\n \n}}\n\n\n\n          name: action1\n\n\n          targetlbvserver: lb-vserver-1\n\n\n\n\n\n\nThese files are located in the same directory as the \ndocker-compose.yaml\n\nfile.\n\n\nFirst we bring the containers up.\n\n\ndocker-compose up -d\n\n\n\n\n\nVerify that the containers are setup by running\n\n\ndocker-compose ps\n\n\n\n\n\nYou should see that the cpx container is up and running\nand that the netscaler-ansible container has exited.\n\n\nFrom this point on we can use the \ndocker-compose run netscaler-ansible\n command\nto run our playbooks.\n\n\nTo run the sample playbook run:\n\n\ndocker-compose run netscaler-ansible -i inventory.txt play.yaml\n\n\n\n\n\nYou should see the output of the playbook run just as if you had\nrun \nansible-playbook\n normally.\n\n\nAny valid \nansible-playbook\n option can be passed on the command line to\nthe \nnetscaler-ansible\n container.\n\n\nWhen you no longer need the testbed you can tear it down by running:\n\n\ndocker-compose stop\ndocker-compose rm", 
            "title": "Netscaler ansible docker image"
        }, 
        {
            "location": "/usage/docker-image/#netscaler-ansible-docker-image", 
            "text": "To make the running of netscaler ansible modules easier a ready\nto run image exists which does not require\nany software packages installed on the host other than the docker engine.  It is suitable for running quickly and easily simple playbooks that are using\nansible modules and core ansible modules.  The image is not suitable for running any arbitraty ansible playbook since\nmany non core modules require extra dependencies which this docker\nimage does not have installed.", 
            "title": "Netscaler ansible docker image"
        }, 
        {
            "location": "/usage/docker-image/#installation", 
            "text": "The installation is quite simple.  docker pull giorgosnikolopoulos/netscaler-ansible:latest", 
            "title": "Installation"
        }, 
        {
            "location": "/usage/docker-image/#usage", 
            "text": "The entrypoint of the docker image is the  ansible-playbook  command.  This means that it can be used as drop in replacement of this command.  Running  docker run --rm giorgosnikolopoulos/netscaler-ansible:latest  Will output the help for the command  ansible-playbook  To run a playbook we need to map a directory of the host to a directory\nof the docker container so that the inventory and playbook files are\naccessible from inside the docker container.  So provided we have in the current directory an inventory file and a playbook\nby running the following  docker run --rm -v $(pwd):/pwd giorgosnikolopoulos/netscaler-ansible -i inventory playbook.yml  The playbook will be executed.  Of course the container needs to have also access to the NetScaler\nnode being configured otherwise the execution will fail.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/docker-image/#example", 
            "text": "Following is an example of how to use the container along\nwith a NetScaler CPX deployment.  We will use  docker-compose  to setup our testbed using the following\ncompose  docker-compose.yaml  file.  version:  2 \n\nservices:\n    cpx:\n        image: giorgosnikolopoulos/cpx:12.0-41.22\n       ports:\n         -  22 \n         -  80 \n         -  443 \n         -  161 \n       environment:\n         EULA:  yes \n       ulimits:\n         core: -1\n       tty: true\n       stdin_open: true\n       privileged: true\n\n   netscaler-ansible:\n       image: giorgosnikolopoulos/netscaler-ansible:latest\n       tty: true\n       stdin_open: true\n       volumes:\n         - .:/pwd\n       links:\n         - cpx  Note that in addition to instantiating the cpx and netscaler-ansible\ncontainers we also map the current directory to the working directory\nof the netscaler-ansible container and we also create a link to the cpx\ncontainer.  This has the effect that the host's current directory is exposed as it is\ninside the docker container and that there is a network reference to the\ncpx container which can be used instead of the ip address of the container.  For our example we will use the following  inventory.txt  file.  [netscaler]  netscaler_cpx nsip = cpx nitro_user=nsroot nitro_pass=nsroot   For our sample playbook we will use the following  play.yaml  ---  - hosts: netscaler    gather_facts: false    tasks:      - name: lb vserver        delegate_to: localhost        netscaler_lb_vserver:          nsip:  {{   nsip   }}          nitro_user:  {{   nitro_user   }}          nitro_pass:  {{   nitro_pass   }}          name: lb-vserver-1          servicetype: HTTP          ipv46: 6.92.2.2          port: 80      - name: cs action          delegate_to: localhost          netscaler_cs_action:            nsip:  {{   nsip   }}            nitro_user:  {{   nitro_user   }}            nitro_pass:  {{   nitro_pass   }}            name: action1            targetlbvserver: lb-vserver-1   These files are located in the same directory as the  docker-compose.yaml \nfile.  First we bring the containers up.  docker-compose up -d  Verify that the containers are setup by running  docker-compose ps  You should see that the cpx container is up and running\nand that the netscaler-ansible container has exited.  From this point on we can use the  docker-compose run netscaler-ansible  command\nto run our playbooks.  To run the sample playbook run:  docker-compose run netscaler-ansible -i inventory.txt play.yaml  You should see the output of the playbook run just as if you had\nrun  ansible-playbook  normally.  Any valid  ansible-playbook  option can be passed on the command line to\nthe  netscaler-ansible  container.  When you no longer need the testbed you can tear it down by running:  docker-compose stop\ndocker-compose rm", 
            "title": "Example"
        }, 
        {
            "location": "/generic-modules/about/", 
            "text": "Using generic Ansible modules\n\n\nThe Netscaler Ansible modules try to accomodate the most frequently\nchanging items of the Netscaler configuration. Things that change from\nday to day operations.\n\n\nIn this section we investigate how to leverage Ansible standard modules\nto configure Netscaler to cover the cases where the user needs to use\nAnsible for a Netscaler configuration entity that does not have a\nspecialized Ansible module.\n\n\nWe make use of the Ansible uri module mainly to issue NITRO API requests\nto Netscaler.\n\n\nThe solutions we present here do have drawbacks compared to the use of\nspecialized Netscaler Ansbile modules, such as not having a check mode\noperation, having to check for NITRO errors and handle them accordingly,\nand also having to account for particularities that a configuration\nentity may have.\n\n\nAll these issues are taken care of in the Netscaler specific modules but\nin the solutions we present here the user has to deal with all of these.\n\n\nThe source files referenced in the following sections along with more\nexamples can be found on this \ngithub repository\n.\n\n\nReferences\n\n\n\n\nNITRO API overview\n\n\nNITRO API reference", 
            "title": "Using generic Ansible modules"
        }, 
        {
            "location": "/generic-modules/about/#using-generic-ansible-modules", 
            "text": "The Netscaler Ansible modules try to accomodate the most frequently\nchanging items of the Netscaler configuration. Things that change from\nday to day operations.  In this section we investigate how to leverage Ansible standard modules\nto configure Netscaler to cover the cases where the user needs to use\nAnsible for a Netscaler configuration entity that does not have a\nspecialized Ansible module.  We make use of the Ansible uri module mainly to issue NITRO API requests\nto Netscaler.  The solutions we present here do have drawbacks compared to the use of\nspecialized Netscaler Ansbile modules, such as not having a check mode\noperation, having to check for NITRO errors and handle them accordingly,\nand also having to account for particularities that a configuration\nentity may have.  All these issues are taken care of in the Netscaler specific modules but\nin the solutions we present here the user has to deal with all of these.  The source files referenced in the following sections along with more\nexamples can be found on this  github repository .", 
            "title": "Using generic Ansible modules"
        }, 
        {
            "location": "/generic-modules/about/#references", 
            "text": "NITRO API overview  NITRO API reference", 
            "title": "References"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/", 
            "text": "Templating the configuration file\n\n\nOne method of configuring Netscaler consists of editing the ns.conf file\ndirectly and then rebooting Netscaler for the configuration changes to\ntake effect.\n\n\nAfter the reboot the saved configuration becomes the running\nconfiguration which is what we want to change.\n\n\nWorkflow\n\n\nWith this method we leverage Ansible's \ntemplate module\n to\nproduce a ns.conf file from a Jinja2 template.\n\n\nThe Jinja2 template is populated from configuration variables which can\nbe defined with various methods, inside the playbook, in an inventory\nfile or loaded from inventory files.\n\n\nWe then upload the resulting ns.conf to the Netscaler node which alters\nthe saved configuration.\n\n\nFor the saved configuration to become running configuration we need to\nreboot Netscaler. Doing a warm reboot is recommended since it is\nsufficient to reload the configuration and also avoid the greater\ndowntime a cold reboot would induce.\n\n\nAfter the reboot the user can check the running configuration either\nthrough the GUI or the command line interface and make sure the changes\nhave been succesfully applied.\n\n\nThere is an assortment of playbooks on this \ngithub repository\n which\ncontains sample playbooks that perform fundamental NITRO operations. The\ntasks within each playbook can be combined into a larger playbook which\naccomplishes a full Netscaler configuration.\n\n\nIn fact this is how the following example was constructed.\n\n\nPlaybook\n\n\nIn the following example we showcase how we can setup a load balancer\nwhich balances two backend services. The full content of the referenced\nfiles can be found \nhere\n.\n\n\nProcessing the template\n\n\nFirst we have a Jinja template file to produce the desired ns.conf. It\nis recommended to use an actual ns.conf file from the target Netscaler\nnode as a starting point for the template.\n\n\nThe full file is quite long but the interesting parts are shown below.\n\n\n...\n\n\n\n# Start of Jinja inserted servers\n\n\n{\n%\n \nfor server in configuration.servers %\n}\n\n\nadd server {{ server.name }} {{ server.ipaddress }}\n\n\n{% endfor %}\n\n\n# End of Jinja inserted servers\n\n\n\n...\n\n\n\n# Start of Jinja inserted services\n\n\n{\n%\n \nfor service in configuration.services %\n}\n\n\nadd service {{ service.name }} {{ service.ipaddress }} {{ service.type }} {{ service.port }} -gslb NONE -maxClient 0 -maxReq 0 -cip DISABLED -usip NO -useproxyport YES -sp OFF -cltTimeout 180 -svrTimeout 360 -CKA NO -TCPB NO -CMP NO\n\n\n{% endfor %}\n\n\n# End of Jinja inserted services\n\n\n\n\n...\n\n\n\n# Start of Jinja inserted lb vservers\n\n\n{\n%\n \nfor vserver in configuration.lbvservers %\n}\n\n\nadd lb vserver {{ vserver.name }} {{ vserver.type }} {{ vserver.ipaddress }} {{ vserver.port }} -persistenceType NONE -cltTimeout 180\n\n\n{% endfor %}\n\n\n# End of Jinja inserted lb vservers\n\n\n\n...\n\n\n\n# Start of Jinja inserted lb vservers binds\n\n\n{\n%\n \nfor bind in configuration.lbvserver_binds %\n}\n\n\nbind lb vserver {{ bind.server }} {{ bind.service }} -weight {{ bind.weight }}\n\n\n{% endfor %}\n\n\n# End of Jinja inserted lb vservers binds\n\n\n\n\n\n\nEssentially we iterate over items in the configuration dictionary. This\ndictionary is populated from the playbook variables.\n\n\nDefining the configuration variables\n\n\nThe playbook variables are shown below.\n\n\nvars\n:\n\n  \nfilename\n:\n \nns.conf\n\n  \nfilelocation\n:\n \n/nsconfig\n\n  \nlocalfile\n:\n \n/var/tmp/ns.conf\n\n\n  \nwarm_reboot\n:\n \nyes\n\n\n  \nconfiguration\n:\n\n    \nservers\n:\n\n      \n-\n \nname\n:\n \n192.168.1.1\n\n        \nipaddress\n:\n \n192.168.1.1\n\n      \n-\n \nname\n:\n \n192.168.1.2\n\n        \nipaddress\n:\n \n192.168.1.2\n\n\n    \nservices\n:\n\n      \n-\n \nname\n:\n \nservice-test-1\n\n        \nipaddress\n:\n \n192.168.1.1\n\n        \nport\n:\n \n80\n\n        \ntype\n:\n \nHTTP\n\n\n      \n-\n \nname\n:\n \nservice-test-2\n\n        \nipaddress\n:\n \n192.168.1.2\n\n        \nport\n:\n \n80\n\n        \ntype\n:\n \nHTTP\n\n\n    \nlbvservers\n:\n\n      \n-\n \nname\n:\n \nserver-test\n\n        \nipaddress\n:\n \n10.78.60.203\n\n        \nport\n:\n \n80\n\n        \ntype\n:\n \nHTTP\n\n\n    \nlbvserver_binds\n:\n\n      \n-\n \nserver\n:\n \nserver-test\n\n        \nservice\n:\n \nservice-test-1\n\n        \nweight\n:\n \n50\n\n      \n-\n \nserver\n:\n \nserver-test\n\n        \nservice\n:\n \nservice-test-2\n\n        \nweight\n:\n \n50\n\n\n\n\n\n\nThe configuration dictionary is defined inside the playbook. This is\ndone for maintaining simplicity in the context of the example.\n\n\nA more sophisticated setup could have defined the configuration\ndictionary in a separate variables file, in the inventory file or use\nany other method Ansible allows to define variables.\n\n\nWe also see the variables that configure the paths of the source and\ntarget files. These could also be defined in the different ways the\nconfiguration dictionary is defined.\n\n\nUpload the new ns.conf\n\n\nHaving produced the ns.conf file we need to upload it to Netscaler.\n\n\nFollowing are the tasks that accomplish this.\n\n\n-\n \nname\n:\n \nDelete old ns.conf\n\n  \ndelegate_to\n:\n \nlocalhost\n\n  \nuri\n:\n\n    \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/systemfile?args=filename:{{\n \nfilename\n \n}},filelocation:{{\n \nfilelocation\n \n|\n \nreplace(\n/\n,\n%2F\n)\n \n}}\n\n    \nmethod\n:\n \nDELETE\n\n    \nstatus_code\n:\n \n200\n\n    \nreturn_content\n:\n \nyes\n\n    \nheaders\n:\n\n      \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n      \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n\n\n-\n \nname\n:\n \nUpload new ns.conf\n\n  \ndelegate_to\n:\n \nlocalhost\n\n  \nuri\n:\n\n    \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/systemfile\n\n    \nmethod\n:\n \nPOST\n\n    \nstatus_code\n:\n \n201\n\n    \nreturn_content\n:\n \nyes\n\n    \nheaders\n:\n\n      \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n      \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n    \nbody_format\n:\n \njson\n\n    \nbody\n:\n\n      \nsystemfile\n:\n\n        \nfilename\n:\n \n{{\n \nfilename\n \n}}\n\n        \nfilecontent\n:\n \n{{\n \nlookup(\nfile\n,\n \nlocalfile)\n \n|\n \nb64encode\n \n}}\n\n        \nfilelocation\n:\n \n{{\n \nfilelocation\n \n}}\n\n\n\n\n\n\nNotice that we need to delete the existing file before copying the new\none. Trying to upload a file to an existing file path will result in a\nNITRO error.\n\n\nRebooting Netscaler\n\n\nThe last step is to warm reboot the Netscaler node. Replacing the\nns.conf file overwrites the saved configuration. The running\nconfiguration of Netscaler remains unaffected. To force Netscaler to\napply the saved configuration we need to reboot it. We have the option\ndo a warm reboot which results in less downtime than a full reboot.\n\n\nThe task that accomplishes this is shown below.\n\n\n-\n \nname\n:\n \nReboot Netscaler\n\n  \ndelegate_to\n:\n \nlocalhost\n\n  \nuri\n:\n\n    \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/reboot\n\n    \nmethod\n:\n \nPOST\n\n    \nstatus_code\n:\n \n201\n\n    \nheaders\n:\n\n      \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n      \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n    \nbody_format\n:\n \njson\n\n    \nbody\n:\n\n      \nreboot\n:\n\n        \nwarm\n:\n \n{{\n \nwarm_reboot\n \n}}\n\n\n\n\n\n\nFinal points\n\n\nThe user needs for this example to set the variables needed for\nauthentication and communication with Netscaler. Namely \nnsip\n,\n\nnitro_user\n, \nnitro_pass\n. These variables retain the meaning they have\nin the Netscaler specific Ansible modules.\n\n\nAll tasks are run with the \ndelegate_to: localhost\n option set. This is\nneeded since we are making NITRO API calls to the Netscaler node. We do\nnot want to connect directly with SSH to it.\n\n\nIn some deployments the delegated host may need to be the bastion node\nthat has actual NITRO access to the Netscaler node.\n\n\nReferences\n\n\n\n\nAnsible NITRO API calls repository\n\n\nAnsible template module documentation", 
            "title": "Templating the configuration file"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#templating-the-configuration-file", 
            "text": "One method of configuring Netscaler consists of editing the ns.conf file\ndirectly and then rebooting Netscaler for the configuration changes to\ntake effect.  After the reboot the saved configuration becomes the running\nconfiguration which is what we want to change.", 
            "title": "Templating the configuration file"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#workflow", 
            "text": "With this method we leverage Ansible's  template module  to\nproduce a ns.conf file from a Jinja2 template.  The Jinja2 template is populated from configuration variables which can\nbe defined with various methods, inside the playbook, in an inventory\nfile or loaded from inventory files.  We then upload the resulting ns.conf to the Netscaler node which alters\nthe saved configuration.  For the saved configuration to become running configuration we need to\nreboot Netscaler. Doing a warm reboot is recommended since it is\nsufficient to reload the configuration and also avoid the greater\ndowntime a cold reboot would induce.  After the reboot the user can check the running configuration either\nthrough the GUI or the command line interface and make sure the changes\nhave been succesfully applied.  There is an assortment of playbooks on this  github repository  which\ncontains sample playbooks that perform fundamental NITRO operations. The\ntasks within each playbook can be combined into a larger playbook which\naccomplishes a full Netscaler configuration.  In fact this is how the following example was constructed.", 
            "title": "Workflow"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#playbook", 
            "text": "In the following example we showcase how we can setup a load balancer\nwhich balances two backend services. The full content of the referenced\nfiles can be found  here .", 
            "title": "Playbook"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#processing-the-template", 
            "text": "First we have a Jinja template file to produce the desired ns.conf. It\nis recommended to use an actual ns.conf file from the target Netscaler\nnode as a starting point for the template.  The full file is quite long but the interesting parts are shown below.  ...  # Start of Jinja inserted servers  { %   for server in configuration.servers % }  add server {{ server.name }} {{ server.ipaddress }}  {% endfor %}  # End of Jinja inserted servers  ...  # Start of Jinja inserted services  { %   for service in configuration.services % }  add service {{ service.name }} {{ service.ipaddress }} {{ service.type }} {{ service.port }} -gslb NONE -maxClient 0 -maxReq 0 -cip DISABLED -usip NO -useproxyport YES -sp OFF -cltTimeout 180 -svrTimeout 360 -CKA NO -TCPB NO -CMP NO  {% endfor %}  # End of Jinja inserted services  ...  # Start of Jinja inserted lb vservers  { %   for vserver in configuration.lbvservers % }  add lb vserver {{ vserver.name }} {{ vserver.type }} {{ vserver.ipaddress }} {{ vserver.port }} -persistenceType NONE -cltTimeout 180  {% endfor %}  # End of Jinja inserted lb vservers  ...  # Start of Jinja inserted lb vservers binds  { %   for bind in configuration.lbvserver_binds % }  bind lb vserver {{ bind.server }} {{ bind.service }} -weight {{ bind.weight }}  {% endfor %}  # End of Jinja inserted lb vservers binds   Essentially we iterate over items in the configuration dictionary. This\ndictionary is populated from the playbook variables.", 
            "title": "Processing the template"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#defining-the-configuration-variables", 
            "text": "The playbook variables are shown below.  vars : \n   filename :   ns.conf \n   filelocation :   /nsconfig \n   localfile :   /var/tmp/ns.conf \n\n   warm_reboot :   yes \n\n   configuration : \n     servers : \n       -   name :   192.168.1.1 \n         ipaddress :   192.168.1.1 \n       -   name :   192.168.1.2 \n         ipaddress :   192.168.1.2 \n\n     services : \n       -   name :   service-test-1 \n         ipaddress :   192.168.1.1 \n         port :   80 \n         type :   HTTP \n\n       -   name :   service-test-2 \n         ipaddress :   192.168.1.2 \n         port :   80 \n         type :   HTTP \n\n     lbvservers : \n       -   name :   server-test \n         ipaddress :   10.78.60.203 \n         port :   80 \n         type :   HTTP \n\n     lbvserver_binds : \n       -   server :   server-test \n         service :   service-test-1 \n         weight :   50 \n       -   server :   server-test \n         service :   service-test-2 \n         weight :   50   The configuration dictionary is defined inside the playbook. This is\ndone for maintaining simplicity in the context of the example.  A more sophisticated setup could have defined the configuration\ndictionary in a separate variables file, in the inventory file or use\nany other method Ansible allows to define variables.  We also see the variables that configure the paths of the source and\ntarget files. These could also be defined in the different ways the\nconfiguration dictionary is defined.", 
            "title": "Defining the configuration variables"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#upload-the-new-nsconf", 
            "text": "Having produced the ns.conf file we need to upload it to Netscaler.  Following are the tasks that accomplish this.  -   name :   Delete old ns.conf \n   delegate_to :   localhost \n   uri : \n     url :   http://{{   nsip   }}/nitro/v1/config/systemfile?args=filename:{{   filename   }},filelocation:{{   filelocation   |   replace( / , %2F )   }} \n     method :   DELETE \n     status_code :   200 \n     return_content :   yes \n     headers : \n       X-NITRO-USER :   {{   nitro_user   }} \n       X-NITRO-PASS :   {{   nitro_pass   }}  -   name :   Upload new ns.conf \n   delegate_to :   localhost \n   uri : \n     url :   http://{{   nsip   }}/nitro/v1/config/systemfile \n     method :   POST \n     status_code :   201 \n     return_content :   yes \n     headers : \n       X-NITRO-USER :   {{   nitro_user   }} \n       X-NITRO-PASS :   {{   nitro_pass   }} \n     body_format :   json \n     body : \n       systemfile : \n         filename :   {{   filename   }} \n         filecontent :   {{   lookup( file ,   localfile)   |   b64encode   }} \n         filelocation :   {{   filelocation   }}   Notice that we need to delete the existing file before copying the new\none. Trying to upload a file to an existing file path will result in a\nNITRO error.", 
            "title": "Upload the new ns.conf"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#rebooting-netscaler", 
            "text": "The last step is to warm reboot the Netscaler node. Replacing the\nns.conf file overwrites the saved configuration. The running\nconfiguration of Netscaler remains unaffected. To force Netscaler to\napply the saved configuration we need to reboot it. We have the option\ndo a warm reboot which results in less downtime than a full reboot.  The task that accomplishes this is shown below.  -   name :   Reboot Netscaler \n   delegate_to :   localhost \n   uri : \n     url :   http://{{   nsip   }}/nitro/v1/config/reboot \n     method :   POST \n     status_code :   201 \n     headers : \n       X-NITRO-USER :   {{   nitro_user   }} \n       X-NITRO-PASS :   {{   nitro_pass   }} \n     body_format :   json \n     body : \n       reboot : \n         warm :   {{   warm_reboot   }}", 
            "title": "Rebooting Netscaler"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#final-points", 
            "text": "The user needs for this example to set the variables needed for\nauthentication and communication with Netscaler. Namely  nsip , nitro_user ,  nitro_pass . These variables retain the meaning they have\nin the Netscaler specific Ansible modules.  All tasks are run with the  delegate_to: localhost  option set. This is\nneeded since we are making NITRO API calls to the Netscaler node. We do\nnot want to connect directly with SSH to it.  In some deployments the delegated host may need to be the bastion node\nthat has actual NITRO access to the Netscaler node.", 
            "title": "Final points"
        }, 
        {
            "location": "/generic-modules/templating-configuration-file/#references", 
            "text": "Ansible NITRO API calls repository  Ansible template module documentation", 
            "title": "References"
        }, 
        {
            "location": "/generic-modules/nitro-api-calls/", 
            "text": "Direct NITRO API calls\n\n\nOne method of configuring Netscaler consists of making direct NITRO API\ncalls using Ansbile's \nuri module\n.\n\n\nThis method tends to be quite verbose since setting up even basic\nfunctions requires multiple NITRO calls.\n\n\nAnother consideration is failure robustness. NITRO API call failures\nresult in the uri module task failing immediately and stopping the\nexecution of the rest of the playbook.\n\n\nThis may be desired behavior in general since in some cases we need to\nexamine the failure response to actually determine if the operation was\nindeed a failure or expected.\n\n\nAn example of that would be trying to add a resource while it exists.\nThis is will result in failure since the HTTP POST request will not\ncreate the resource but this does not mean the configuration of\nNetscaler is necessarily invalid.\n\n\nUsing Ansible's conditional constructs we can work around this problem\nin most cases but this adds to the verbosity and complexity of the\nplaybooks.\n\n\nWorkflow\n\n\nIn the following example we use direct NITRO API calls to create or\nupdate a basic server.\n\n\nThe play would be quite short but we have added some control logic to\ndetect whether the resource already exists and then apply the\nappropriate operation.\n\n\nWe first try to get the details of the configuration resource. We\nexamine the outcome of this operation and if it was successful we\nproceed to update the resource. If it failed we examine the exact\nerrorcode and if it signifies that the error was due to the resource\nmissing we proceed to create it.\n\n\nOn any other outcome, an error that was not what was expected, the play\nfails.\n\n\nThe final task is to save the running configuration to ensure that a\nreboot of Netscaler will not undo the changes we have made.\n\n\nPlaybook\n\n\n-\n \nhosts\n:\n \nnetscaler\n\n  \ngather_facts\n:\n \nno\n\n  \nvars\n:\n\n    \nresource\n:\n \nserver\n\n    \nrequest_payload\n:\n\n      \nserver\n:\n\n        \nname\n:\n \ntest-server-1\n\n        \nipaddress\n:\n \n192.168.1.6\n\n\n  \ntasks\n:\n\n    \n-\n \nname\n:\n \nGet resource\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nignore_errors\n:\n \ntrue\n\n      \nregister\n:\n \nresult\n\n      \nuri\n:\n\n        \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/{{\n \nresource\n \n}}/{{\n \nrequest_payload.server.name\n \n}}\n\n        \nmethod\n:\n \nGET\n\n        \nstatus_code\n:\n \n200\n\n        \nreturn_content\n:\n \nyes\n\n        \nheaders\n:\n\n          \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n          \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n\n    \n-\n \nname\n:\n \nCheck success or expected failure\n\n      \nassert\n:\n\n        \nthat\n:\n \nresult|succeeded or ( result|failed and result.json.errorcode == 258 )\n\n\n    \n-\n \nname\n:\n \nAdd resource when not existing\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nwhen\n:\n \nresult|failed\n\n      \nuri\n:\n\n        \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/{{\n \nresource\n \n}}\n\n        \nmethod\n:\n \nPOST\n\n        \nstatus_code\n:\n \n201\n\n        \nreturn_content\n:\n \nyes\n\n        \nheaders\n:\n\n          \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n          \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n        \nbody_format\n:\n \njson\n\n        \nbody\n:\n \n{{\n \nrequest_payload\n \n}}\n\n\n    \n-\n \nname\n:\n \nUpdate resource if existing\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nwhen\n:\n \nresult|succeeded\n\n      \nuri\n:\n\n        \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/{{\n \nresource\n \n}}\n\n        \nmethod\n:\n \nPUT\n\n        \nstatus_code\n:\n \n200\n\n        \nreturn_content\n:\n \nyes\n\n        \nheaders\n:\n\n          \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n          \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n        \nbody_format\n:\n \njson\n\n        \nbody\n:\n \n{{\n \nrequest_payload\n \n}}\n\n\n    \n-\n \nname\n:\n \nSave running configuration\n\n      \ndelegate_to\n:\n \nlocalhost\n\n      \nuri\n:\n\n        \nurl\n:\n \nhttp://{{\n \nnsip\n \n}}/nitro/v1/config/nsconfig?action=save\n\n        \nmethod\n:\n \nPOST\n\n        \nstatus_code\n:\n \n200\n\n        \nheaders\n:\n\n          \nX-NITRO-USER\n:\n \n{{\n \nnitro_user\n \n}}\n\n          \nX-NITRO-PASS\n:\n \n{{\n \nnitro_pass\n \n}}\n\n        \nbody_format\n:\n \njson\n\n        \nbody\n:\n\n          \nnsconfig\n:\n \n{}\n\n\n\n\n\n\nFor the first task which detects if the resource already exists we have\nset \nignore_errors: true\n. This has the effect that an error will not\nstop the execution of the playbook. We also register the result under\nthe variable \nresult\n to be available for examination in the following\ntasks.\n\n\nThe next task leverages Ansible's \nassert module\n to\ndistinguish between an expected failure and an unexpected one. In the\ncase of an unexpected failure this task fails and prevents any further\nexecution.\n\n\nNext there are two tasks, one creating the resource and one updating the\nexisting resource. Which one executes depends on the condition defined\nin each task's \nwhen:\n option.\n\n\nReferences\n\n\n\n\nAnsible NITRO API calls repository\n\n\nAnsible uri module documentation\n\n\nAnsible assert module documentation", 
            "title": "Direct NITRO API calls"
        }, 
        {
            "location": "/generic-modules/nitro-api-calls/#direct-nitro-api-calls", 
            "text": "One method of configuring Netscaler consists of making direct NITRO API\ncalls using Ansbile's  uri module .  This method tends to be quite verbose since setting up even basic\nfunctions requires multiple NITRO calls.  Another consideration is failure robustness. NITRO API call failures\nresult in the uri module task failing immediately and stopping the\nexecution of the rest of the playbook.  This may be desired behavior in general since in some cases we need to\nexamine the failure response to actually determine if the operation was\nindeed a failure or expected.  An example of that would be trying to add a resource while it exists.\nThis is will result in failure since the HTTP POST request will not\ncreate the resource but this does not mean the configuration of\nNetscaler is necessarily invalid.  Using Ansible's conditional constructs we can work around this problem\nin most cases but this adds to the verbosity and complexity of the\nplaybooks.", 
            "title": "Direct NITRO API calls"
        }, 
        {
            "location": "/generic-modules/nitro-api-calls/#workflow", 
            "text": "In the following example we use direct NITRO API calls to create or\nupdate a basic server.  The play would be quite short but we have added some control logic to\ndetect whether the resource already exists and then apply the\nappropriate operation.  We first try to get the details of the configuration resource. We\nexamine the outcome of this operation and if it was successful we\nproceed to update the resource. If it failed we examine the exact\nerrorcode and if it signifies that the error was due to the resource\nmissing we proceed to create it.  On any other outcome, an error that was not what was expected, the play\nfails.  The final task is to save the running configuration to ensure that a\nreboot of Netscaler will not undo the changes we have made.", 
            "title": "Workflow"
        }, 
        {
            "location": "/generic-modules/nitro-api-calls/#playbook", 
            "text": "-   hosts :   netscaler \n   gather_facts :   no \n   vars : \n     resource :   server \n     request_payload : \n       server : \n         name :   test-server-1 \n         ipaddress :   192.168.1.6 \n\n   tasks : \n     -   name :   Get resource \n       delegate_to :   localhost \n       ignore_errors :   true \n       register :   result \n       uri : \n         url :   http://{{   nsip   }}/nitro/v1/config/{{   resource   }}/{{   request_payload.server.name   }} \n         method :   GET \n         status_code :   200 \n         return_content :   yes \n         headers : \n           X-NITRO-USER :   {{   nitro_user   }} \n           X-NITRO-PASS :   {{   nitro_pass   }} \n\n     -   name :   Check success or expected failure \n       assert : \n         that :   result|succeeded or ( result|failed and result.json.errorcode == 258 ) \n\n     -   name :   Add resource when not existing \n       delegate_to :   localhost \n       when :   result|failed \n       uri : \n         url :   http://{{   nsip   }}/nitro/v1/config/{{   resource   }} \n         method :   POST \n         status_code :   201 \n         return_content :   yes \n         headers : \n           X-NITRO-USER :   {{   nitro_user   }} \n           X-NITRO-PASS :   {{   nitro_pass   }} \n         body_format :   json \n         body :   {{   request_payload   }} \n\n     -   name :   Update resource if existing \n       delegate_to :   localhost \n       when :   result|succeeded \n       uri : \n         url :   http://{{   nsip   }}/nitro/v1/config/{{   resource   }} \n         method :   PUT \n         status_code :   200 \n         return_content :   yes \n         headers : \n           X-NITRO-USER :   {{   nitro_user   }} \n           X-NITRO-PASS :   {{   nitro_pass   }} \n         body_format :   json \n         body :   {{   request_payload   }} \n\n     -   name :   Save running configuration \n       delegate_to :   localhost \n       uri : \n         url :   http://{{   nsip   }}/nitro/v1/config/nsconfig?action=save \n         method :   POST \n         status_code :   200 \n         headers : \n           X-NITRO-USER :   {{   nitro_user   }} \n           X-NITRO-PASS :   {{   nitro_pass   }} \n         body_format :   json \n         body : \n           nsconfig :   {}   For the first task which detects if the resource already exists we have\nset  ignore_errors: true . This has the effect that an error will not\nstop the execution of the playbook. We also register the result under\nthe variable  result  to be available for examination in the following\ntasks.  The next task leverages Ansible's  assert module  to\ndistinguish between an expected failure and an unexpected one. In the\ncase of an unexpected failure this task fails and prevents any further\nexecution.  Next there are two tasks, one creating the resource and one updating the\nexisting resource. Which one executes depends on the condition defined\nin each task's  when:  option.", 
            "title": "Playbook"
        }, 
        {
            "location": "/generic-modules/nitro-api-calls/#references", 
            "text": "Ansible NITRO API calls repository  Ansible uri module documentation  Ansible assert module documentation", 
            "title": "References"
        }, 
        {
            "location": "/modules/", 
            "text": "Module Index\n\n\nNetwork Modules\n\n\nNetScaler\n\n\n\n\nnetscaler_cs_action\n - Manage content switching actions\n\n\nnetscaler_cs_policy\n - Manage content switching policy\n\n\nnetscaler_cs_vserver\n - Manage content switching vserver\n\n\nnetscaler_gslb_service\n - Manage gslb service entities in Netscaler.\n\n\nnetscaler_gslb_site\n - Manage gslb site entities in Netscaler.\n\n\nnetscaler_gslb_vserver\n - Configure gslb vserver entities in Netscaler.\n\n\nnetscaler_lb_monitor\n - Manage load balancing monitors\n\n\nnetscaler_lb_vserver\n - Manage load balancing vserver configuration\n\n\nnetscaler_save_config\n - Save Netscaler configuration.\n\n\nnetscaler_server\n - Manage server configuration\n\n\nnetscaler_service\n - Manage service configuration in Netscaler\n\n\nnetscaler_servicegroup\n - Manage service group configuration in Netscaler\n\n\nnetscaler_ssl_certkey\n - Manage ssl cerificate keys.\n\n\n\n\n\n\nNote\n(D)\n: This marks a module as deprecated, which means a module is kept for backwards compatibility but usage is discouraged. The module documentation details page may explain more about this rationale.", 
            "title": "Module index"
        }, 
        {
            "location": "/modules/#module-index", 
            "text": "", 
            "title": "Module Index"
        }, 
        {
            "location": "/modules/#network-modules", 
            "text": "", 
            "title": "Network Modules"
        }, 
        {
            "location": "/modules/#netscaler", 
            "text": "netscaler_cs_action  - Manage content switching actions  netscaler_cs_policy  - Manage content switching policy  netscaler_cs_vserver  - Manage content switching vserver  netscaler_gslb_service  - Manage gslb service entities in Netscaler.  netscaler_gslb_site  - Manage gslb site entities in Netscaler.  netscaler_gslb_vserver  - Configure gslb vserver entities in Netscaler.  netscaler_lb_monitor  - Manage load balancing monitors  netscaler_lb_vserver  - Manage load balancing vserver configuration  netscaler_save_config  - Save Netscaler configuration.  netscaler_server  - Manage server configuration  netscaler_service  - Manage service configuration in Netscaler  netscaler_servicegroup  - Manage service group configuration in Netscaler  netscaler_ssl_certkey  - Manage ssl cerificate keys.    Note (D) : This marks a module as deprecated, which means a module is kept for backwards compatibility but usage is discouraged. The module documentation details page may explain more about this rationale.", 
            "title": "NetScaler"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/", 
            "text": "netscaler_cs_action - Manage content switching actions\n\n\nSynopsis\n\n\n\n\nManage content switching actions\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nComments associated with this cs action.\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the content switching action. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at sign \n@\n, equal sign \n=\n, and hyphen \n-\n characters. Can be changed after the content switching action is created.\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntargetlbvserver\n\n\nno\n\n\n\n    \n\n    \nName of the load balancing virtual server to which the content is switched.\n        \n\n            \ntargetvserver\n\n\nno\n\n\n\n    \n\n    \nName of the VPN virtual server to which the content is switched.\n        \n\n            \ntargetvserverexpr\n\n\nno\n\n\n\n    \n\n    \nInformation about this content switching action.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n# lb_vserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Configure netscaler content switching action\n  delegate_to: localhost\n  netscaler_cs_action:\n      nsip: 172.18.0.2\n      nitro_user: nsroot\n      nitro_pass: nsroot\n      validate_certs: no\n\n      state: present\n\n      name: action-1\n      targetlbvserver: lb_vserver_1\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n string \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dictionary \n\n    \n { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' } \n\n\n\n    \ncontains: \n\n\n\n    \n\n    \n\n    \nname\n\n    \ndescription\n\n    \nreturned\n\n    \ntype\n\n    \nsample\n\n    \n\n\n\n    \n\n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_cs_action"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#netscaler95cs95action-manage-content-switching-actions", 
            "text": "", 
            "title": "netscaler_cs_action - Manage content switching actions"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#synopsis", 
            "text": "Manage content switching actions  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             comment  no  \n     \n     Comments associated with this cs action.          \n             name  no  \n     \n     Name for the content switching action. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at sign  @ , equal sign  = , and hyphen  -  characters. Can be changed after the content switching action is created.          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             targetlbvserver  no  \n     \n     Name of the load balancing virtual server to which the content is switched.          \n             targetvserver  no  \n     \n     Name of the VPN virtual server to which the content is switched.          \n             targetvserverexpr  no  \n     \n     Information about this content switching action.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#examples", 
            "text": "# lb_vserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Configure netscaler content switching action\n  delegate_to: localhost\n  netscaler_cs_action:\n      nsip: 172.18.0.2\n      nitro_user: nsroot\n      nitro_pass: nsroot\n      validate_certs: no\n\n      state: present\n\n      name: action-1\n      targetlbvserver: lb_vserver_1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      string  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dictionary  \n      { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' }   \n     contains:   \n     \n     \n     name \n     description \n     returned \n     type \n     sample \n     \n\n\n      \n\n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-cs-action-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/", 
            "text": "netscaler_cs_policy - Manage content switching policy\n\n\nSynopsis\n\n\n\n\nManage content switching policy.\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \naction\n\n\nno\n\n\n\n    \n\n    \nContent switching action that names the target load balancing virtual server to which the traffic is switched.\n        \n\n            \ndomain\n\n\nno\n\n\n\n    \n\n    \nThe domain name. The string value can range to 63 characters.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npolicyname\n\n\nno\n\n\n\n    \n\n    \nName for the content switching policy. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at sign \n@\n, equal sign \n=\n, and hyphen \n-\n characters. Cannot be changed after a policy is created.\nThe following requirement applies only to the NetScaler CLI:\nIf the name includes one or more spaces, enclose the name in double or single quotation marks (for example, my policy or my policy).\nMinimum length = 1\n        \n\n            \nrule\n\n\nno\n\n\n\n    \n\n    \nExpression, or name of a named expression, against which traffic is evaluated. Written in the classic or default syntax.\nNote:\nMaximum length of a string literal in the expression is 255 characters. A longer string can be split into smaller strings of up to 255 characters each, and the smaller strings concatenated with the + operator. For example, you can create a 500-character string as follows: '\"\nstring of 255 characters\n\" + \"\nstring of 245 characters\n\"'\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nurl\n\n\nno\n\n\n\n    \n\n    \nURL string that is matched with the URL of a request. Can contain a wildcard character. Specify the string value in the following format: \n[[prefix] [*]] [.suffix]\n.\nMinimum length = 1\nMaximum length = 208\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n- name: Create url cs policy\n  delegate_to: localhost\n  netscaler_cs_policy:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n\n    state: present\n\n    policyname: policy_1\n    url: /example/\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Could not load nitro python sdk \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n {'url': 'difference. ours: (str) example1 other: (str) /example1'} \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_cs_policy"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#netscaler95cs95policy-manage-content-switching-policy", 
            "text": "", 
            "title": "netscaler_cs_policy - Manage content switching policy"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#synopsis", 
            "text": "Manage content switching policy.  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             action  no  \n     \n     Content switching action that names the target load balancing virtual server to which the traffic is switched.          \n             domain  no  \n     \n     The domain name. The string value can range to 63 characters. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             policyname  no  \n     \n     Name for the content switching policy. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore, hash  # , period  . , space    , colon  : , at sign  @ , equal sign  = , and hyphen  -  characters. Cannot be changed after a policy is created. The following requirement applies only to the NetScaler CLI: If the name includes one or more spaces, enclose the name in double or single quotation marks (for example, my policy or my policy). Minimum length = 1          \n             rule  no  \n     \n     Expression, or name of a named expression, against which traffic is evaluated. Written in the classic or default syntax. Note: Maximum length of a string literal in the expression is 255 characters. A longer string can be split into smaller strings of up to 255 characters each, and the smaller strings concatenated with the + operator. For example, you can create a 500-character string as follows: '\" string of 255 characters \" + \" string of 245 characters \"'          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             url  no  \n     \n     URL string that is matched with the URL of a request. Can contain a wildcard character. Specify the string value in the following format:  [[prefix] [*]] [.suffix] . Minimum length = 1 Maximum length = 208          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#examples", 
            "text": "- name: Create url cs policy\n  delegate_to: localhost\n  netscaler_cs_policy:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n    validate_certs: no\n\n    state: present\n\n    policyname: policy_1\n    url: /example/", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Could not load nitro python sdk   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      {'url': 'difference. ours: (str) example1 other: (str) /example1'}   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-cs-policy-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/", 
            "text": "netscaler_cs_vserver - Manage content switching vserver\n\n\nSynopsis\n\n\n\n\nManage content switching vserver\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging appflow flow information.\n        \n\n            \nauthentication\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nAuthenticate users who request a connection to the content switching virtual server.\n        \n\n            \nauthenticationhost\n\n\nno\n\n\n\n    \n\n    \nFQDN of the authentication virtual server. The service type of the virtual server should be either \nHTTP\n or \nSSL\n.\nMinimum length = 3\nMaximum length = 252\n        \n\n            \nauthn401\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable HTTP 401-response based authentication.\n        \n\n            \nauthnprofile\n\n\nno\n\n\n\n    \n\n    \nName of the authentication profile to be used when authentication is turned on.\n        \n\n            \nauthnvsname\n\n\nno\n\n\n\n    \n\n    \nName of authentication virtual server that authenticates the incoming user requests to this content switching virtual server. .\nMinimum length = 1\nMaximum length = 252\n        \n\n            \nbackupip\n\n\nno\n\n\n\n    \n\n    \n.\nMinimum length = 1\n        \n\n            \nbackupvserver\n\n\nno\n\n\n\n    \n\n    \nName of the backup virtual server that you are configuring. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at sign \n@\n, equal sign \n=\n, and hyphen \n-\n characters. Can be changed after the backup virtual server is created. You can assign a different backup virtual server or rename the existing virtual server.\nMinimum length = 1\n        \n\n            \ncacheable\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nUse this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache redirection virtual server before sending it to the configured servers.\n        \n\n            \ncasesensitive\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nConsider case in URLs (for policies that use URLs instead of RULES). For example, with the \non\n setting, the URLs /a/1.html and /A/1.HTML are treated differently and can have different targets (set by content switching policies). With the \noff\n setting, /a/1.html and /A/1.HTML are switched to the same target.\n        \n\n            \nclttimeout\n\n\nno\n\n\n\n    \n\n    \nIdle time, in seconds, after which the client connection is terminated. The default values are:\nMinimum value = \n0\nMaximum value = \n31536000\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nInformation about this virtual server.\n        \n\n            \ncookiedomain\n\n\nno\n\n\n\n    \n\n    \n.\nMinimum length = 1\n        \n\n            \ncookietimeout\n\n\nno\n\n\n\n    \n\n    \n.\nMinimum value = \n0\nMaximum value = \n1440\n        \n\n            \ndbprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the DB profile.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ndisabled\n\n\nno\n\n\nno\n\n    \nyes\nno\n\n    \nWhen set to \nyes\n the cs vserver will be disabled.\nWhen set to \nno\n the cs vserver will be enabled.\nNote that due to limitations of the underlying NITRO API a \ndisabled\n state change alone does not cause the module result to report a changed status.\n        \n\n            \ndisableprimaryondown\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nContinue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state.\n        \n\n            \ndnsprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the DNS profile to be associated with the VServer. DNS profile properties will applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ndomainname\n\n\nno\n\n\n\n    \n\n    \nDomain name for which to change the time to live (TTL) and/or backup service IP address.\nMinimum length = 1\n        \n\n            \ndownstateflush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nFlush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.\n        \n\n            \nhttpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the HTTP profile containing HTTP configuration settings for the virtual server. The service type of the virtual server should be either \nHTTP\n or \nSSL\n.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nicmpvsrresponse\n\n\nno\n\n\n\n    \nPASSIVE\nACTIVE\n\n    \nCan be active or passive.\n        \n\n            \ninsertvserveripport\n\n\nno\n\n\n\n    \nOFF\nVIPADDR\nV6TOV4MAPPING\n\n    \nInsert the virtual server's VIP address and port number in the request header. Available values function as follows:\nVIPADDR\n - Header contains the vserver's IP address and port number without any translation.\nOFF\n - The virtual IP and port header insertion option is disabled.\nV6TOV4MAPPING\n - Header contains the mapped IPv4 address corresponding to the IPv6 address of the vserver and the port number. An IPv6 address can be mapped to a user-specified IPv4 address using the set ns ip6 command.\n        \n\n            \nipmask\n\n\nno\n\n\n\n    \n\n    \nIP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, \n255.255.240.0\n or \n0.0.255.255\n). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.\n        \n\n            \nippattern\n\n\nno\n\n\n\n    \n\n    \nIP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.\nFor example, if the IP pattern assigned to the virtual server is \n198.51.100.0\n and the IP mask is \n255.255.240.0\n (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from 198.51.96.1 to 198.51.111.254. You can also use a pattern such as \n0.0.2.2\n and a mask such as \n0.0.255.255\n (a reverse mask).\nIf a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if the virtual servers, \nvs1\n and \nvs2\n, have the same IP pattern, \n0.0.100.128\n, but different IP masks of \n0.0.255.255\n and \n0.0.224.255\n, a destination IP address of 198.51.100.128 has the longest match with the IP pattern of \nvs1\n. If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.\n        \n\n            \nipv46\n\n\nno\n\n\n\n    \n\n    \nIP address of the content switching virtual server.\nMinimum length = 1\n        \n\n            \nl2conn\n\n\nno\n\n\n\n    \n\n    \nUse L2 Parameters to identify a connection.\n        \n\n            \nlistenpolicy\n\n\nno\n\n\n\n    \n\n    \nString specifying the listen policy for the content switching virtual server. Can be either the name of an existing expression or an in-line expression.\n        \n\n            \nmssqlserverversion\n\n\nno\n\n\n\n    \n70\n2000\n2000SP1\n2005\n2008\n2008R2\n2012\n2014\n\n    \nThe version of the MSSQL server.\n        \n\n            \nmysqlcharacterset\n\n\nno\n\n\n\n    \n\n    \nThe character set returned by the mysql vserver.\n        \n\n            \nmysqlprotocolversion\n\n\nno\n\n\n\n    \n\n    \nThe protocol version returned by the mysql vserver.\n        \n\n            \nmysqlservercapabilities\n\n\nno\n\n\n\n    \n\n    \nThe server capabilities returned by the mysql vserver.\n        \n\n            \nmysqlserverversion\n\n\nno\n\n\n\n    \n\n    \nThe server version string returned by the mysql vserver.\nMinimum length = 1\nMaximum length = 31\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the content switching virtual server. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space, colon \n:\n, at sign \n@\n, equal sign \n=\n, and hyphen \n-\n characters.\nCannot be changed after the CS virtual server is created.\nMinimum length = 1\n        \n\n            \nnetprofile\n\n\nno\n\n\n\n    \n\n    \nThe name of the network profile.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \noracleserverversion\n\n\nno\n\n\n\n    \n10G\n11G\n\n    \nOracle server version.\n        \n\n            \nport\n\n\nno\n\n\n\n    \n\n    \nPort number for content switching virtual server.\nMinimum value = 1\nRange \n1\n - \n65535\n* in CLI is represented as 65535 in NITRO API\n        \n\n            \nprecedence\n\n\nno\n\n\n\n    \nRULE\nURL\n\n    \nType of precedence to use for both RULE-based and URL-based policies on the content switching virtual server. With the default \nRULE\n setting, incoming requests are evaluated against the rule-based content switching policies. If none of the rules match, the URL in the request is evaluated against the URL-based content switching policies.\n        \n\n            \npush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nProcess traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push VServer parameter). The service type of the push virtual server should be either \nHTTP\n or \nSSL\n.\n        \n\n            \npushlabel\n\n\nno\n\n\n\n    \n\n    \nExpression for extracting the label from the response received from server. This string can be either an existing rule name or an inline expression. The service type of the virtual server should be either \nHTTP\n or \nSSL\n.\n        \n\n            \npushmulticlients\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nAllow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.\n        \n\n            \npushvserver\n\n\nno\n\n\n\n    \n\n    \nName of the load balancing virtual server, of type \nPUSH\n or \nSSL_PUSH\n, to which the server pushes updates received on the client-facing load balancing virtual server.\nMinimum length = 1\n        \n\n            \nrange\n\n\nno\n\n\n\n    \n\n    \nNumber of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of addresses assigned to this virtual server.\nMinimum value = \n1\nMaximum value = \n254\n        \n\n            \nredirectportrewrite\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nState of port rewrite while performing HTTP redirect.\n        \n\n            \nredirecturl\n\n\nno\n\n\n\n    \n\n    \nURL to which traffic is redirected if the virtual server becomes unavailable. The service type of the virtual server should be either \nHTTP\n or \nSSL\n.\nCaution: Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.\nMinimum length = 1\n        \n\n            \nrhistate\n\n\nno\n\n\n\n    \nPASSIVE\nACTIVE\n\n    \nA host route is injected according to the setting on the virtual servers\n* If set to \nPASSIVE\n on all the virtual servers that share the IP address, the appliance always injects the hostroute.\n* If set to \nACTIVE\n on all the virtual servers that share the IP address, the appliance injects even if one virtual server is UP.\n* If set to \nACTIVE\n on some virtual servers and \nPASSIVE\n on the others, the appliance, injects even if one virtual server set to \nACTIVE\n is UP.\n        \n\n            \nrtspnat\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable network address translation (NAT) for real-time streaming protocol (RTSP) connections.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nSSL\nTCP\nFTP\nRTSP\nSSL_TCP\nUDP\nDNS\nSIP_UDP\nSIP_TCP\nSIP_SSL\nANY\nRADIUS\nRDP\nMYSQL\nMSSQL\nDIAMETER\nSSL_DIAMETER\nDNS_TCP\nORACLE\nSMPP\n\n    \nProtocol used by the virtual server.\n        \n\n            \nsitedomainttl\n\n\nno\n\n\n\n    \n\n    \n.\nMinimum value = \n1\n        \n\n            \nsobackupaction\n\n\nno\n\n\n\n    \nDROP\nACCEPT\nREDIRECT\n\n    \nAction to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.\n        \n\n            \nsomethod\n\n\nno\n\n\n\n    \nCONNECTION\nDYNAMICCONNECTION\nBANDWIDTH\nHEALTH\nNONE\n\n    \nType of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover threshold. Connection spillover is based on the number of connections. Bandwidth spillover is based on the total Kbps of incoming and outgoing traffic.\n        \n\n            \nsopersistence\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nMaintain source-IP based persistence on primary and backup virtual servers.\n        \n\n            \nsopersistencetimeout\n\n\nno\n\n\n\n    \n\n    \nTime-out value, in minutes, for spillover persistence.\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \nsothreshold\n\n\nno\n\n\n\n    \n\n    \nDepending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server can handle before spillover occurs.\nMinimum value = \n1\nMaximum value = \n4294967287\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nstateupdate\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable state updates for a specific content switching virtual server. By default, the Content Switching virtual server is always UP, regardless of the state of the Load Balancing virtual servers bound to it. This parameter interacts with the global setting as follows:\nGlobal Level | Vserver Level | Result\nENABLED ENABLED ENABLED\nENABLED DISABLED ENABLED\nDISABLED ENABLED ENABLED\nDISABLED DISABLED DISABLED\nIf you want to enable state updates for only some content switching virtual servers, be sure to disable the state update parameter.\n        \n\n            \ntargettype\n\n\nno\n\n\n\n    \nGSLB\n\n    \nVirtual server target type.\n        \n\n            \ntcpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the TCP profile containing TCP configuration settings for the virtual server.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ntd\n\n\nno\n\n\n\n    \n\n    \nInteger value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = 0\nMaximum value = 4094\n        \n\n            \nttl\n\n\nno\n\n\n\n    \n\n    \n.\nMinimum value = \n1\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n            \nvipheader\n\n\nno\n\n\n\n    \n\n    \nName of virtual server IP and port header, for use with the VServer IP Port Insertion parameter.\nMinimum length = 1\n        \n\n    \n\n\n\n\n\nExamples\n\n\n# policy_1 must have been already created with the netscaler_cs_policy module\n# lbvserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Setup content switching vserver\n  delegate_to: localhost\n  netscaler_cs_vserver:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    state: present\n\n    name: cs_vserver_1\n    ipv46: 192.168.1.1\n    port: 80\n    servicetype: HTTP\n\n    policybindings:\n      - policyname: policy_1\n        targetlbvserver: lbvserver_1\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n {'clttimeout': 'difference. ours: (float) 100.0 other: (float) 60.0'} \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_cs_vserver"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#netscaler95cs95vserver-manage-content-switching-vserver", 
            "text": "", 
            "title": "netscaler_cs_vserver - Manage content switching vserver"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#synopsis", 
            "text": "Manage content switching vserver  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Enable logging appflow flow information.          \n             authentication  no  \n     yes no \n     Authenticate users who request a connection to the content switching virtual server.          \n             authenticationhost  no  \n     \n     FQDN of the authentication virtual server. The service type of the virtual server should be either  HTTP  or  SSL . Minimum length = 3 Maximum length = 252          \n             authn401  no  \n     yes no \n     Enable HTTP 401-response based authentication.          \n             authnprofile  no  \n     \n     Name of the authentication profile to be used when authentication is turned on.          \n             authnvsname  no  \n     \n     Name of authentication virtual server that authenticates the incoming user requests to this content switching virtual server. . Minimum length = 1 Maximum length = 252          \n             backupip  no  \n     \n     . Minimum length = 1          \n             backupvserver  no  \n     \n     Name of the backup virtual server that you are configuring. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at sign  @ , equal sign  = , and hyphen  -  characters. Can be changed after the backup virtual server is created. You can assign a different backup virtual server or rename the existing virtual server. Minimum length = 1          \n             cacheable  no  \n     yes no \n     Use this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache redirection virtual server before sending it to the configured servers.          \n             casesensitive  no  \n     yes no \n     Consider case in URLs (for policies that use URLs instead of RULES). For example, with the  on  setting, the URLs /a/1.html and /A/1.HTML are treated differently and can have different targets (set by content switching policies). With the  off  setting, /a/1.html and /A/1.HTML are switched to the same target.          \n             clttimeout  no  \n     \n     Idle time, in seconds, after which the client connection is terminated. The default values are: Minimum value =  0 Maximum value =  31536000          \n             comment  no  \n     \n     Information about this virtual server.          \n             cookiedomain  no  \n     \n     . Minimum length = 1          \n             cookietimeout  no  \n     \n     . Minimum value =  0 Maximum value =  1440          \n             dbprofilename  no  \n     \n     Name of the DB profile. Minimum length = 1 Maximum length = 127          \n             disabled  no  no \n     yes no \n     When set to  yes  the cs vserver will be disabled. When set to  no  the cs vserver will be enabled. Note that due to limitations of the underlying NITRO API a  disabled  state change alone does not cause the module result to report a changed status.          \n             disableprimaryondown  no  \n     ENABLED DISABLED \n     Continue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state.          \n             dnsprofilename  no  \n     \n     Name of the DNS profile to be associated with the VServer. DNS profile properties will applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers. Minimum length = 1 Maximum length = 127          \n             domainname  no  \n     \n     Domain name for which to change the time to live (TTL) and/or backup service IP address. Minimum length = 1          \n             downstateflush  no  \n     ENABLED DISABLED \n     Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.          \n             httpprofilename  no  \n     \n     Name of the HTTP profile containing HTTP configuration settings for the virtual server. The service type of the virtual server should be either  HTTP  or  SSL . Minimum length = 1 Maximum length = 127          \n             icmpvsrresponse  no  \n     PASSIVE ACTIVE \n     Can be active or passive.          \n             insertvserveripport  no  \n     OFF VIPADDR V6TOV4MAPPING \n     Insert the virtual server's VIP address and port number in the request header. Available values function as follows: VIPADDR  - Header contains the vserver's IP address and port number without any translation. OFF  - The virtual IP and port header insertion option is disabled. V6TOV4MAPPING  - Header contains the mapped IPv4 address corresponding to the IPv6 address of the vserver and the port number. An IPv6 address can be mapped to a user-specified IPv4 address using the set ns ip6 command.          \n             ipmask  no  \n     \n     IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example,  255.255.240.0  or  0.0.255.255 ). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.          \n             ippattern  no  \n     \n     IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter. For example, if the IP pattern assigned to the virtual server is  198.51.100.0  and the IP mask is  255.255.240.0  (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from 198.51.96.1 to 198.51.111.254. You can also use a pattern such as  0.0.2.2  and a mask such as  0.0.255.255  (a reverse mask). If a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if the virtual servers,  vs1  and  vs2 , have the same IP pattern,  0.0.100.128 , but different IP masks of  0.0.255.255  and  0.0.224.255 , a destination IP address of 198.51.100.128 has the longest match with the IP pattern of  vs1 . If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.          \n             ipv46  no  \n     \n     IP address of the content switching virtual server. Minimum length = 1          \n             l2conn  no  \n     \n     Use L2 Parameters to identify a connection.          \n             listenpolicy  no  \n     \n     String specifying the listen policy for the content switching virtual server. Can be either the name of an existing expression or an in-line expression.          \n             mssqlserverversion  no  \n     70 2000 2000SP1 2005 2008 2008R2 2012 2014 \n     The version of the MSSQL server.          \n             mysqlcharacterset  no  \n     \n     The character set returned by the mysql vserver.          \n             mysqlprotocolversion  no  \n     \n     The protocol version returned by the mysql vserver.          \n             mysqlservercapabilities  no  \n     \n     The server capabilities returned by the mysql vserver.          \n             mysqlserverversion  no  \n     \n     The server version string returned by the mysql vserver. Minimum length = 1 Maximum length = 31          \n             name  no  \n     \n     Name for the content switching virtual server. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space, colon  : , at sign  @ , equal sign  = , and hyphen  -  characters. Cannot be changed after the CS virtual server is created. Minimum length = 1          \n             netprofile  no  \n     \n     The name of the network profile. Minimum length = 1 Maximum length = 127          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             oracleserverversion  no  \n     10G 11G \n     Oracle server version.          \n             port  no  \n     \n     Port number for content switching virtual server. Minimum value = 1 Range  1  -  65535 * in CLI is represented as 65535 in NITRO API          \n             precedence  no  \n     RULE URL \n     Type of precedence to use for both RULE-based and URL-based policies on the content switching virtual server. With the default  RULE  setting, incoming requests are evaluated against the rule-based content switching policies. If none of the rules match, the URL in the request is evaluated against the URL-based content switching policies.          \n             push  no  \n     ENABLED DISABLED \n     Process traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push VServer parameter). The service type of the push virtual server should be either  HTTP  or  SSL .          \n             pushlabel  no  \n     \n     Expression for extracting the label from the response received from server. This string can be either an existing rule name or an inline expression. The service type of the virtual server should be either  HTTP  or  SSL .          \n             pushmulticlients  no  \n     yes no \n     Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.          \n             pushvserver  no  \n     \n     Name of the load balancing virtual server, of type  PUSH  or  SSL_PUSH , to which the server pushes updates received on the client-facing load balancing virtual server. Minimum length = 1          \n             range  no  \n     \n     Number of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of addresses assigned to this virtual server. Minimum value =  1 Maximum value =  254          \n             redirectportrewrite  no  \n     ENABLED DISABLED \n     State of port rewrite while performing HTTP redirect.          \n             redirecturl  no  \n     \n     URL to which traffic is redirected if the virtual server becomes unavailable. The service type of the virtual server should be either  HTTP  or  SSL . Caution: Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server. Minimum length = 1          \n             rhistate  no  \n     PASSIVE ACTIVE \n     A host route is injected according to the setting on the virtual servers * If set to  PASSIVE  on all the virtual servers that share the IP address, the appliance always injects the hostroute. * If set to  ACTIVE  on all the virtual servers that share the IP address, the appliance injects even if one virtual server is UP. * If set to  ACTIVE  on some virtual servers and  PASSIVE  on the others, the appliance, injects even if one virtual server set to  ACTIVE  is UP.          \n             rtspnat  no  \n     yes no \n     Enable network address translation (NAT) for real-time streaming protocol (RTSP) connections.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             servicetype  no  \n     HTTP SSL TCP FTP RTSP SSL_TCP UDP DNS SIP_UDP SIP_TCP SIP_SSL ANY RADIUS RDP MYSQL MSSQL DIAMETER SSL_DIAMETER DNS_TCP ORACLE SMPP \n     Protocol used by the virtual server.          \n             sitedomainttl  no  \n     \n     . Minimum value =  1          \n             sobackupaction  no  \n     DROP ACCEPT REDIRECT \n     Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.          \n             somethod  no  \n     CONNECTION DYNAMICCONNECTION BANDWIDTH HEALTH NONE \n     Type of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover threshold. Connection spillover is based on the number of connections. Bandwidth spillover is based on the total Kbps of incoming and outgoing traffic.          \n             sopersistence  no  \n     ENABLED DISABLED \n     Maintain source-IP based persistence on primary and backup virtual servers.          \n             sopersistencetimeout  no  \n     \n     Time-out value, in minutes, for spillover persistence. Minimum value =  2 Maximum value =  1440          \n             sothreshold  no  \n     \n     Depending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server can handle before spillover occurs. Minimum value =  1 Maximum value =  4294967287          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             stateupdate  no  \n     ENABLED DISABLED \n     Enable state updates for a specific content switching virtual server. By default, the Content Switching virtual server is always UP, regardless of the state of the Load Balancing virtual servers bound to it. This parameter interacts with the global setting as follows: Global Level | Vserver Level | Result ENABLED ENABLED ENABLED ENABLED DISABLED ENABLED DISABLED ENABLED ENABLED DISABLED DISABLED DISABLED If you want to enable state updates for only some content switching virtual servers, be sure to disable the state update parameter.          \n             targettype  no  \n     GSLB \n     Virtual server target type.          \n             tcpprofilename  no  \n     \n     Name of the TCP profile containing TCP configuration settings for the virtual server. Minimum length = 1 Maximum length = 127          \n             td  no  \n     \n     Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. Minimum value = 0 Maximum value = 4094          \n             ttl  no  \n     \n     . Minimum value =  1          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.          \n             vipheader  no  \n     \n     Name of virtual server IP and port header, for use with the VServer IP Port Insertion parameter. Minimum length = 1", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#examples", 
            "text": "# policy_1 must have been already created with the netscaler_cs_policy module\n# lbvserver_1 must have been already created with the netscaler_lb_vserver module\n\n- name: Setup content switching vserver\n  delegate_to: localhost\n  netscaler_cs_vserver:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    state: present\n\n    name: cs_vserver_1\n    ipv46: 192.168.1.1\n    port: 80\n    servicetype: HTTP\n\n    policybindings:\n      - policyname: policy_1\n        targetlbvserver: lbvserver_1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      {'clttimeout': 'difference. ours: (float) 100.0 other: (float) 60.0'}   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-cs-vserver-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/", 
            "text": "netscaler_gslb_service - Manage gslb service entities in Netscaler\n\n\nSynopsis\n\n\n\n\nManage gslb service entities in Netscaler.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging appflow flow information.\n        \n\n            \ncip\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIn the request that is forwarded to the GSLB service, insert a header that stores the client's IP address. Client IP header insertion is used in connection-proxy based site persistence.\n        \n\n            \ncipheader\n\n\nno\n\n\n\n    \n\n    \nName for the HTTP header that stores the client's IP address. Used with the Client IP option. If client IP header insertion is enabled on the service and a name is not specified for the header, the NetScaler appliance uses the name specified by the cipHeader parameter in the set ns param command or, in the GUI, the Client IP Header parameter in the Configure HTTP Parameters dialog box.\nMinimum length = 1\n        \n\n            \nclttimeout\n\n\nno\n\n\n\n    \n\n    \nIdle time, in seconds, after which a client connection is terminated. Applicable if connection proxy based site persistence is used.\nMinimum value = 0\nMaximum value = 31536000\n        \n\n            \ncnameentry\n\n\nno\n\n\n\n    \n\n    \nCanonical name of the GSLB service. Used in CNAME-based GSLB.\nMinimum length = 1\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny comments that you might want to associate with the GSLB service.\n        \n\n            \ndownstateflush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nFlush all active transactions associated with the GSLB service when its state transitions from UP to DOWN. Do not enable this option for services that must complete their transactions. Applicable if connection proxy based site persistence is used.\n        \n\n            \nhashid\n\n\nno\n\n\n\n    \n\n    \nUnique hash identifier for the GSLB service, used by hash based load balancing methods.\nMinimum value = \n1\n        \n\n            \nhealthmonitor\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nMonitor the health of the GSLB service.\n        \n\n            \nipaddress\n\n\nno\n\n\n\n    \n\n    \nIP address for the GSLB service. Should represent a load balancing, content switching, or VPN virtual server on the NetScaler appliance, or the IP address of another load balancing device.\n        \n\n            \nmaxaaausers\n\n\nno\n\n\n\n    \n\n    \nMaximum number of SSL VPN users that can be logged on concurrently to the VPN virtual server that is represented by this GSLB service. A GSLB service whose user count reaches the maximum is not considered when a GSLB decision is made, until the count drops below the maximum.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \nmaxbandwidth\n\n\nno\n\n\n\n    \n\n    \nInteger specifying the maximum bandwidth allowed for the service. A GSLB service whose bandwidth reaches the maximum is not considered when a GSLB decision is made, until its bandwidth consumption drops below the maximum.\n        \n\n            \nmaxclient\n\n\nno\n\n\n\n    \n\n    \nThe maximum number of open connections that the service can support at any given time. A GSLB service whose connection count reaches the maximum is not considered when a GSLB decision is made, until the connection count drops below the maximum.\nMinimum value = \n0\nMaximum value = \n4294967294\n        \n\n            \nmonitor_bindings\n\n\nno\n\n\n\n\n \nBind monitors to this gslb service\n    \n\n\n\n\n\n\n\n\nDictionary object monitor_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nmonitor_name\n\n    \nno\n\n    \n\n            \n\n            \nMonitor name.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the monitor-service binding.\nA larger number specifies a greater weight.\nContributes to the monitoring threshold, which determines the state of the service.\nMinimum value = \n1\nMaximum value = \n100\n        \n\n    \n\n\n\n\n\n    \n\n            \nmonthreshold\n\n\nno\n\n\n\n    \n\n    \nMonitoring threshold value for the GSLB service. If the sum of the weights of the monitors that are bound to this GSLB service and are in the UP state is not equal to or greater than this threshold value, the service is marked as DOWN.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \nport\n\n\nno\n\n\n\n    \n\n    \nPort on which the load balancing entity represented by this GSLB service listens.\nMinimum value = 1\nRange 1 - 65535\n* in CLI is represented as 65535 in NITRO API\n        \n\n            \npublicip\n\n\nno\n\n\n\n    \n\n    \nThe public IP address that a NAT device translates to the GSLB service's private IP address. Optional.\n        \n\n            \npublicport\n\n\nno\n\n\n\n    \n\n    \nThe public port associated with the GSLB service's public IP address. The port is mapped to the service's private port number. Applicable to the local GSLB service. Optional.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservername\n\n\nno\n\n\n\n    \n\n    \nName of the server hosting the GSLB service.\nMinimum length = 1\n        \n\n            \nservicename\n\n\nno\n\n\n\n    \n\n    \nName for the GSLB service. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Can be changed after the GSLB service is created.\nMinimum length = 1\n        \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nNNTP\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nRADIUS\nRDP\nRTSP\nMYSQL\nMSSQL\nORACLE\n\n    \nType of service to create.\n        \n\n            \nsitename\n\n\nno\n\n\n\n    \n\n    \nName of the GSLB site to which the service belongs.\nMinimum length = 1\n        \n\n            \nsitepersistence\n\n\nno\n\n\n\n    \nConnectionProxy\nHTTPRedirect\nNONE\n\n    \nUse cookie-based site persistence. Applicable only to \nHTTP\n and \nSSL\n GSLB services.\n        \n\n            \nsiteprefix\n\n\nno\n\n\n\n    \n\n    \nThe site's prefix string. When the service is bound to a GSLB virtual server, a GSLB site domain is generated internally for each bound service-domain pair by concatenating the site prefix of the service and the name of the domain. If the special string NONE is specified, the site-prefix string is unset. When implementing HTTP redirect site persistence, the NetScaler appliance redirects GSLB requests to GSLB services by using their site domains.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n- name: Setup gslb service 2\n\n\n\n  delegate_to: localhost\n\n\n  register: result\n\n\n  check_mode: \n{{\n \ncheck_mode\n \n}}\n\n\n\n  netscaler_gslb_service:\n\n\n    operation: present\n\n\n\n    servicename: gslb-service-2\n\n\n    cnameentry: example.com\n\n\n    sitename: gslb-site-1\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n string \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dictionary \n\n    \n { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' } \n\n\n\n    \ncontains: \n\n\n\n    \n\n    \n\n    \nname\n\n    \ndescription\n\n    \nreturned\n\n    \ntype\n\n    \nsample\n\n    \n\n\n\n    \n\n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_gslb_service"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#netscaler95gslb95service-manage-gslb-service-entities-in-netscaler", 
            "text": "", 
            "title": "netscaler_gslb_service - Manage gslb service entities in Netscaler"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#synopsis", 
            "text": "Manage gslb service entities in Netscaler.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Enable logging appflow flow information.          \n             cip  no  \n     ENABLED DISABLED \n     In the request that is forwarded to the GSLB service, insert a header that stores the client's IP address. Client IP header insertion is used in connection-proxy based site persistence.          \n             cipheader  no  \n     \n     Name for the HTTP header that stores the client's IP address. Used with the Client IP option. If client IP header insertion is enabled on the service and a name is not specified for the header, the NetScaler appliance uses the name specified by the cipHeader parameter in the set ns param command or, in the GUI, the Client IP Header parameter in the Configure HTTP Parameters dialog box. Minimum length = 1          \n             clttimeout  no  \n     \n     Idle time, in seconds, after which a client connection is terminated. Applicable if connection proxy based site persistence is used. Minimum value = 0 Maximum value = 31536000          \n             cnameentry  no  \n     \n     Canonical name of the GSLB service. Used in CNAME-based GSLB. Minimum length = 1          \n             comment  no  \n     \n     Any comments that you might want to associate with the GSLB service.          \n             downstateflush  no  \n     ENABLED DISABLED \n     Flush all active transactions associated with the GSLB service when its state transitions from UP to DOWN. Do not enable this option for services that must complete their transactions. Applicable if connection proxy based site persistence is used.          \n             hashid  no  \n     \n     Unique hash identifier for the GSLB service, used by hash based load balancing methods. Minimum value =  1          \n             healthmonitor  no  \n     yes no \n     Monitor the health of the GSLB service.          \n             ipaddress  no  \n     \n     IP address for the GSLB service. Should represent a load balancing, content switching, or VPN virtual server on the NetScaler appliance, or the IP address of another load balancing device.          \n             maxaaausers  no  \n     \n     Maximum number of SSL VPN users that can be logged on concurrently to the VPN virtual server that is represented by this GSLB service. A GSLB service whose user count reaches the maximum is not considered when a GSLB decision is made, until the count drops below the maximum. Minimum value =  0 Maximum value =  65535          \n             maxbandwidth  no  \n     \n     Integer specifying the maximum bandwidth allowed for the service. A GSLB service whose bandwidth reaches the maximum is not considered when a GSLB decision is made, until its bandwidth consumption drops below the maximum.          \n             maxclient  no  \n     \n     The maximum number of open connections that the service can support at any given time. A GSLB service whose connection count reaches the maximum is not considered when a GSLB decision is made, until the connection count drops below the maximum. Minimum value =  0 Maximum value =  4294967294          \n             monitor_bindings  no     Bind monitors to this gslb service          Dictionary object monitor_bindings   parameter  required  default  choices  comments  \n                 monitor_name \n     no \n     \n             \n             Monitor name.          \n                 weight \n     no \n     \n             \n             Weight to assign to the monitor-service binding. A larger number specifies a greater weight. Contributes to the monitoring threshold, which determines the state of the service. Minimum value =  1 Maximum value =  100          \n       \n     \n             monthreshold  no  \n     \n     Monitoring threshold value for the GSLB service. If the sum of the weights of the monitors that are bound to this GSLB service and are in the UP state is not equal to or greater than this threshold value, the service is marked as DOWN. Minimum value =  0 Maximum value =  65535          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             port  no  \n     \n     Port on which the load balancing entity represented by this GSLB service listens. Minimum value = 1 Range 1 - 65535 * in CLI is represented as 65535 in NITRO API          \n             publicip  no  \n     \n     The public IP address that a NAT device translates to the GSLB service's private IP address. Optional.          \n             publicport  no  \n     \n     The public port associated with the GSLB service's public IP address. The port is mapped to the service's private port number. Applicable to the local GSLB service. Optional.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             servername  no  \n     \n     Name of the server hosting the GSLB service. Minimum length = 1          \n             servicename  no  \n     \n     Name for the GSLB service. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space, colon  : , at  @ , equals  = , and hyphen  -  characters. Can be changed after the GSLB service is created. Minimum length = 1          \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP NNTP ANY SIP_UDP SIP_TCP SIP_SSL RADIUS RDP RTSP MYSQL MSSQL ORACLE \n     Type of service to create.          \n             sitename  no  \n     \n     Name of the GSLB site to which the service belongs. Minimum length = 1          \n             sitepersistence  no  \n     ConnectionProxy HTTPRedirect NONE \n     Use cookie-based site persistence. Applicable only to  HTTP  and  SSL  GSLB services.          \n             siteprefix  no  \n     \n     The site's prefix string. When the service is bound to a GSLB virtual server, a GSLB site domain is generated internally for each bound service-domain pair by concatenating the site prefix of the service and the name of the domain. If the special string NONE is specified, the site-prefix string is unset. When implementing HTTP redirect site persistence, the NetScaler appliance redirects GSLB requests to GSLB services by using their site domains.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#examples", 
            "text": "- name: Setup gslb service 2    delegate_to: localhost    register: result    check_mode:  {{   check_mode   }}    netscaler_gslb_service:      operation: present      servicename: gslb-service-2      cnameentry: example.com      sitename: gslb-site-1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      string  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dictionary  \n      { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' }   \n     contains:   \n     \n     \n     name \n     description \n     returned \n     type \n     sample \n     \n\n\n      \n\n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-gslb-service-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/", 
            "text": "netscaler_gslb_site - Manage gslb site entities in NetScaler\n\n\nNew in version 2.4.0.\n\n\nSynopsis\n\n\n\n\nManage gslb site entities in Netscaler.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nclip\n\n\nno\n\n\n\n    \n\n    \nCluster IP address. Specify this parameter to connect to the remote cluster site for GSLB auto-sync. Note: The cluster IP address is defined when creating the cluster.\n        \n\n            \nmetricexchange\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nExchange metrics with other sites. Metrics are exchanged by using Metric Exchange Protocol (MEP). The appliances in the GSLB setup exchange health information once every second.\nIf you disable metrics exchange, you can use only static load balancing methods (such as round robin, static proximity, or the hash-based methods), and if you disable metrics exchange when a dynamic load balancing method (such as least connection) is in operation, the appliance falls back to round robin. Also, if you disable metrics exchange, you must use a monitor to determine the state of GSLB services. Otherwise, the service is marked as DOWN.\n        \n\n            \nnaptrreplacementsuffix\n\n\nno\n\n\n\n    \n\n    \nThe naptr replacement suffix configured here will be used to construct the naptr replacement field in NAPTR record.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \nnwmetricexchange\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nExchange, with other GSLB sites, network metrics such as round-trip time (RTT), learned from communications with various local DNS (LDNS) servers used by clients. RTT information is used in the dynamic RTT load balancing method, and is exchanged every 5 seconds.\n        \n\n            \nparentsite\n\n\nno\n\n\n\n    \n\n    \nParent site of the GSLB site, in a parent-child topology.\n        \n\n            \npublicclip\n\n\nno\n\n\n\n    \n\n    \nIP address to be used to globally access the remote cluster when it is deployed behind a NAT. It can be same as the normal cluster IP address.\n        \n\n            \npublicip\n\n\nno\n\n\n\n    \n\n    \nPublic IP address for the local site. Required only if the appliance is deployed in a private address space and the site has a public IP address hosted on an external firewall or a NAT device.\nMinimum length = 1\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nsessionexchange\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nExchange persistent session entries with other GSLB sites every five seconds.\n        \n\n            \nsiteipaddress\n\n\nno\n\n\n\n    \n\n    \nIP address for the GSLB site. The GSLB site uses this IP address to communicate with other GSLB sites. For a local site, use any IP address that is owned by the appliance (for example, a SNIP or MIP address, or the IP address of the ADNS service).\nMinimum length = 1\n        \n\n            \nsitename\n\n\nno\n\n\n\n    \n\n    \nName for the GSLB site. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Cannot be changed after the virtual server is created.\nMinimum length = 1\n        \n\n            \nsitetype\n\n\nno\n\n\n\n    \nREMOTE\nLOCAL\n\n    \nType of site to create. If the type is not specified, the appliance automatically detects and sets the type on the basis of the IP address being assigned to the site. If the specified site IP address is owned by the appliance (for example, a MIP address or SNIP address), the site is a local site. Otherwise, it is a remote site.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntriggermonitor\n\n\nno\n\n\n\n    \nALWAYS\nMEPDOWN\nMEPDOWN_SVCDOWN\n\n    \nSpecify the conditions under which the GSLB service must be monitored by a monitor, if one is bound. Available settings function as follows:\n* \nALWAYS\n - Monitor the GSLB service at all times.\n* \nMEPDOWN\n - Monitor the GSLB service only when the exchange of metrics through the Metrics Exchange Protocol (MEP) is disabled.\nMEPDOWN_SVCDOWN\n - Monitor the service in either of the following situations:\n* The exchange of metrics through MEP is disabled.\n* The exchange of metrics through MEP is enabled but the status of the service, learned through metrics exchange, is DOWN.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n-\n \nname:\n \nSetup\n \ngslb\n \nsite\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_gslb_site:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n    \nsitename:\n \ngslb-site\n-1\n\n    \nsiteipaddress:\n \n192.168\n.\n1.1\n\n    \nsitetype:\n \nLOCAL\n\n    \npublicip:\n \n192.168\n.\n1.1\n\n    \nmetricexchange:\n \nENABLED\n\n    \nnwmetricexchange:\n \nENABLED\n\n    \nsessionexchange:\n \nENABLED\n\n    \ntriggermonitor:\n \nALWAYS\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the following are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n string \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dictionary \n\n    \n { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' } \n\n\n\n    \ncontains: \n\n\n\n    \n\n    \n\n    \nname\n\n    \ndescription\n\n    \nreturned\n\n    \ntype\n\n    \nsample\n\n    \n\n\n\n\n\n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nStatus\n\n\nThis module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please read community, dev_guide/developing_test_pr and dev_guide/developing_modules.", 
            "title": "netscaler_gslb_site"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#netscaler95gslb95site-manage-gslb-site-entities-in-netscaler", 
            "text": "New in version 2.4.0.", 
            "title": "netscaler_gslb_site - Manage gslb site entities in NetScaler"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#synopsis", 
            "text": "Manage gslb site entities in Netscaler.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             clip  no  \n     \n     Cluster IP address. Specify this parameter to connect to the remote cluster site for GSLB auto-sync. Note: The cluster IP address is defined when creating the cluster.          \n             metricexchange  no  \n     ENABLED DISABLED \n     Exchange metrics with other sites. Metrics are exchanged by using Metric Exchange Protocol (MEP). The appliances in the GSLB setup exchange health information once every second. If you disable metrics exchange, you can use only static load balancing methods (such as round robin, static proximity, or the hash-based methods), and if you disable metrics exchange when a dynamic load balancing method (such as least connection) is in operation, the appliance falls back to round robin. Also, if you disable metrics exchange, you must use a monitor to determine the state of GSLB services. Otherwise, the service is marked as DOWN.          \n             naptrreplacementsuffix  no  \n     \n     The naptr replacement suffix configured here will be used to construct the naptr replacement field in NAPTR record. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             nwmetricexchange  no  \n     ENABLED DISABLED \n     Exchange, with other GSLB sites, network metrics such as round-trip time (RTT), learned from communications with various local DNS (LDNS) servers used by clients. RTT information is used in the dynamic RTT load balancing method, and is exchanged every 5 seconds.          \n             parentsite  no  \n     \n     Parent site of the GSLB site, in a parent-child topology.          \n             publicclip  no  \n     \n     IP address to be used to globally access the remote cluster when it is deployed behind a NAT. It can be same as the normal cluster IP address.          \n             publicip  no  \n     \n     Public IP address for the local site. Required only if the appliance is deployed in a private address space and the site has a public IP address hosted on an external firewall or a NAT device. Minimum length = 1          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             sessionexchange  no  \n     ENABLED DISABLED \n     Exchange persistent session entries with other GSLB sites every five seconds.          \n             siteipaddress  no  \n     \n     IP address for the GSLB site. The GSLB site uses this IP address to communicate with other GSLB sites. For a local site, use any IP address that is owned by the appliance (for example, a SNIP or MIP address, or the IP address of the ADNS service). Minimum length = 1          \n             sitename  no  \n     \n     Name for the GSLB site. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at  @ , equals  = , and hyphen  -  characters. Cannot be changed after the virtual server is created. Minimum length = 1          \n             sitetype  no  \n     REMOTE LOCAL \n     Type of site to create. If the type is not specified, the appliance automatically detects and sets the type on the basis of the IP address being assigned to the site. If the specified site IP address is owned by the appliance (for example, a MIP address or SNIP address), the site is a local site. Otherwise, it is a remote site.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             triggermonitor  no  \n     ALWAYS MEPDOWN MEPDOWN_SVCDOWN \n     Specify the conditions under which the GSLB service must be monitored by a monitor, if one is bound. Available settings function as follows: *  ALWAYS  - Monitor the GSLB service at all times. *  MEPDOWN  - Monitor the GSLB service only when the exchange of metrics through the Metrics Exchange Protocol (MEP) is disabled. MEPDOWN_SVCDOWN  - Monitor the service in either of the following situations: * The exchange of metrics through MEP is disabled. * The exchange of metrics through MEP is enabled but the status of the service, learned through metrics exchange, is DOWN.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#examples", 
            "text": "-   name:   Setup   gslb   site \n   delegate_to:   localhost \n   netscaler_gslb_site: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n\n     sitename:   gslb-site -1 \n     siteipaddress:   192.168 . 1.1 \n     sitetype:   LOCAL \n     publicip:   192.168 . 1.1 \n     metricexchange:   ENABLED \n     nwmetricexchange:   ENABLED \n     sessionexchange:   ENABLED \n     triggermonitor:   ALWAYS", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the following are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      string  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dictionary  \n      { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' }   \n     contains:   \n     \n     \n     name \n     description \n     returned \n     type \n     sample \n       \n\n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#status_1", 
            "text": "This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-gslb-site-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please read community, dev_guide/developing_test_pr and dev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/", 
            "text": "netscaler_gslb_vserver - Configure gslb vserver entities in Netscaler.\n\n\nSynopsis\n\n\n\n\nConfigure gslb vserver entities in Netscaler.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging appflow flow information.\n        \n\n            \nbackuplbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nSOURCEIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nSTATICPROXIMITY\nRTT\nCUSTOMLOAD\n\n    \nBackup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny comments that you might want to associate with the GSLB virtual server.\n        \n\n            \nconsidereffectivestate\n\n\nno\n\n\n\n    \nNONE\nSTATE_ONLY\n\n    \nIf the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE.\nThe effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.\n        \n\n            \ndisabled\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nWhen set to \nyes\n the GSLB Vserver state will be set to DISABLED.\nWhen set to \nno\n the GSLB Vserver state will be set to ENABLED.\nNote that due to limitations of the underlying NITRO API a \ndisabled\n state change alone does not cause the module result to report a changed status.\n        \n\n            \ndisableprimaryondown\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nContinue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.\n        \n\n            \ndnsrecordtype\n\n\nno\n\n\n\n    \nA\nAAAA\nCNAME\nNAPTR\n\n    \nDNS record type to associate with the GSLB virtual server's domain name.\nDefault value: A\nPossible values = A, AAAA, CNAME, NAPTR\n        \n\n            \ndomain_bindings\n\n\nno\n\n\n\n\n \nList of bindings for domains for this glsb vserver.\n    \n\n\n\n\n\n\n\n\nDictionary object domain_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \ndomainname\n\n    \nno\n\n    \n\n            \n\n            \nDomain name for which to change the time to live (TTL) and/or backup service IP address.\n        \n\n                \ncookietimeout\n\n    \nno\n\n    \n\n            \n\n            \nTimeout, in minutes, for the GSLB site cookie.\n        \n\n                \nsitedomainttl\n\n    \nno\n\n    \n\n            \n\n            \nTTL, in seconds, for all internally created site domains (created when a site prefix is configured on a GSLB service) that are associated with this virtual server.\nMinimum value = \n1\n        \n\n                \nttl\n\n    \nno\n\n    \n\n            \n\n            \nTime to live (TTL) for the domain.\n        \n\n    \n\n\n\n\n\n    \n\n            \ndynamicweight\n\n\nno\n\n\n\n    \nSERVICECOUNT\nSERVICEWEIGHT\nDISABLED\n\n    \nSpecify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.\n        \n\n            \nlbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nSOURCEIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nSTATICPROXIMITY\nRTT\nCUSTOMLOAD\n\n    \nLoad balancing method for the GSLB virtual server.\nDefault value: LEASTCONNECTION\nPossible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD\n        \n\n            \nmir\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nInclude multiple IP addresses in the DNS responses sent to clients.\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Can be changed after the virtual server is created.\nMinimum length = 1\n        \n\n            \nnetmask\n\n\nno\n\n\n\n    \n\n    \nIPv4 network mask for use in the SOURCEIPHASH load balancing method.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npersistenceid\n\n\nno\n\n\n\n    \n\n    \nThe persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \npersistencetype\n\n\nno\n\n\n\n    \nSOURCEIP\nNONE\n\n    \nUse source IP address based persistence for the virtual server.\nAfter the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.\n        \n\n            \npersistmask\n\n\nno\n\n\n\n    \n\n    \nThe optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence.\nMinimum length = 1\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservice_bindings\n\n\nno\n\n\n\n\n \nList of bindings for gslb services bound to this gslb virtual server.\n    \n\n\n\n\n\n\n\n\nDictionary object service_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nservicename\n\n    \nno\n\n    \n\n            \n\n            \nName of the GSLB service for which to change the weight.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the GSLB service.\n        \n\n    \n\n\n\n\n\n    \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nNNTP\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nRADIUS\nRDP\nRTSP\nMYSQL\nMSSQL\nORACLE\n\n    \nProtocol used by services bound to the virtual server.\n        \n\n            \nsobackupaction\n\n\nno\n\n\n\n    \nDROP\nACCEPT\nREDIRECT\n\n    \nAction to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.\n        \n\n            \nsomethod\n\n\nno\n\n\n\n    \nCONNECTION\nDYNAMICCONNECTION\nBANDWIDTH\nHEALTH\nNONE\n\n    \nType of threshold that, when exceeded, triggers spillover. Available settings function as follows:\n* \nCONNECTION\n - Spillover occurs when the number of client connections exceeds the threshold.\n* \nDYNAMICCONNECTION\n - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services.\n* \nBANDWIDTH\n - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold.\n* \nHEALTH\n - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN.\n* \nNONE\n - Spillover does not occur.\n        \n\n            \nsopersistence\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIf spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.\n        \n\n            \nsopersistencetimeout\n\n\nno\n\n\n\n    \n\n    \nTimeout for spillover persistence, in minutes.\nDefault value: \n2\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \nsothreshold\n\n\nno\n\n\n\n    \n\n    \nThreshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol).\nMinimum value = \n1\nMaximum value = \n4294967287\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntimeout\n\n\nno\n\n\n\n    \n\n    \nIdle time, in minutes, after which a persistence entry is cleared.\nDefault value: \n2\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \ntolerance\n\n\nno\n\n\n\n    \n\n    \nSite selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT.\nMinimum value = \n0\nMaximum value = \n100\n        \n\n            \nv6netmasklen\n\n\nno\n\n\n\n    \n\n    \nNumber of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the \nSOURCEIPHASH\n load balancing method.\nDefault value: \n128\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nv6persistmasklen\n\n\nno\n\n\n\n    \n\n    \nNumber of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions.\nDefault value: \n128\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_gslb_vserver"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#netscaler95gslb95vserver-configure-gslb-vserver-entities-in-netscaler", 
            "text": "", 
            "title": "netscaler_gslb_vserver - Configure gslb vserver entities in Netscaler."
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#synopsis", 
            "text": "Configure gslb vserver entities in Netscaler.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Enable logging appflow flow information.          \n             backuplbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME SOURCEIPHASH LEASTBANDWIDTH LEASTPACKETS STATICPROXIMITY RTT CUSTOMLOAD \n     Backup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.          \n             comment  no  \n     \n     Any comments that you might want to associate with the GSLB virtual server.          \n             considereffectivestate  no  \n     NONE STATE_ONLY \n     If the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE. The effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.          \n             disabled  no  \n     yes no \n     When set to  yes  the GSLB Vserver state will be set to DISABLED. When set to  no  the GSLB Vserver state will be set to ENABLED. Note that due to limitations of the underlying NITRO API a  disabled  state change alone does not cause the module result to report a changed status.          \n             disableprimaryondown  no  \n     ENABLED DISABLED \n     Continue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.          \n             dnsrecordtype  no  \n     A AAAA CNAME NAPTR \n     DNS record type to associate with the GSLB virtual server's domain name. Default value: A Possible values = A, AAAA, CNAME, NAPTR          \n             domain_bindings  no     List of bindings for domains for this glsb vserver.          Dictionary object domain_bindings   parameter  required  default  choices  comments  \n                 domainname \n     no \n     \n             \n             Domain name for which to change the time to live (TTL) and/or backup service IP address.          \n                 cookietimeout \n     no \n     \n             \n             Timeout, in minutes, for the GSLB site cookie.          \n                 sitedomainttl \n     no \n     \n             \n             TTL, in seconds, for all internally created site domains (created when a site prefix is configured on a GSLB service) that are associated with this virtual server. Minimum value =  1          \n                 ttl \n     no \n     \n             \n             Time to live (TTL) for the domain.          \n       \n     \n             dynamicweight  no  \n     SERVICECOUNT SERVICEWEIGHT DISABLED \n     Specify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.          \n             lbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME SOURCEIPHASH LEASTBANDWIDTH LEASTPACKETS STATICPROXIMITY RTT CUSTOMLOAD \n     Load balancing method for the GSLB virtual server. Default value: LEASTCONNECTION Possible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD          \n             mir  no  \n     ENABLED DISABLED \n     Include multiple IP addresses in the DNS responses sent to clients.          \n             name  no  \n     \n     Name for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space, colon  : , at  @ , equals  = , and hyphen  -  characters. Can be changed after the virtual server is created. Minimum length = 1          \n             netmask  no  \n     \n     IPv4 network mask for use in the SOURCEIPHASH load balancing method. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             persistenceid  no  \n     \n     The persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server. Minimum value =  0 Maximum value =  65535          \n             persistencetype  no  \n     SOURCEIP NONE \n     Use source IP address based persistence for the virtual server. After the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.          \n             persistmask  no  \n     \n     The optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence. Minimum length = 1          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             service_bindings  no     List of bindings for gslb services bound to this gslb virtual server.          Dictionary object service_bindings   parameter  required  default  choices  comments  \n                 servicename \n     no \n     \n             \n             Name of the GSLB service for which to change the weight.          \n                 weight \n     no \n     \n             \n             Weight to assign to the GSLB service.          \n       \n     \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP NNTP ANY SIP_UDP SIP_TCP SIP_SSL RADIUS RDP RTSP MYSQL MSSQL ORACLE \n     Protocol used by services bound to the virtual server.          \n             sobackupaction  no  \n     DROP ACCEPT REDIRECT \n     Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.          \n             somethod  no  \n     CONNECTION DYNAMICCONNECTION BANDWIDTH HEALTH NONE \n     Type of threshold that, when exceeded, triggers spillover. Available settings function as follows: *  CONNECTION  - Spillover occurs when the number of client connections exceeds the threshold. *  DYNAMICCONNECTION  - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services. *  BANDWIDTH  - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold. *  HEALTH  - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN. *  NONE  - Spillover does not occur.          \n             sopersistence  no  \n     ENABLED DISABLED \n     If spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.          \n             sopersistencetimeout  no  \n     \n     Timeout for spillover persistence, in minutes. Default value:  2 Minimum value =  2 Maximum value =  1440          \n             sothreshold  no  \n     \n     Threshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol). Minimum value =  1 Maximum value =  4294967287          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             timeout  no  \n     \n     Idle time, in minutes, after which a persistence entry is cleared. Default value:  2 Minimum value =  2 Maximum value =  1440          \n             tolerance  no  \n     \n     Site selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT. Minimum value =  0 Maximum value =  100          \n             v6netmasklen  no  \n     \n     Number of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the  SOURCEIPHASH  load balancing method. Default value:  128 Minimum value =  1 Maximum value =  128          \n             v6persistmasklen  no  \n     \n     Number of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions. Default value:  128 Minimum value =  1 Maximum value =  128          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-gslb-vserver-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/", 
            "text": "netscaler_gslb_vserver - Configure gslb vserver entities in Netscaler\n\n\nSynopsis\n\n\n\n\nConfigure gslb vserver entities in Netscaler.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging appflow flow information.\n        \n\n            \nbackuplbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nSOURCEIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nSTATICPROXIMITY\nRTT\nCUSTOMLOAD\n\n    \nBackup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny comments that you might want to associate with the GSLB virtual server.\n        \n\n            \nconsidereffectivestate\n\n\nno\n\n\n\n    \nNONE\nSTATE_ONLY\n\n    \nIf the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE.\nThe effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.\n        \n\n            \ndisabled\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nWhen set to \nyes\n the GSLB Vserver state will be set to DISABLED.\nWhen set to \nno\n the GSLB Vserver state will be set to ENABLED.\nNote that due to limitations of the underlying NITRO API a \ndisabled\n state change alone does not cause the module result to report a changed status.\n        \n\n            \ndisableprimaryondown\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nContinue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.\n        \n\n            \ndnsrecordtype\n\n\nno\n\n\n\n    \nA\nAAAA\nCNAME\nNAPTR\n\n    \nDNS record type to associate with the GSLB virtual server's domain name.\nDefault value: A\nPossible values = A, AAAA, CNAME, NAPTR\n        \n\n            \ndomain_bindings\n\n\nno\n\n\n\n\n \nList of bindings for domains for this glsb vserver.\n    \n\n\n\n\n\n\n\n\nDictionary object domain_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \ndomainname\n\n    \nno\n\n    \n\n            \n\n            \nDomain name for which to change the time to live (TTL) and/or backup service IP address.\n        \n\n                \ncookietimeout\n\n    \nno\n\n    \n\n            \n\n            \nTimeout, in minutes, for the GSLB site cookie.\n        \n\n                \nsitedomainttl\n\n    \nno\n\n    \n\n            \n\n            \nTTL, in seconds, for all internally created site domains (created when a site prefix is configured on a GSLB service) that are associated with this virtual server.\nMinimum value = \n1\n        \n\n                \nttl\n\n    \nno\n\n    \n\n            \n\n            \nTime to live (TTL) for the domain.\n        \n\n    \n\n\n\n\n\n    \n\n            \ndynamicweight\n\n\nno\n\n\n\n    \nSERVICECOUNT\nSERVICEWEIGHT\nDISABLED\n\n    \nSpecify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.\n        \n\n            \nlbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nSOURCEIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nSTATICPROXIMITY\nRTT\nCUSTOMLOAD\n\n    \nLoad balancing method for the GSLB virtual server.\nDefault value: LEASTCONNECTION\nPossible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD\n        \n\n            \nmir\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nInclude multiple IP addresses in the DNS responses sent to clients.\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Can be changed after the virtual server is created.\nMinimum length = 1\n        \n\n            \nnetmask\n\n\nno\n\n\n\n    \n\n    \nIPv4 network mask for use in the SOURCEIPHASH load balancing method.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npersistenceid\n\n\nno\n\n\n\n    \n\n    \nThe persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \npersistencetype\n\n\nno\n\n\n\n    \nSOURCEIP\nNONE\n\n    \nUse source IP address based persistence for the virtual server.\nAfter the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.\n        \n\n            \npersistmask\n\n\nno\n\n\n\n    \n\n    \nThe optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence.\nMinimum length = 1\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservice_bindings\n\n\nno\n\n\n\n\n \nList of bindings for gslb services bound to this gslb virtual server.\n    \n\n\n\n\n\n\n\n\nDictionary object service_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nservicename\n\n    \nno\n\n    \n\n            \n\n            \nName of the GSLB service for which to change the weight.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the GSLB service.\n        \n\n    \n\n\n\n\n\n    \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nNNTP\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nRADIUS\nRDP\nRTSP\nMYSQL\nMSSQL\nORACLE\n\n    \nProtocol used by services bound to the virtual server.\n        \n\n            \nsobackupaction\n\n\nno\n\n\n\n    \nDROP\nACCEPT\nREDIRECT\n\n    \nAction to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.\n        \n\n            \nsomethod\n\n\nno\n\n\n\n    \nCONNECTION\nDYNAMICCONNECTION\nBANDWIDTH\nHEALTH\nNONE\n\n    \nType of threshold that, when exceeded, triggers spillover. Available settings function as follows:\n* \nCONNECTION\n - Spillover occurs when the number of client connections exceeds the threshold.\n* \nDYNAMICCONNECTION\n - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services.\n* \nBANDWIDTH\n - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold.\n* \nHEALTH\n - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN.\n* \nNONE\n - Spillover does not occur.\n        \n\n            \nsopersistence\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIf spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.\n        \n\n            \nsopersistencetimeout\n\n\nno\n\n\n\n    \n\n    \nTimeout for spillover persistence, in minutes.\nDefault value: \n2\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \nsothreshold\n\n\nno\n\n\n\n    \n\n    \nThreshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol).\nMinimum value = \n1\nMaximum value = \n4294967287\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntimeout\n\n\nno\n\n\n\n    \n\n    \nIdle time, in minutes, after which a persistence entry is cleared.\nDefault value: \n2\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \ntolerance\n\n\nno\n\n\n\n    \n\n    \nSite selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT.\nMinimum value = \n0\nMaximum value = \n100\n        \n\n            \nv6netmasklen\n\n\nno\n\n\n\n    \n\n    \nNumber of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the \nSOURCEIPHASH\n load balancing method.\nDefault value: \n128\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nv6persistmasklen\n\n\nno\n\n\n\n    \n\n    \nNumber of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions.\nDefault value: \n128\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_lb_monitor"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#netscaler95gslb95vserver-configure-gslb-vserver-entities-in-netscaler", 
            "text": "", 
            "title": "netscaler_gslb_vserver - Configure gslb vserver entities in Netscaler"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#synopsis", 
            "text": "Configure gslb vserver entities in Netscaler.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Enable logging appflow flow information.          \n             backuplbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME SOURCEIPHASH LEASTBANDWIDTH LEASTPACKETS STATICPROXIMITY RTT CUSTOMLOAD \n     Backup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.          \n             comment  no  \n     \n     Any comments that you might want to associate with the GSLB virtual server.          \n             considereffectivestate  no  \n     NONE STATE_ONLY \n     If the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE. The effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.          \n             disabled  no  \n     yes no \n     When set to  yes  the GSLB Vserver state will be set to DISABLED. When set to  no  the GSLB Vserver state will be set to ENABLED. Note that due to limitations of the underlying NITRO API a  disabled  state change alone does not cause the module result to report a changed status.          \n             disableprimaryondown  no  \n     ENABLED DISABLED \n     Continue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.          \n             dnsrecordtype  no  \n     A AAAA CNAME NAPTR \n     DNS record type to associate with the GSLB virtual server's domain name. Default value: A Possible values = A, AAAA, CNAME, NAPTR          \n             domain_bindings  no     List of bindings for domains for this glsb vserver.          Dictionary object domain_bindings   parameter  required  default  choices  comments  \n                 domainname \n     no \n     \n             \n             Domain name for which to change the time to live (TTL) and/or backup service IP address.          \n                 cookietimeout \n     no \n     \n             \n             Timeout, in minutes, for the GSLB site cookie.          \n                 sitedomainttl \n     no \n     \n             \n             TTL, in seconds, for all internally created site domains (created when a site prefix is configured on a GSLB service) that are associated with this virtual server. Minimum value =  1          \n                 ttl \n     no \n     \n             \n             Time to live (TTL) for the domain.          \n       \n     \n             dynamicweight  no  \n     SERVICECOUNT SERVICEWEIGHT DISABLED \n     Specify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.          \n             lbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME SOURCEIPHASH LEASTBANDWIDTH LEASTPACKETS STATICPROXIMITY RTT CUSTOMLOAD \n     Load balancing method for the GSLB virtual server. Default value: LEASTCONNECTION Possible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD          \n             mir  no  \n     ENABLED DISABLED \n     Include multiple IP addresses in the DNS responses sent to clients.          \n             name  no  \n     \n     Name for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space, colon  : , at  @ , equals  = , and hyphen  -  characters. Can be changed after the virtual server is created. Minimum length = 1          \n             netmask  no  \n     \n     IPv4 network mask for use in the SOURCEIPHASH load balancing method. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             persistenceid  no  \n     \n     The persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server. Minimum value =  0 Maximum value =  65535          \n             persistencetype  no  \n     SOURCEIP NONE \n     Use source IP address based persistence for the virtual server. After the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.          \n             persistmask  no  \n     \n     The optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence. Minimum length = 1          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             service_bindings  no     List of bindings for gslb services bound to this gslb virtual server.          Dictionary object service_bindings   parameter  required  default  choices  comments  \n                 servicename \n     no \n     \n             \n             Name of the GSLB service for which to change the weight.          \n                 weight \n     no \n     \n             \n             Weight to assign to the GSLB service.          \n       \n     \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP NNTP ANY SIP_UDP SIP_TCP SIP_SSL RADIUS RDP RTSP MYSQL MSSQL ORACLE \n     Protocol used by services bound to the virtual server.          \n             sobackupaction  no  \n     DROP ACCEPT REDIRECT \n     Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.          \n             somethod  no  \n     CONNECTION DYNAMICCONNECTION BANDWIDTH HEALTH NONE \n     Type of threshold that, when exceeded, triggers spillover. Available settings function as follows: *  CONNECTION  - Spillover occurs when the number of client connections exceeds the threshold. *  DYNAMICCONNECTION  - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services. *  BANDWIDTH  - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold. *  HEALTH  - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN. *  NONE  - Spillover does not occur.          \n             sopersistence  no  \n     ENABLED DISABLED \n     If spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.          \n             sopersistencetimeout  no  \n     \n     Timeout for spillover persistence, in minutes. Default value:  2 Minimum value =  2 Maximum value =  1440          \n             sothreshold  no  \n     \n     Threshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol). Minimum value =  1 Maximum value =  4294967287          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             timeout  no  \n     \n     Idle time, in minutes, after which a persistence entry is cleared. Default value:  2 Minimum value =  2 Maximum value =  1440          \n             tolerance  no  \n     \n     Site selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT. Minimum value =  0 Maximum value =  100          \n             v6netmasklen  no  \n     \n     Number of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the  SOURCEIPHASH  load balancing method. Default value:  128 Minimum value =  1 Maximum value =  128          \n             v6persistmasklen  no  \n     \n     Number of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions. Default value:  128 Minimum value =  1 Maximum value =  128          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-lb-monitor-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/", 
            "text": "netscaler_lb_vserver - Manage load balancing vserver configuration\n\n\nSynopsis\n\n\n\n\nManage load balancing vserver configuration\n\n\nThis module is intended to run either on the ansible control node or\n    a bastion (jumpserver) with access to the actual netscaler instance\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nApply AppFlow logging to the virtual server.\n        \n\n            \nauthentication\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable or disable user authentication.\n        \n\n            \nauthenticationhost\n\n\nno\n\n\n\n    \n\n    \nFully qualified domain name (FQDN) of the authentication virtual server to which the user must be redirected for authentication. Make sure that the Authentication parameter is set to ENABLED.\nMinimum length = 3\nMaximum length = 252\n        \n\n            \nauthn401\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable or disable user authentication with HTTP 401 responses.\n        \n\n            \nauthnprofile\n\n\nno\n\n\n\n    \n\n    \nName of the authentication profile to be used when authentication is turned on.\n        \n\n            \nauthnvsname\n\n\nno\n\n\n\n    \n\n    \nName of an authentication virtual server with which to authenticate users.\nMinimum length = 1\nMaximum length = 252\n        \n\n            \nbackuplbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nSOURCEIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nCUSTOMLOAD\n\n    \nBackup load balancing method. Becomes operational if the primary load balancing me\nthod fails or cannot be used.\nValid only if the primary method is based on static proximity.\n        \n\n            \nbackuppersistencetimeout\n\n\nno\n\n\n\n    \n\n    \nTime period for which backup persistence is in effect.\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \nbypassaaaa\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nIf this option is enabled while resolving DNS64 query AAAA queries are not sent to back end dns server.\n        \n\n            \ncacheable\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nRoute cacheable requests to a cache redirection virtual server. The load balancing virtual server can forward requests only to a transparent cache redirection virtual server that has an IP address and port combination of *:80, so such a cache redirection virtual server must be configured on the appliance.\n        \n\n            \nclttimeout\n\n\nno\n\n\n\n    \n\n    \nIdle time, in seconds, after which a client connection is terminated.\nMinimum value = \n0\nMaximum value = \n31536000\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny comments that you might want to associate with the virtual server.\n        \n\n            \nconnfailover\n\n\nno\n\n\n\n    \nDISABLED\nSTATEFUL\nSTATELESS\n\n    \nMode in which the connection failover feature must operate for the virtual server. After a failover, established TCP connections and UDP packet flows are kept active and resumed on the secondary appliance. Clients remain connected to the same servers. Available settings function as follows:\n* \nSTATEFUL\n - The primary appliance shares state information with the secondary appliance, in real time, resulting in some runtime processing overhead.\n* \nSTATELESS\n - State information is not shared, and the new primary appliance tries to re-create the packet flow on the basis of the information contained in the packets it receives.\n* \nDISABLED\n - Connection failover does not occur.\n        \n\n            \ncookiename\n\n\nno\n\n\n\n    \n\n    \nUse this parameter to specify the cookie name for \nCOOKIE\n peristence type. It specifies the name of cookie with a maximum of 32 characters. If not specified, cookie name is internally generated.\n        \n\n            \ndatalength\n\n\nno\n\n\n\n    \n\n    \nLength of the token to be extracted from the data segment of an incoming packet, for use in the token method of load balancing. The length of the token, specified in bytes, must not be greater than 24 KB. Applicable to virtual servers of type TCP.\nMinimum value = \n1\nMaximum value = \n100\n        \n\n            \ndataoffset\n\n\nno\n\n\n\n    \n\n    \nOffset to be considered when extracting a token from the TCP payload. Applicable to virtual servers, of type TCP, using the token method of load balancing. Must be within the first 24 KB of the TCP payload.\nMinimum value = \n0\nMaximum value = \n25400\n        \n\n            \ndbprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the DB profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ndbslb\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable database specific load balancing for MySQL and MSSQL service types.\n        \n\n            \ndisabled\n\n\nno\n\n\nno\n\n    \nyes\nno\n\n    \nWhen set to \nyes\n the lb vserver will be disabled.\nWhen set to \nno\n the lb vserver will be enabled.\nNote that due to limitations of the underlying NITRO API a \ndisabled\n state change alone does not cause the module result to report a changed status.\n        \n\n            \ndisableprimaryondown\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIf the primary virtual server goes down, do not allow it to return to primary status until manually enabled.\n        \n\n            \ndns64\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nThis argument is for enabling/disabling the \ndns64\n on lbvserver.\n        \n\n            \ndnsprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the DNS profile to be associated with the VServer. DNS profile properties will be applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ndownstateflush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nFlush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.\n        \n\n            \nhashlength\n\n\nno\n\n\n\n    \n\n    \nNumber of bytes to consider for the hash value used in the URLHASH and DOMAINHASH load balancing methods.\nMinimum value = \n1\nMaximum value = \n4096\n        \n\n            \nhealththreshold\n\n\nno\n\n\n\n    \n\n    \nThreshold in percent of active services below which vserver state is made down. If this threshold is 0, vserver state will be up even if one bound service is up.\nMinimum value = \n0\nMaximum value = \n100\n        \n\n            \nhttpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the HTTP profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nicmpvsrresponse\n\n\nno\n\n\n\n    \nPASSIVE\nACTIVE\n\n    \nHow the NetScaler appliance responds to ping requests received for an IP address that is common to one or more virtual servers. Available settings function as follows:\n* If set to \nPASSIVE\n on all the virtual servers that share the IP address, the appliance always responds to the ping requests.\n* If set to \nACTIVE\n on all the virtual servers that share the IP address, the appliance responds to the ping requests if at least one of the virtual servers is UP. Otherwise, the appliance does not respond.\n* If set to \nACTIVE\n on some virtual servers and PASSIVE on the others, the appliance responds if at least one virtual server with the ACTIVE setting is UP. Otherwise, the appliance does not respond.\nNote: This parameter is available at the virtual server level. A similar parameter, ICMP Response, is available at the IP address level, for IPv4 addresses of type VIP. To set that parameter, use the add ip command in the CLI or the Create IP dialog box in the GUI.\n        \n\n            \ninsertvserveripport\n\n\nno\n\n\n\n    \nOFF\nVIPADDR\nV6TOV4MAPPING\n\n    \nInsert an HTTP header, whose value is the IP address and port number of the virtual server, before forwarding a request to the server. The format of the header is \nvipHeader\n: \nvirtual server IP address\n_\nport number \n, where vipHeader is the name that you specify for the header. If the virtual server has an IPv6 address, the address in the header is enclosed in brackets ([ and ]) to separate it from the port number. If you have mapped an IPv4 address to a virtual server's IPv6 address, the value of this parameter determines which IP address is inserted in the header, as follows:\n* \nVIPADDR\n - Insert the IP address of the virtual server in the HTTP header regardless of whether the virtual server has an IPv4 address or an IPv6 address. A mapped IPv4 address, if configured, is ignored.\n* \nV6TOV4MAPPING\n - Insert the IPv4 address that is mapped to the virtual server's IPv6 address. If a mapped IPv4 address is not configured, insert the IPv6 address.\n* \nOFF\n - Disable header insertion.\n        \n\n            \nipmask\n\n\nno\n\n\n\n    \n\n    \nIP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, \n255.255.240.0\n or \n0.0.255.255\n). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.\n        \n\n            \nippattern\n\n\nno\n\n\n\n    \n\n    \nIP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.\nFor example, if the IP pattern assigned to the virtual server is \n198.51.100.0\n and the IP mask is \n255.255.240.0\n (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from \n198.51.96.1\n to \n198.51.111.254\n. You can also use a pattern such as \n0.0.2.2\n and a mask such as \n0.0.255.255\n (a reverse mask).\nIf a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if virtual servers \nvs1\n and \nvs2\n have the same IP pattern, \n0.0.100.128\n, but different IP masks of \n0.0.255.255\n and \n0.0.224.255\n, a destination IP address of \n198.51.100.128\n has the longest match with the IP pattern of vs1. If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.\n        \n\n            \nipv46\n\n\nno\n\n\n\n    \n\n    \nIPv4 or IPv6 address to assign to the virtual server.\n        \n\n            \nl2conn\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nUse Layer 2 parameters (channel number, MAC address, and VLAN ID) in addition to the 4-tuple (\nsource IP\n:\nsource port\n::\ndestination IP\n:\ndestination port\n) that is used to identify a connection. Allows multiple TCP and non-TCP connections with the same 4-tuple to co-exist on the NetScaler appliance.\n        \n\n            \nlbmethod\n\n\nno\n\n\n\n    \nROUNDROBIN\nLEASTCONNECTION\nLEASTRESPONSETIME\nURLHASH\nDOMAINHASH\nDESTINATIONIPHASH\nSOURCEIPHASH\nSRCIPDESTIPHASH\nLEASTBANDWIDTH\nLEASTPACKETS\nTOKEN\nSRCIPSRCPORTHASH\nLRTM\nCALLIDHASH\nCUSTOMLOAD\nLEASTREQUEST\nAUDITLOGHASH\nSTATICPROXIMITY\n\n    \nLoad balancing method. The available settings function as follows:\n* \nROUNDROBIN\n - Distribute requests in rotation, regardless of the load. Weights can be assigned to services to enforce weighted round robin distribution.\n* \nLEASTCONNECTION\n (default) - Select the service with the fewest connections.\n* \nLEASTRESPONSETIME\n - Select the service with the lowest average response time.\n* \nLEASTBANDWIDTH\n - Select the service currently handling the least traffic.\n* \nLEASTPACKETS\n - Select the service currently serving the lowest number of packets per second.\n* \nCUSTOMLOAD\n - Base service selection on the SNMP metrics obtained by custom load monitors.\n* \nLRTM\n - Select the service with the lowest response time. Response times are learned through monitoring probes. This method also takes the number of active connections into account.\nAlso available are a number of hashing methods, in which the appliance extracts a predetermined portion of the request, creates a hash of the portion, and then checks whether any previous requests had the same hash value. If it finds a match, it forwards the request to the service that served those previous requests. Following are the hashing methods:\n* \nURLHASH\n - Create a hash of the request URL (or part of the URL).\n* \nDOMAINHASH\n - Create a hash of the domain name in the request (or part of the domain name). The domain name is taken from either the URL or the Host header. If the domain name appears in both locations, the URL is preferred. If the request does not contain a domain name, the load balancing method defaults to \nLEASTCONNECTION\n.\n* \nDESTINATIONIPHASH\n - Create a hash of the destination IP address in the IP header.\n* \nSOURCEIPHASH\n - Create a hash of the source IP address in the IP header.\n* \nTOKEN\n - Extract a token from the request, create a hash of the token, and then select the service to which any previous requests with the same token hash value were sent.\n* \nSRCIPDESTIPHASH\n - Create a hash of the string obtained by concatenating the source IP address and destination IP address in the IP header.\n* \nSRCIPSRCPORTHASH\n - Create a hash of the source IP address and source port in the IP header.\n* \nCALLIDHASH\n - Create a hash of the SIP Call-ID header.\n        \n\n            \nlistenpolicy\n\n\nno\n\n\n\n    \n\n    \nDefault syntax expression identifying traffic accepted by the virtual server. Can be either an expression (for example, \nCLIENT.IP.DST.IN_SUBNET(192.0.2.0/24\n) or the name of a named expression. In the above example, the virtual server accepts all requests whose destination IP address is in the 192.0.2.0/24 subnet.\n        \n\n            \nlistenpriority\n\n\nno\n\n\n\n    \n\n    \nInteger specifying the priority of the listen policy. A higher number specifies a lower priority. If a request matches the listen policies of more than one virtual server the virtual server whose listen policy has the highest priority (the lowest priority number) accepts the request.\nMinimum value = \n0\nMaximum value = \n101\n        \n\n            \nm\n\n\nno\n\n\n\n    \nIP\nMAC\nIPTUNNEL\nTOS\n\n    \nRedirection mode for load balancing. Available settings function as follows:\n* \nIP\n - Before forwarding a request to a server, change the destination IP address to the server's IP address.\n* \nMAC\n - Before forwarding a request to a server, change the destination MAC address to the server's MAC address. The destination IP address is not changed. MAC-based redirection mode is used mostly in firewall load balancing deployments.\n* \nIPTUNNEL\n - Perform IP-in-IP encapsulation for client IP packets. In the outer IP headers, set the destination IP address to the IP address of the server and the source IP address to the subnet IP (SNIP). The client IP packets are not modified. Applicable to both IPv4 and IPv6 packets.\n* \nTOS\n - Encode the virtual server's TOS ID in the TOS field of the IP header.\nYou can use either the \nIPTUNNEL\n or the \nTOS\n option to implement Direct Server Return (DSR).\n        \n\n            \nmacmoderetainvlan\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nThis option is used to retain vlan information of incoming packet when macmode is enabled.\n        \n\n            \nmaxautoscalemembers\n\n\nno\n\n\n\n    \n\n    \nMaximum number of members expected to be present when vserver is used in Autoscale.\nMinimum value = \n0\nMaximum value = \n5000\n        \n\n            \nminautoscalemembers\n\n\nno\n\n\n\n    \n\n    \nMinimum number of members expected to be present when vserver is used in Autoscale.\nMinimum value = \n0\nMaximum value = \n5000\n        \n\n            \nmssqlserverversion\n\n\nno\n\n\n\n    \n70\n2000\n2000SP1\n2005\n2008\n2008R2\n2012\n2014\n\n    \nFor a load balancing virtual server of type \nMSSQL\n, the Microsoft SQL Server version. Set this parameter if you expect some clients to run a version different from the version of the database. This setting provides compatibility between the client-side and server-side connections by ensuring that all communication conforms to the server's version.\n        \n\n            \nmysqlcharacterset\n\n\nno\n\n\n\n    \n\n    \nCharacter set that the virtual server advertises to clients.\n        \n\n            \nmysqlprotocolversion\n\n\nno\n\n\n\n    \n\n    \nMySQL protocol version that the virtual server advertises to clients.\n        \n\n            \nmysqlservercapabilities\n\n\nno\n\n\n\n    \n\n    \nServer capabilities that the virtual server advertises to clients.\n        \n\n            \nmysqlserverversion\n\n\nno\n\n\n\n    \n\n    \nMySQL server version string that the virtual server advertises to clients.\nMinimum length = 1\nMaximum length = 31\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the virtual server. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at sign \n@\n, equal sign \n=\n, and hyphen \n-\n characters. Can be changed after the virtual server is created.\nMinimum length = 1\n        \n\n            \nnetmask\n\n\nno\n\n\n\n    \n\n    \nIPv4 subnet mask to apply to the destination IP address or source IP address when the load balancing method is \nDESTINATIONIPHASH\n or \nSOURCEIPHASH\n.\nMinimum length = 1\n        \n\n            \nnetprofile\n\n\nno\n\n\n\n    \n\n    \nName of the network profile to associate with the virtual server. If you set this parameter, the virtual server uses only the IP addresses in the network profile as source IP addresses when initiating connections with servers.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nnewservicerequest\n\n\nno\n\n\n\n    \n\n    \nNumber of requests, or percentage of the load on existing services, by which to increase the load on a new service at each interval in slow-start mode. A non-zero value indicates that slow-start is applicable. A zero value indicates that the global RR startup parameter is applied. Changing the value to zero will cause services currently in slow start to take the full traffic as determined by the LB method. Subsequently, any new services added will use the global RR factor.\n        \n\n            \nnewservicerequestincrementinterval\n\n\nno\n\n\n\n    \n\n    \nInterval, in seconds, between successive increments in the load on a new service or a service whose state has just changed from DOWN to UP. A value of 0 (zero) specifies manual slow start.\nMinimum value = \n0\nMaximum value = \n3600\n        \n\n            \nnewservicerequestunit\n\n\nno\n\n\n\n    \nPER_SECOND\nPERCENT\n\n    \nUnits in which to increment load at each interval in slow-start mode.\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \noracleserverversion\n\n\nno\n\n\n\n    \n10G\n11G\n\n    \nOracle server version.\n        \n\n            \npersistavpno\n\n\nno\n\n\n\n    \n\n    \nPersist AVP number for Diameter Persistency.\nIn case this AVP is not defined in Base RFC 3588 and it is nested inside a Grouped AVP,\ndefine a sequence of AVP numbers (max 3) in order of parent to child. So say persist AVP number X\nis nested inside AVP Y which is nested in Z, then define the list as Z Y X.\nMinimum value = \n1\n        \n\n            \npersistencebackup\n\n\nno\n\n\n\n    \nSOURCEIP\nNONE\n\n    \nBackup persistence type for the virtual server. Becomes operational if the primary persistence mechanism fails.\n        \n\n            \npersistencetype\n\n\nno\n\n\n\n    \nSOURCEIP\nCOOKIEINSERT\nSSLSESSION\nRULE\nURLPASSIVE\nCUSTOMSERVERID\nDESTIP\nSRCIPDESTIP\nCALLID\nRTSPSID\nDIAMETER\nFIXSESSION\nNONE\n\n    \nType of persistence for the virtual server. Available settings function as follows:\n* \nSOURCEIP\n - Connections from the same client IP address belong to the same persistence session.\n* \nCOOKIEINSERT\n - Connections that have the same HTTP Cookie, inserted by a Set-Cookie directive from a server, belong to the same persistence session.\n* \nSSLSESSION\n - Connections that have the same SSL Session ID belong to the same persistence session.\n* \nCUSTOMSERVERID\n - Connections with the same server ID form part of the same session. For this persistence type, set the Server ID (CustomServerID) parameter for each service and configure the Rule parameter to identify the server ID in a request.\n* \nRULE\n - All connections that match a user defined rule belong to the same persistence session.\n* \nURLPASSIVE\n - Requests that have the same server ID in the URL query belong to the same persistence session. The server ID is the hexadecimal representation of the IP address and port of the service to which the request must be forwarded. This persistence type requires a rule to identify the server ID in the request.\n* \nDESTIP\n - Connections to the same destination IP address belong to the same persistence session.\n* \nSRCIPDESTIP\n - Connections that have the same source IP address and destination IP address belong to the same persistence session.\n* \nCALLID\n - Connections that have the same CALL-ID SIP header belong to the same persistence session.\n* \nRTSPSID\n - Connections that have the same RTSP Session ID belong to the same persistence session.\n* FIXSESSION - Connections that have the same SenderCompID and TargetCompID values belong to the same persistence session.\n        \n\n            \npersistmask\n\n\nno\n\n\n\n    \n\n    \nPersistence mask for IP based persistence types, for IPv4 virtual servers.\nMinimum length = 1\n        \n\n            \nport\n\n\nno\n\n\n\n    \n\n    \nPort number for the virtual server.\nRange \n1\n - \n65535\n* in CLI is represented as \n65535\n in NITRO API\n        \n\n            \nprocesslocal\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nBy turning on this option packets destined to a vserver in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.\n        \n\n            \npush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nProcess traffic with the push virtual server that is bound to this load balancing virtual server.\n        \n\n            \npushlabel\n\n\nno\n\n\n\n    \n\n    \nExpression for extracting a label from the server's response. Can be either an expression or the name of a named expression.\n        \n\n            \npushmulticlients\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nAllow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.\n        \n\n            \npushvserver\n\n\nno\n\n\n\n    \n\n    \nName of the load balancing virtual server, of type PUSH or SSL_PUSH, to which the server pushes updates received on the load balancing virtual server that you are configuring.\nMinimum length = 1\n        \n\n            \nrange\n\n\nno\n\n\n\n    \n\n    \nNumber of IP addresses that the appliance must generate and assign to the virtual server. The virtual server then functions as a network virtual server, accepting traffic on any of the generated IP addresses. The IP addresses are generated automatically, as follows:\n* For a range of n, the last octet of the address specified by the IP Address parameter increments n-1 times.\n* If the last octet exceeds 255, it rolls over to 0 and the third octet increments by 1.\nNote: The Range parameter assigns multiple IP addresses to one virtual server. To generate an array of virtual servers, each of which owns only one IP address, use brackets in the IP Address and Name parameters to specify the range. For example:\nadd lb vserver my_vserver[1-3] HTTP 192.0.2.[1-3] 80.\nMinimum value = \n1\nMaximum value = \n254\n        \n\n            \nrecursionavailable\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nWhen set to YES, this option causes the DNS replies from this vserver to have the RA bit turned on. Typically one would set this option to YES, when the vserver is load balancing a set of DNS servers thatsupport recursive queries.\n        \n\n            \nredirectportrewrite\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nRewrite the port and change the protocol to ensure successful HTTP redirects from services.\n        \n\n            \nredirurl\n\n\nno\n\n\n\n    \n\n    \nURL to which to redirect traffic if the virtual server becomes unavailable.\nWARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.\nMinimum length = 1\n        \n\n            \nresrule\n\n\nno\n\n\n\n    \n\n    \nDefault syntax expression specifying which part of a server's response to use for creating rule based persistence sessions (persistence type RULE). Can be either an expression or the name of a named expression.\nExample:\nHTTP.RES.HEADER(\"setcookie\"\n.VALUE(0).TYPECAST_NVLIST_T('=',';').VALUE(\"server1\")).\n        \n\n            \nrhistate\n\n\nno\n\n\n\n    \nPASSIVE\nACTIVE\n\n    \nRoute Health Injection (RHI) functionality of the NetSaler appliance for advertising the route of the VIP address associated with the virtual server. When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:\n* If you set \nrhistate\n to \nPASSIVE\n on all virtual servers, the NetScaler ADC always advertises the route for the VIP address.\n* If you set \nrhistate\n to \nACTIVE\n on all virtual servers, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.\n* If you set \nrhistate\n to \nACTIVE\n on some and PASSIVE on others, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose \nrhistate\n set to \nACTIVE\n, is in UP state.\n        \n\n            \nrtspnat\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nUse network address translation (NAT) for RTSP data connections.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservicebindings\n\n\nno\n\n\n\n\n \nList of services along with the weights that are load balanced.\nThe following suboptions are available.\n    \n\n\n\n\n\n\n\n\nDictionary object servicebindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nservicename\n\n    \nno\n\n    \n\n            \n\n            \nService to bind to the virtual server.\nMinimum length = 1\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the specified service.\nMinimum value = \n1\nMaximum value = \n100\n        \n\n    \n\n\n\n\n\n    \n\n            \nservicegroupbindings\n\n\nno\n\n\n\n\n \nList of service groups along with the weights that are load balanced.\nThe following suboptions are available.\n    \n\n\n\n\n\n\n\n\nDictionary object servicegroupbindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nservicegroupname\n\n    \nno\n\n    \n\n            \n\n            \nThe service group name bound to the selected load balancing virtual server.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nInteger specifying the weight of the service. A larger number specifies a greater weight. Defines the capacity of the service relative to the other services in the load balancing configuration. Determines the priority given to the service in load balancing decisions.\nMinimum value = \n1\nMaximum value = \n100\n        \n\n    \n\n\n\n\n\n    \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nDTLS\nNNTP\nDNS\nDHCPRA\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nDNS_TCP\nRTSP\nPUSH\nSSL_PUSH\nRADIUS\nRDP\nMYSQL\nMSSQL\nDIAMETER\nSSL_DIAMETER\nTFTP\nORACLE\nSMPP\nSYSLOGTCP\nSYSLOGUDP\nFIX\nSSL_FIX\n\n    \nProtocol used by the service (also called the service type).\n        \n\n            \nsessionless\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nPerform load balancing on a per-packet basis, without establishing sessions. Recommended for load balancing of intrusion detection system (IDS) servers and scenarios involving direct server return (DSR), where session information is unnecessary.\n        \n\n            \nskippersistency\n\n\nno\n\n\n\n    \nBypass\nReLb\nNone\n\n    \nThis argument decides the behavior incase the service which is selected from an existing persistence session has reached threshold.\n        \n\n            \nsobackupaction\n\n\nno\n\n\n\n    \nDROP\nACCEPT\nREDIRECT\n\n    \nAction to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.\n        \n\n            \nsomethod\n\n\nno\n\n\n\n    \nCONNECTION\nDYNAMICCONNECTION\nBANDWIDTH\nHEALTH\nNONE\n\n    \nType of threshold that, when exceeded, triggers spillover. Available settings function as follows:\n* \nCONNECTION\n - Spillover occurs when the number of client connections exceeds the threshold.\n* DYNAMICCONNECTION - Spillover occurs when the number of client connections at the virtual server exceeds the sum of the maximum client (Max Clients) settings for bound services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of bound services.\n* \nBANDWIDTH\n - Spillover occurs when the bandwidth consumed by the virtual server's incoming and outgoing traffic exceeds the threshold.\n* \nHEALTH\n - Spillover occurs when the percentage of weights of the services that are UP drops below the threshold. For example, if services svc1, svc2, and svc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if svc1 and svc3 or svc2 and svc3 transition to DOWN.\n* \nNONE\n - Spillover does not occur.\n        \n\n            \nsopersistence\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIf spillover occurs, maintain source IP address based persistence for both primary and backup virtual servers.\n        \n\n            \nsopersistencetimeout\n\n\nno\n\n\n\n    \n\n    \nTimeout for spillover persistence, in minutes.\nMinimum value = \n2\nMaximum value = \n1440\n        \n\n            \nsothreshold\n\n\nno\n\n\n\n    \n\n    \nThreshold at which spillover occurs. Specify an integer for the \nCONNECTION\n spillover method, a bandwidth value in kilobits per second for the \nBANDWIDTH\n method (do not enter the units), or a percentage for the \nHEALTH\n method (do not enter the percentage symbol).\nMinimum value = \n1\nMaximum value = \n4294967287\n        \n\n            \nssl_certkey\n\n\nno\n\n\n\n    \n\n    \nThe name of the ssl certificate that is bound to this service.\nThe ssl certificate must already exist.\nCreating the certificate can be done with the \nnetscaler_ssl_certkey\n module.\nThis option is only applicable only when \nservicetype\n is \nSSL\n.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntcpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the TCP profile whose settings are to be applied to the virtual server.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ntd\n\n\nno\n\n\n\n    \n\n    \nInteger value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = \n0\nMaximum value = \n4094\n        \n\n            \ntimeout\n\n\nno\n\n\n\n    \n\n    \nTime period for which a persistence session is in effect.\nMinimum value = \n0\nMaximum value = \n1440\n        \n\n            \ntosid\n\n\nno\n\n\n\n    \n\n    \nTOS ID of the virtual server. Applicable only when the load balancing redirection mode is set to TOS.\nMinimum value = \n1\nMaximum value = \n63\n        \n\n            \nv6netmasklen\n\n\nno\n\n\n\n    \n\n    \nNumber of bits to consider in an IPv6 destination or source IP address, for creating the hash that is required by the \nDESTINATIONIPHASH\n and \nSOURCEIPHASH\n load balancing methods.\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nv6persistmasklen\n\n\nno\n\n\n\n    \n\n    \nPersistence mask for IP based persistence types, for IPv6 virtual servers.\nMinimum value = \n1\nMaximum value = \n128\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n            \nvipheader\n\n\nno\n\n\n\n    \n\n    \nName for the inserted header. The default name is vip-header.\nMinimum length = 1\n        \n\n    \n\n\n\n\n\nExamples\n\n\n#\n \nNetscaler\n \nservices\n \nservice-http\n-1\n,\n \nservice-http\n-2\n \nmust\n \nhave\n \nbeen\n \nalready\n \ncreated\n \nwith\n \nthe\n \nnetscaler_service\n \nmodule\n\n\n\n-\n \nname:\n \nCreate\n \na\n \nload\n \nbalancing\n \nvserver\n \nbound\n \nto\n \nservices\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_lb_vserver:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n    \nvalidate_certs:\n \nno\n\n\n    \nstate:\n \npresent\n\n\n    \nname:\n \nlb_vserver_\n1\n\n    \nservicetype:\n \nHTTP\n\n    \ntimeout:\n \n12\n\n    \nipv\n46\n:\n \n6.93\n.\n3.3\n\n    \nport:\n \n80\n\n    \nservicebindings:\n\n        \n-\n \nservicename:\n \nservice-http\n-1\n\n          \nweight:\n \n80\n\n        \n-\n \nservicename:\n \nservice-http\n-2\n\n          \nweight:\n \n20\n\n\n\n#\n \nService\n \ngroup\n \nservice-group\n-1\n \nmust\n \nhave\n \nbeen\n \nalready\n \ncreated\n \nwith\n \nthe\n \nnetscaler_servicegroup\n \nmodule\n\n\n\n-\n \nname:\n \nCreate\n \nload\n \nbalancing\n \nvserver\n \nbound\n \nto\n \nservicegroup\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_lb_vserver:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n    \nvalidate_certs:\n \nno\n\n    \nstate:\n \npresent\n\n\n    \nname:\n \nlb_vserver_\n2\n\n    \nservicetype:\n \nHTTP\n\n    \nipv\n46\n:\n \n6.92\n.\n2.2\n\n    \nport:\n \n80\n\n    \ntimeout:\n \n10\n\n    \nservicegroupbindings:\n\n        \n-\n \nservicegroupname:\n \nservice-group\n-1\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n {'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0'} \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_lb_vserver"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#netscaler95lb95vserver-manage-load-balancing-vserver-configuration", 
            "text": "", 
            "title": "netscaler_lb_vserver - Manage load balancing vserver configuration"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#synopsis", 
            "text": "Manage load balancing vserver configuration  This module is intended to run either on the ansible control node or\n    a bastion (jumpserver) with access to the actual netscaler instance", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Apply AppFlow logging to the virtual server.          \n             authentication  no  \n     yes no \n     Enable or disable user authentication.          \n             authenticationhost  no  \n     \n     Fully qualified domain name (FQDN) of the authentication virtual server to which the user must be redirected for authentication. Make sure that the Authentication parameter is set to ENABLED. Minimum length = 3 Maximum length = 252          \n             authn401  no  \n     yes no \n     Enable or disable user authentication with HTTP 401 responses.          \n             authnprofile  no  \n     \n     Name of the authentication profile to be used when authentication is turned on.          \n             authnvsname  no  \n     \n     Name of an authentication virtual server with which to authenticate users. Minimum length = 1 Maximum length = 252          \n             backuplbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME SOURCEIPHASH LEASTBANDWIDTH LEASTPACKETS CUSTOMLOAD \n     Backup load balancing method. Becomes operational if the primary load balancing me thod fails or cannot be used. Valid only if the primary method is based on static proximity.          \n             backuppersistencetimeout  no  \n     \n     Time period for which backup persistence is in effect. Minimum value =  2 Maximum value =  1440          \n             bypassaaaa  no  \n     yes no \n     If this option is enabled while resolving DNS64 query AAAA queries are not sent to back end dns server.          \n             cacheable  no  \n     yes no \n     Route cacheable requests to a cache redirection virtual server. The load balancing virtual server can forward requests only to a transparent cache redirection virtual server that has an IP address and port combination of *:80, so such a cache redirection virtual server must be configured on the appliance.          \n             clttimeout  no  \n     \n     Idle time, in seconds, after which a client connection is terminated. Minimum value =  0 Maximum value =  31536000          \n             comment  no  \n     \n     Any comments that you might want to associate with the virtual server.          \n             connfailover  no  \n     DISABLED STATEFUL STATELESS \n     Mode in which the connection failover feature must operate for the virtual server. After a failover, established TCP connections and UDP packet flows are kept active and resumed on the secondary appliance. Clients remain connected to the same servers. Available settings function as follows: *  STATEFUL  - The primary appliance shares state information with the secondary appliance, in real time, resulting in some runtime processing overhead. *  STATELESS  - State information is not shared, and the new primary appliance tries to re-create the packet flow on the basis of the information contained in the packets it receives. *  DISABLED  - Connection failover does not occur.          \n             cookiename  no  \n     \n     Use this parameter to specify the cookie name for  COOKIE  peristence type. It specifies the name of cookie with a maximum of 32 characters. If not specified, cookie name is internally generated.          \n             datalength  no  \n     \n     Length of the token to be extracted from the data segment of an incoming packet, for use in the token method of load balancing. The length of the token, specified in bytes, must not be greater than 24 KB. Applicable to virtual servers of type TCP. Minimum value =  1 Maximum value =  100          \n             dataoffset  no  \n     \n     Offset to be considered when extracting a token from the TCP payload. Applicable to virtual servers, of type TCP, using the token method of load balancing. Must be within the first 24 KB of the TCP payload. Minimum value =  0 Maximum value =  25400          \n             dbprofilename  no  \n     \n     Name of the DB profile whose settings are to be applied to the virtual server. Minimum length = 1 Maximum length = 127          \n             dbslb  no  \n     ENABLED DISABLED \n     Enable database specific load balancing for MySQL and MSSQL service types.          \n             disabled  no  no \n     yes no \n     When set to  yes  the lb vserver will be disabled. When set to  no  the lb vserver will be enabled. Note that due to limitations of the underlying NITRO API a  disabled  state change alone does not cause the module result to report a changed status.          \n             disableprimaryondown  no  \n     ENABLED DISABLED \n     If the primary virtual server goes down, do not allow it to return to primary status until manually enabled.          \n             dns64  no  \n     ENABLED DISABLED \n     This argument is for enabling/disabling the  dns64  on lbvserver.          \n             dnsprofilename  no  \n     \n     Name of the DNS profile to be associated with the VServer. DNS profile properties will be applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers. Minimum length = 1 Maximum length = 127          \n             downstateflush  no  \n     ENABLED DISABLED \n     Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.          \n             hashlength  no  \n     \n     Number of bytes to consider for the hash value used in the URLHASH and DOMAINHASH load balancing methods. Minimum value =  1 Maximum value =  4096          \n             healththreshold  no  \n     \n     Threshold in percent of active services below which vserver state is made down. If this threshold is 0, vserver state will be up even if one bound service is up. Minimum value =  0 Maximum value =  100          \n             httpprofilename  no  \n     \n     Name of the HTTP profile whose settings are to be applied to the virtual server. Minimum length = 1 Maximum length = 127          \n             icmpvsrresponse  no  \n     PASSIVE ACTIVE \n     How the NetScaler appliance responds to ping requests received for an IP address that is common to one or more virtual servers. Available settings function as follows: * If set to  PASSIVE  on all the virtual servers that share the IP address, the appliance always responds to the ping requests. * If set to  ACTIVE  on all the virtual servers that share the IP address, the appliance responds to the ping requests if at least one of the virtual servers is UP. Otherwise, the appliance does not respond. * If set to  ACTIVE  on some virtual servers and PASSIVE on the others, the appliance responds if at least one virtual server with the ACTIVE setting is UP. Otherwise, the appliance does not respond. Note: This parameter is available at the virtual server level. A similar parameter, ICMP Response, is available at the IP address level, for IPv4 addresses of type VIP. To set that parameter, use the add ip command in the CLI or the Create IP dialog box in the GUI.          \n             insertvserveripport  no  \n     OFF VIPADDR V6TOV4MAPPING \n     Insert an HTTP header, whose value is the IP address and port number of the virtual server, before forwarding a request to the server. The format of the header is  vipHeader :  virtual server IP address _ port number  , where vipHeader is the name that you specify for the header. If the virtual server has an IPv6 address, the address in the header is enclosed in brackets ([ and ]) to separate it from the port number. If you have mapped an IPv4 address to a virtual server's IPv6 address, the value of this parameter determines which IP address is inserted in the header, as follows: *  VIPADDR  - Insert the IP address of the virtual server in the HTTP header regardless of whether the virtual server has an IPv4 address or an IPv6 address. A mapped IPv4 address, if configured, is ignored. *  V6TOV4MAPPING  - Insert the IPv4 address that is mapped to the virtual server's IPv6 address. If a mapped IPv4 address is not configured, insert the IPv6 address. *  OFF  - Disable header insertion.          \n             ipmask  no  \n     \n     IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example,  255.255.240.0  or  0.0.255.255 ). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.          \n             ippattern  no  \n     \n     IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter. For example, if the IP pattern assigned to the virtual server is  198.51.100.0  and the IP mask is  255.255.240.0  (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from  198.51.96.1  to  198.51.111.254 . You can also use a pattern such as  0.0.2.2  and a mask such as  0.0.255.255  (a reverse mask). If a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if virtual servers  vs1  and  vs2  have the same IP pattern,  0.0.100.128 , but different IP masks of  0.0.255.255  and  0.0.224.255 , a destination IP address of  198.51.100.128  has the longest match with the IP pattern of vs1. If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.          \n             ipv46  no  \n     \n     IPv4 or IPv6 address to assign to the virtual server.          \n             l2conn  no  \n     yes no \n     Use Layer 2 parameters (channel number, MAC address, and VLAN ID) in addition to the 4-tuple ( source IP : source port :: destination IP : destination port ) that is used to identify a connection. Allows multiple TCP and non-TCP connections with the same 4-tuple to co-exist on the NetScaler appliance.          \n             lbmethod  no  \n     ROUNDROBIN LEASTCONNECTION LEASTRESPONSETIME URLHASH DOMAINHASH DESTINATIONIPHASH SOURCEIPHASH SRCIPDESTIPHASH LEASTBANDWIDTH LEASTPACKETS TOKEN SRCIPSRCPORTHASH LRTM CALLIDHASH CUSTOMLOAD LEASTREQUEST AUDITLOGHASH STATICPROXIMITY \n     Load balancing method. The available settings function as follows: *  ROUNDROBIN  - Distribute requests in rotation, regardless of the load. Weights can be assigned to services to enforce weighted round robin distribution. *  LEASTCONNECTION  (default) - Select the service with the fewest connections. *  LEASTRESPONSETIME  - Select the service with the lowest average response time. *  LEASTBANDWIDTH  - Select the service currently handling the least traffic. *  LEASTPACKETS  - Select the service currently serving the lowest number of packets per second. *  CUSTOMLOAD  - Base service selection on the SNMP metrics obtained by custom load monitors. *  LRTM  - Select the service with the lowest response time. Response times are learned through monitoring probes. This method also takes the number of active connections into account. Also available are a number of hashing methods, in which the appliance extracts a predetermined portion of the request, creates a hash of the portion, and then checks whether any previous requests had the same hash value. If it finds a match, it forwards the request to the service that served those previous requests. Following are the hashing methods: *  URLHASH  - Create a hash of the request URL (or part of the URL). *  DOMAINHASH  - Create a hash of the domain name in the request (or part of the domain name). The domain name is taken from either the URL or the Host header. If the domain name appears in both locations, the URL is preferred. If the request does not contain a domain name, the load balancing method defaults to  LEASTCONNECTION . *  DESTINATIONIPHASH  - Create a hash of the destination IP address in the IP header. *  SOURCEIPHASH  - Create a hash of the source IP address in the IP header. *  TOKEN  - Extract a token from the request, create a hash of the token, and then select the service to which any previous requests with the same token hash value were sent. *  SRCIPDESTIPHASH  - Create a hash of the string obtained by concatenating the source IP address and destination IP address in the IP header. *  SRCIPSRCPORTHASH  - Create a hash of the source IP address and source port in the IP header. *  CALLIDHASH  - Create a hash of the SIP Call-ID header.          \n             listenpolicy  no  \n     \n     Default syntax expression identifying traffic accepted by the virtual server. Can be either an expression (for example,  CLIENT.IP.DST.IN_SUBNET(192.0.2.0/24 ) or the name of a named expression. In the above example, the virtual server accepts all requests whose destination IP address is in the 192.0.2.0/24 subnet.          \n             listenpriority  no  \n     \n     Integer specifying the priority of the listen policy. A higher number specifies a lower priority. If a request matches the listen policies of more than one virtual server the virtual server whose listen policy has the highest priority (the lowest priority number) accepts the request. Minimum value =  0 Maximum value =  101          \n             m  no  \n     IP MAC IPTUNNEL TOS \n     Redirection mode for load balancing. Available settings function as follows: *  IP  - Before forwarding a request to a server, change the destination IP address to the server's IP address. *  MAC  - Before forwarding a request to a server, change the destination MAC address to the server's MAC address. The destination IP address is not changed. MAC-based redirection mode is used mostly in firewall load balancing deployments. *  IPTUNNEL  - Perform IP-in-IP encapsulation for client IP packets. In the outer IP headers, set the destination IP address to the IP address of the server and the source IP address to the subnet IP (SNIP). The client IP packets are not modified. Applicable to both IPv4 and IPv6 packets. *  TOS  - Encode the virtual server's TOS ID in the TOS field of the IP header. You can use either the  IPTUNNEL  or the  TOS  option to implement Direct Server Return (DSR).          \n             macmoderetainvlan  no  \n     ENABLED DISABLED \n     This option is used to retain vlan information of incoming packet when macmode is enabled.          \n             maxautoscalemembers  no  \n     \n     Maximum number of members expected to be present when vserver is used in Autoscale. Minimum value =  0 Maximum value =  5000          \n             minautoscalemembers  no  \n     \n     Minimum number of members expected to be present when vserver is used in Autoscale. Minimum value =  0 Maximum value =  5000          \n             mssqlserverversion  no  \n     70 2000 2000SP1 2005 2008 2008R2 2012 2014 \n     For a load balancing virtual server of type  MSSQL , the Microsoft SQL Server version. Set this parameter if you expect some clients to run a version different from the version of the database. This setting provides compatibility between the client-side and server-side connections by ensuring that all communication conforms to the server's version.          \n             mysqlcharacterset  no  \n     \n     Character set that the virtual server advertises to clients.          \n             mysqlprotocolversion  no  \n     \n     MySQL protocol version that the virtual server advertises to clients.          \n             mysqlservercapabilities  no  \n     \n     Server capabilities that the virtual server advertises to clients.          \n             mysqlserverversion  no  \n     \n     MySQL server version string that the virtual server advertises to clients. Minimum length = 1 Maximum length = 31          \n             name  no  \n     \n     Name for the virtual server. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore, hash  # , period  . , space    , colon  : , at sign  @ , equal sign  = , and hyphen  -  characters. Can be changed after the virtual server is created. Minimum length = 1          \n             netmask  no  \n     \n     IPv4 subnet mask to apply to the destination IP address or source IP address when the load balancing method is  DESTINATIONIPHASH  or  SOURCEIPHASH . Minimum length = 1          \n             netprofile  no  \n     \n     Name of the network profile to associate with the virtual server. If you set this parameter, the virtual server uses only the IP addresses in the network profile as source IP addresses when initiating connections with servers. Minimum length = 1 Maximum length = 127          \n             newservicerequest  no  \n     \n     Number of requests, or percentage of the load on existing services, by which to increase the load on a new service at each interval in slow-start mode. A non-zero value indicates that slow-start is applicable. A zero value indicates that the global RR startup parameter is applied. Changing the value to zero will cause services currently in slow start to take the full traffic as determined by the LB method. Subsequently, any new services added will use the global RR factor.          \n             newservicerequestincrementinterval  no  \n     \n     Interval, in seconds, between successive increments in the load on a new service or a service whose state has just changed from DOWN to UP. A value of 0 (zero) specifies manual slow start. Minimum value =  0 Maximum value =  3600          \n             newservicerequestunit  no  \n     PER_SECOND PERCENT \n     Units in which to increment load at each interval in slow-start mode.          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             oracleserverversion  no  \n     10G 11G \n     Oracle server version.          \n             persistavpno  no  \n     \n     Persist AVP number for Diameter Persistency. In case this AVP is not defined in Base RFC 3588 and it is nested inside a Grouped AVP, define a sequence of AVP numbers (max 3) in order of parent to child. So say persist AVP number X is nested inside AVP Y which is nested in Z, then define the list as Z Y X. Minimum value =  1          \n             persistencebackup  no  \n     SOURCEIP NONE \n     Backup persistence type for the virtual server. Becomes operational if the primary persistence mechanism fails.          \n             persistencetype  no  \n     SOURCEIP COOKIEINSERT SSLSESSION RULE URLPASSIVE CUSTOMSERVERID DESTIP SRCIPDESTIP CALLID RTSPSID DIAMETER FIXSESSION NONE \n     Type of persistence for the virtual server. Available settings function as follows: *  SOURCEIP  - Connections from the same client IP address belong to the same persistence session. *  COOKIEINSERT  - Connections that have the same HTTP Cookie, inserted by a Set-Cookie directive from a server, belong to the same persistence session. *  SSLSESSION  - Connections that have the same SSL Session ID belong to the same persistence session. *  CUSTOMSERVERID  - Connections with the same server ID form part of the same session. For this persistence type, set the Server ID (CustomServerID) parameter for each service and configure the Rule parameter to identify the server ID in a request. *  RULE  - All connections that match a user defined rule belong to the same persistence session. *  URLPASSIVE  - Requests that have the same server ID in the URL query belong to the same persistence session. The server ID is the hexadecimal representation of the IP address and port of the service to which the request must be forwarded. This persistence type requires a rule to identify the server ID in the request. *  DESTIP  - Connections to the same destination IP address belong to the same persistence session. *  SRCIPDESTIP  - Connections that have the same source IP address and destination IP address belong to the same persistence session. *  CALLID  - Connections that have the same CALL-ID SIP header belong to the same persistence session. *  RTSPSID  - Connections that have the same RTSP Session ID belong to the same persistence session. * FIXSESSION - Connections that have the same SenderCompID and TargetCompID values belong to the same persistence session.          \n             persistmask  no  \n     \n     Persistence mask for IP based persistence types, for IPv4 virtual servers. Minimum length = 1          \n             port  no  \n     \n     Port number for the virtual server. Range  1  -  65535 * in CLI is represented as  65535  in NITRO API          \n             processlocal  no  \n     ENABLED DISABLED \n     By turning on this option packets destined to a vserver in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.          \n             push  no  \n     ENABLED DISABLED \n     Process traffic with the push virtual server that is bound to this load balancing virtual server.          \n             pushlabel  no  \n     \n     Expression for extracting a label from the server's response. Can be either an expression or the name of a named expression.          \n             pushmulticlients  no  \n     yes no \n     Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.          \n             pushvserver  no  \n     \n     Name of the load balancing virtual server, of type PUSH or SSL_PUSH, to which the server pushes updates received on the load balancing virtual server that you are configuring. Minimum length = 1          \n             range  no  \n     \n     Number of IP addresses that the appliance must generate and assign to the virtual server. The virtual server then functions as a network virtual server, accepting traffic on any of the generated IP addresses. The IP addresses are generated automatically, as follows: * For a range of n, the last octet of the address specified by the IP Address parameter increments n-1 times. * If the last octet exceeds 255, it rolls over to 0 and the third octet increments by 1. Note: The Range parameter assigns multiple IP addresses to one virtual server. To generate an array of virtual servers, each of which owns only one IP address, use brackets in the IP Address and Name parameters to specify the range. For example: add lb vserver my_vserver[1-3] HTTP 192.0.2.[1-3] 80. Minimum value =  1 Maximum value =  254          \n             recursionavailable  no  \n     yes no \n     When set to YES, this option causes the DNS replies from this vserver to have the RA bit turned on. Typically one would set this option to YES, when the vserver is load balancing a set of DNS servers thatsupport recursive queries.          \n             redirectportrewrite  no  \n     ENABLED DISABLED \n     Rewrite the port and change the protocol to ensure successful HTTP redirects from services.          \n             redirurl  no  \n     \n     URL to which to redirect traffic if the virtual server becomes unavailable. WARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server. Minimum length = 1          \n             resrule  no  \n     \n     Default syntax expression specifying which part of a server's response to use for creating rule based persistence sessions (persistence type RULE). Can be either an expression or the name of a named expression. Example: HTTP.RES.HEADER(\"setcookie\" .VALUE(0).TYPECAST_NVLIST_T('=',';').VALUE(\"server1\")).          \n             rhistate  no  \n     PASSIVE ACTIVE \n     Route Health Injection (RHI) functionality of the NetSaler appliance for advertising the route of the VIP address associated with the virtual server. When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address: * If you set  rhistate  to  PASSIVE  on all virtual servers, the NetScaler ADC always advertises the route for the VIP address. * If you set  rhistate  to  ACTIVE  on all virtual servers, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state. * If you set  rhistate  to  ACTIVE  on some and PASSIVE on others, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose  rhistate  set to  ACTIVE , is in UP state.          \n             rtspnat  no  \n     yes no \n     Use network address translation (NAT) for RTSP data connections.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             servicebindings  no     List of services along with the weights that are load balanced. The following suboptions are available.          Dictionary object servicebindings   parameter  required  default  choices  comments  \n                 servicename \n     no \n     \n             \n             Service to bind to the virtual server. Minimum length = 1          \n                 weight \n     no \n     \n             \n             Weight to assign to the specified service. Minimum value =  1 Maximum value =  100          \n       \n     \n             servicegroupbindings  no     List of service groups along with the weights that are load balanced. The following suboptions are available.          Dictionary object servicegroupbindings   parameter  required  default  choices  comments  \n                 servicegroupname \n     no \n     \n             \n             The service group name bound to the selected load balancing virtual server.          \n                 weight \n     no \n     \n             \n             Integer specifying the weight of the service. A larger number specifies a greater weight. Defines the capacity of the service relative to the other services in the load balancing configuration. Determines the priority given to the service in load balancing decisions. Minimum value =  1 Maximum value =  100          \n       \n     \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP DTLS NNTP DNS DHCPRA ANY SIP_UDP SIP_TCP SIP_SSL DNS_TCP RTSP PUSH SSL_PUSH RADIUS RDP MYSQL MSSQL DIAMETER SSL_DIAMETER TFTP ORACLE SMPP SYSLOGTCP SYSLOGUDP FIX SSL_FIX \n     Protocol used by the service (also called the service type).          \n             sessionless  no  \n     ENABLED DISABLED \n     Perform load balancing on a per-packet basis, without establishing sessions. Recommended for load balancing of intrusion detection system (IDS) servers and scenarios involving direct server return (DSR), where session information is unnecessary.          \n             skippersistency  no  \n     Bypass ReLb None \n     This argument decides the behavior incase the service which is selected from an existing persistence session has reached threshold.          \n             sobackupaction  no  \n     DROP ACCEPT REDIRECT \n     Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.          \n             somethod  no  \n     CONNECTION DYNAMICCONNECTION BANDWIDTH HEALTH NONE \n     Type of threshold that, when exceeded, triggers spillover. Available settings function as follows: *  CONNECTION  - Spillover occurs when the number of client connections exceeds the threshold. * DYNAMICCONNECTION - Spillover occurs when the number of client connections at the virtual server exceeds the sum of the maximum client (Max Clients) settings for bound services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of bound services. *  BANDWIDTH  - Spillover occurs when the bandwidth consumed by the virtual server's incoming and outgoing traffic exceeds the threshold. *  HEALTH  - Spillover occurs when the percentage of weights of the services that are UP drops below the threshold. For example, if services svc1, svc2, and svc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if svc1 and svc3 or svc2 and svc3 transition to DOWN. *  NONE  - Spillover does not occur.          \n             sopersistence  no  \n     ENABLED DISABLED \n     If spillover occurs, maintain source IP address based persistence for both primary and backup virtual servers.          \n             sopersistencetimeout  no  \n     \n     Timeout for spillover persistence, in minutes. Minimum value =  2 Maximum value =  1440          \n             sothreshold  no  \n     \n     Threshold at which spillover occurs. Specify an integer for the  CONNECTION  spillover method, a bandwidth value in kilobits per second for the  BANDWIDTH  method (do not enter the units), or a percentage for the  HEALTH  method (do not enter the percentage symbol). Minimum value =  1 Maximum value =  4294967287          \n             ssl_certkey  no  \n     \n     The name of the ssl certificate that is bound to this service. The ssl certificate must already exist. Creating the certificate can be done with the  netscaler_ssl_certkey  module. This option is only applicable only when  servicetype  is  SSL .          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             tcpprofilename  no  \n     \n     Name of the TCP profile whose settings are to be applied to the virtual server. Minimum length = 1 Maximum length = 127          \n             td  no  \n     \n     Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. Minimum value =  0 Maximum value =  4094          \n             timeout  no  \n     \n     Time period for which a persistence session is in effect. Minimum value =  0 Maximum value =  1440          \n             tosid  no  \n     \n     TOS ID of the virtual server. Applicable only when the load balancing redirection mode is set to TOS. Minimum value =  1 Maximum value =  63          \n             v6netmasklen  no  \n     \n     Number of bits to consider in an IPv6 destination or source IP address, for creating the hash that is required by the  DESTINATIONIPHASH  and  SOURCEIPHASH  load balancing methods. Minimum value =  1 Maximum value =  128          \n             v6persistmasklen  no  \n     \n     Persistence mask for IP based persistence types, for IPv6 virtual servers. Minimum value =  1 Maximum value =  128          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.          \n             vipheader  no  \n     \n     Name for the inserted header. The default name is vip-header. Minimum length = 1", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#examples", 
            "text": "#   Netscaler   services   service-http -1 ,   service-http -2   must   have   been   already   created   with   the   netscaler_service   module  -   name:   Create   a   load   balancing   vserver   bound   to   services \n   delegate_to:   localhost \n   netscaler_lb_vserver: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n     validate_certs:   no \n\n     state:   present \n\n     name:   lb_vserver_ 1 \n     servicetype:   HTTP \n     timeout:   12 \n     ipv 46 :   6.93 . 3.3 \n     port:   80 \n     servicebindings: \n         -   servicename:   service-http -1 \n           weight:   80 \n         -   servicename:   service-http -2 \n           weight:   20  #   Service   group   service-group -1   must   have   been   already   created   with   the   netscaler_servicegroup   module  -   name:   Create   load   balancing   vserver   bound   to   servicegroup \n   delegate_to:   localhost \n   netscaler_lb_vserver: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n     validate_certs:   no \n     state:   present \n\n     name:   lb_vserver_ 2 \n     servicetype:   HTTP \n     ipv 46 :   6.92 . 2.2 \n     port:   80 \n     timeout:   10 \n     servicegroupbindings: \n         -   servicegroupname:   service-group -1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      {'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0'}   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-lb-vserver-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/", 
            "text": "netscaler_save_config - Save Netscaler configuration\n\n\nSynopsis\n\n\n\n\nThis module uncoditionally saves the configuration on the target netscaler node.\n\n\nThis module does not support check mode.\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler.\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. \n192.168.1.1:555\n.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n---\n\n\n-\n \nname:\n \nSave\n \nnetscaler\n \nconfiguration\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_save_config:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n\n-\n \nname:\n \nSetup\n \nserver\n \nwithout\n \nsaving\n  \nconfiguration\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnotify:\n \nSave\n \nconfiguration\n\n  \nnetscaler_server:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n    \nsave_config:\n \nno\n\n\n    \nname:\n \nserver\n-1\n\n    \nipaddress:\n \n192.168\n.\n1.1\n\n\n\n#\n \nUnder\n \nplaybook\ns\n \nhandlers\n\n\n\n-\n \nname:\n \nSave\n \nconfiguration\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_save_config:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Action does not exist \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_save_config"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#netscaler95save95config-save-netscaler-configuration", 
            "text": "", 
            "title": "netscaler_save_config - Save Netscaler configuration"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#synopsis", 
            "text": "This module uncoditionally saves the configuration on the target netscaler node.  This module does not support check mode.  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler.          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g.  192.168.1.1:555 .          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#examples", 
            "text": "---  -   name:   Save   netscaler   configuration \n   delegate_to:   localhost \n   netscaler_save_config: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot  -   name:   Setup   server   without   saving    configuration \n   delegate_to:   localhost \n   notify:   Save   configuration \n   netscaler_server: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n\n     save_config:   no \n\n     name:   server -1 \n     ipaddress:   192.168 . 1.1  #   Under   playbook s   handlers  -   name:   Save   configuration \n   delegate_to:   localhost \n   netscaler_save_config: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Action does not exist   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-save-config-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-server-module/", 
            "text": "netscaler_server - Manage server configuration\n\n\nSynopsis\n\n\n\n\nManage server entities configuration.\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny information about the server.\n        \n\n            \ndisabled\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nWhen set to \ntrue\n the server state will be set to DISABLED.\nWhen set to \nfalse\n the server state will be set to ENABLED.\nNote that due to limitations of the underlying NITRO API a \ndisabled\n state change alone does not cause the module result to report a changed status.\n        \n\n            \ndomain\n\n\nno\n\n\n\n    \n\n    \nDomain name of the server. For a domain based configuration, you must create the server first.\nMinimum length = 1\n        \n\n            \ndomainresolveretry\n\n\nno\n\n\n5\n\n    \n\n    \nTime, in seconds, for which the NetScaler appliance must wait, after DNS resolution fails, before sending the next DNS query to resolve the domain name.\nMinimum value = \n5\nMaximum value = \n20939\n        \n\n            \nipaddress\n\n\nno\n\n\n\n    \n\n    \nIPv4 or IPv6 address of the server. If you create an IP address based server, you can specify the name of the server, instead of its IP address, when creating a service. Note: If you do not create a server entry, the server IP address that you enter when you create a service becomes the name of the server.\n        \n\n            \nipv6address\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nSupport IPv6 addressing mode. If you configure a server with the IPv6 addressing mode, you cannot use the server in the IPv4 addressing mode.\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the server.\nMust begin with an ASCII alphabetic or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters.\nCan be changed after the name is created.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \ntd\n\n\nno\n\n\n\n    \n\n    \nInteger value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = \n0\nMaximum value = \n4094\n        \n\n            \ntranslationip\n\n\nno\n\n\n\n    \n\n    \nIP address used to transform the server's DNS-resolved IP address.\n        \n\n            \ntranslationmask\n\n\nno\n\n\n\n    \n\n    \nThe netmask of the translation ip.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n-\n \nname:\n \nSetup\n \nserver\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_server:\n\n      \nnsip:\n \n172.18\n.\n0.2\n\n      \nnitro_user:\n \nnsroot\n\n      \nnitro_pass:\n \nnsroot\n\n\n      \nstate:\n \npresent\n\n\n      \nname:\n \nserver\n-1\n\n      \nipaddress:\n \n192.168\n.\n1.1\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n {'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2'} \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_server"
        }, 
        {
            "location": "/modules/netscaler-server-module/#netscaler95server-manage-server-configuration", 
            "text": "", 
            "title": "netscaler_server - Manage server configuration"
        }, 
        {
            "location": "/modules/netscaler-server-module/#synopsis", 
            "text": "Manage server entities configuration.  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-server-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-server-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             comment  no  \n     \n     Any information about the server.          \n             disabled  no  \n     yes no \n     When set to  true  the server state will be set to DISABLED. When set to  false  the server state will be set to ENABLED. Note that due to limitations of the underlying NITRO API a  disabled  state change alone does not cause the module result to report a changed status.          \n             domain  no  \n     \n     Domain name of the server. For a domain based configuration, you must create the server first. Minimum length = 1          \n             domainresolveretry  no  5 \n     \n     Time, in seconds, for which the NetScaler appliance must wait, after DNS resolution fails, before sending the next DNS query to resolve the domain name. Minimum value =  5 Maximum value =  20939          \n             ipaddress  no  \n     \n     IPv4 or IPv6 address of the server. If you create an IP address based server, you can specify the name of the server, instead of its IP address, when creating a service. Note: If you do not create a server entry, the server IP address that you enter when you create a service becomes the name of the server.          \n             ipv6address  no  \n     yes no \n     Support IPv6 addressing mode. If you configure a server with the IPv6 addressing mode, you cannot use the server in the IPv4 addressing mode.          \n             name  no  \n     \n     Name for the server. Must begin with an ASCII alphabetic or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at  @ , equals  = , and hyphen  -  characters. Can be changed after the name is created. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             td  no  \n     \n     Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. Minimum value =  0 Maximum value =  4094          \n             translationip  no  \n     \n     IP address used to transform the server's DNS-resolved IP address.          \n             translationmask  no  \n     \n     The netmask of the translation ip.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-server-module/#examples", 
            "text": "-   name:   Setup   server \n   delegate_to:   localhost \n   netscaler_server: \n       nsip:   172.18 . 0.2 \n       nitro_user:   nsroot \n       nitro_pass:   nsroot \n\n       state:   present \n\n       name:   server -1 \n       ipaddress:   192.168 . 1.1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-server-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      {'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2'}   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-server-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-server-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-service-module/", 
            "text": "netscaler_service - Manage service configuration in Netscaler\n\n\nSynopsis\n\n\n\n\nManage service configuration in Netscaler.\n\n\nThis module allows the creation, deletion and modification of Netscaler services.\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\n\nThis module supports check mode.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \naccessdown\n\n\nno\n\n\n\n    \n\n    \nUse Layer 2 mode to bridge the packets sent to this service if it is marked as DOWN. If the service is DOWN, and this parameter is disabled, the packets are dropped.\n        \n\n            \nappflowlog\n\n\nno\n\n\nENABLED\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging of AppFlow information.\n        \n\n            \ncacheable\n\n\nno\n\n\n\n    \n\n    \nUse the transparent cache redirection virtual server to forward requests to the cache server.\nNote: Do not specify this parameter if you set the Cache Type parameter.\n        \n\n            \ncachetype\n\n\nno\n\n\n\n    \nTRANSPARENT\nREVERSE\nFORWARD\n\n    \nCache type supported by the cache server.\n        \n\n            \ncip\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nBefore forwarding a request to the service, insert an HTTP header with the client's IPv4 or IPv6 address as its value. Used if the server needs the client's IP address for security, accounting, or other purposes, and setting the Use Source IP parameter is not a viable option.\n        \n\n            \ncipheader\n\n\nno\n\n\n\n    \n\n    \nName for the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If you set the Client IP parameter, and you do not specify a name for the header, the appliance uses the header name specified for the global Client IP Header parameter (the cipHeader parameter in the set ns param CLI command or the Client IP Header parameter in the Configure HTTP Parameters dialog box at System \n Settings \n Change HTTP parameters). If the global Client IP Header parameter is not specified, the appliance inserts a header with the name \"client-ip.\".\nMinimum length = 1\n        \n\n            \ncka\n\n\nno\n\n\n\n    \n\n    \nEnable client keep-alive for the service.\n        \n\n            \ncleartextport\n\n\nno\n\n\n\n    \n\n    \nPort to which clear text data must be sent after the appliance decrypts incoming SSL traffic. Applicable to transparent SSL services.\nMinimum value = 1\n        \n\n            \nclttimeout\n\n\nno\n\n\n\n    \n\n    \nTime, in seconds, after which to terminate an idle client connection.\nMinimum value = 0\nMaximum value = 31536000\n        \n\n            \ncmp\n\n\nno\n\n\n\n    \n\n    \nEnable compression for the service.\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny information about the service.\n        \n\n            \ncustomserverid\n\n\nno\n\n\nNone\n\n    \n\n    \nUnique identifier for the service. Used when the persistency type for the virtual server is set to Custom Server ID.\n        \n\n            \ndnsprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the DNS profile to be associated with the service. DNS profile properties will applied to the transactions processed by a service. This parameter is valid only for ADNS and ADNS-TCP services.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ndownstateflush\n\n\nno\n\n\nENABLED\n\n    \nENABLED\nDISABLED\n\n    \nFlush all active transactions associated with a service whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.\n        \n\n            \ngraceful\n\n\nno\n\n\n\n    \n\n    \nShut down gracefully, not accepting any new connections, and disabling the service when all of its connections are closed.\n        \n\n            \nhashid\n\n\nno\n\n\n\n    \n\n    \nA numerical identifier that can be used by hash based load balancing methods. Must be unique for each service.\nMinimum value = 1\n        \n\n            \nhealthmonitor\n\n\nno\n\n\nTrue\n\n    \n\n    \nMonitor the health of this service\n        \n\n            \nhttpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the HTTP profile that contains HTTP configuration settings for the service.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nip\n\n\nno\n\n\n\n    \n\n    \nIP to assign to the service.\nMinimum length = 1\n        \n\n            \nipaddress\n\n\nno\n\n\n\n    \n\n    \nThe new IP address of the service.\n        \n\n            \nmaxbandwidth\n\n\nno\n\n\n\n    \n\n    \nMaximum bandwidth, in Kbps, allocated to the service.\nMinimum value = 0\nMaximum value = 4294967287\n        \n\n            \nmaxclient\n\n\nno\n\n\n\n    \n\n    \nMaximum number of simultaneous open connections to the service.\nMinimum value = 0\nMaximum value = 4294967294\n        \n\n            \nmaxreq\n\n\nno\n\n\n\n    \n\n    \nMaximum number of requests that can be sent on a persistent connection to the service.\nNote: Connection requests beyond this value are rejected.\nMinimum value = 0\nMaximum value = 65535\n        \n\n            \nmonitor_bindings\n\n\nno\n\n\n\n\n \nA list of load balancing monitors to bind to this service.\nEach monitor entry is a dictionary which may contain the following options.\nNote that if not using the built in monitors they must first be setup.\n    \n\n\n\n\n\n\n\n\nDictionary object monitor_bindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nmonitorname\n\n    \nno\n\n    \n\n            \n\n            \nName of the monitor.\n        \n\n                \ndup_state\n\n    \nno\n\n    \n\n            \nENABLED\nDISABLED\n\n            \nState of the monitor.\nThe state setting for a monitor of a given type affects all monitors of that type.\nFor example, if an HTTP monitor is enabled, all HTTP monitors on the appliance are (or remain) enabled.\nIf an HTTP monitor is disabled, all HTTP monitors on the appliance are disabled.\n        \n\n                \ndup_weight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the binding between the monitor and service.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the binding between the monitor and service.\n        \n\n    \n\n\n\n\n\n    \n\n            \nmonthreshold\n\n\nno\n\n\n\n    \n\n    \nMinimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.\nMinimum value = 0\nMaximum value = 65535\n        \n\n            \nname\n\n\nno\n\n\n\n    \n\n    \nName for the service. Must begin with an ASCII alphabetic or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Cannot be changed after the service has been created.\nMinimum length = 1\n        \n\n            \nnetprofile\n\n\nno\n\n\n\n    \n\n    \nNetwork profile to use for the service.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npathmonitor\n\n\nno\n\n\n\n    \n\n    \nPath monitoring for clustering.\n        \n\n            \npathmonitorindv\n\n\nno\n\n\n\n    \n\n    \nIndividual Path monitoring decisions.\n        \n\n            \nport\n\n\nno\n\n\n\n    \n\n    \nPort number of the service.\nRange 1 - 65535\n* in CLI is represented as 65535 in NITRO API\n        \n\n            \nprocesslocal\n\n\nno\n\n\nDISABLED\n\n    \nENABLED\nDISABLED\n\n    \nBy turning on this option packets destined to a service in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.\n        \n\n            \nrtspsessionidremap\n\n\nno\n\n\n\n    \n\n    \nEnable RTSP session ID mapping for the service.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nsc\n\n\nno\n\n\n\n    \n\n    \nState of SureConnect for the service.\n        \n\n            \nserverid\n\n\nno\n\n\n\n    \n\n    \nThe identifier for the service. This is used when the persistency type is set to Custom Server ID.\n        \n\n            \nservername\n\n\nno\n\n\n\n    \n\n    \nName of the server that hosts the service.\nMinimum length = 1\n        \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nDTLS\nNNTP\nRPCSVR\nDNS\nADNS\nSNMP\nRTSP\nDHCPRA\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nDNS_TCP\nADNS_TCP\nMYSQL\nMSSQL\nORACLE\nRADIUS\nRADIUSListener\nRDP\nDIAMETER\nSSL_DIAMETER\nTFTP\nSMPP\nPPTP\nGRE\nSYSLOGTCP\nSYSLOGUDP\nFIX\nSSL_FIX\n\n    \nProtocol in which data is exchanged with the service.\n        \n\n            \nsp\n\n\nno\n\n\n\n    \n\n    \nEnable surge protection for the service.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nsvrtimeout\n\n\nno\n\n\n\n    \n\n    \nTime, in seconds, after which to terminate an idle server connection.\nMinimum value = 0\nMaximum value = 31536000\n        \n\n            \ntcpb\n\n\nno\n\n\n\n    \n\n    \nEnable TCP buffering for the service.\n        \n\n            \ntcpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the TCP profile that contains TCP configuration settings for the service.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \ntd\n\n\nno\n\n\n\n    \n\n    \nInteger value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.\nMinimum value = 0\nMaximum value = 4094\n        \n\n            \nuseproxyport\n\n\nno\n\n\n\n    \n\n    \nUse the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.\nNote: This parameter is available only when the Use Source IP (USIP) parameter is set to YES.\n        \n\n            \nusip\n\n\nno\n\n\n\n    \n\n    \nUse the client's IP address as the source IP address when initiating a connection to the server. When creating a service, if you do not set this parameter, the service inherits the global Use Source IP setting (available in the enable ns mode and disable ns mode CLI commands, or in the System \n Settings \n Configure modes \n Configure Modes dialog box). However, you can override this setting after you create the service.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n#\n \nMonitor\n \nmonitor\n-1\n \nmust\n \nhave\n \nbeen\n \nalready\n \nsetup\n\n\n\n-\n \nname:\n \nSetup\n \nhttp\n \nservice\n\n  \ngather_facts:\n \nFalse\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_service:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n    \nstate:\n \npresent\n\n\n    \nname:\n \nservice-http\n-1\n\n    \nservicetype:\n \nHTTP\n\n    \nipaddress:\n \n10.78\n.\n0.1\n\n    \nport:\n \n80\n\n\n    \nmonitor_bindings:\n\n      \n-\n \nmonitor\n-1\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n diff \n\n    \n A dictionary with a list of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n { 'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0' } \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_service"
        }, 
        {
            "location": "/modules/netscaler-service-module/#netscaler95service-manage-service-configuration-in-netscaler", 
            "text": "", 
            "title": "netscaler_service - Manage service configuration in Netscaler"
        }, 
        {
            "location": "/modules/netscaler-service-module/#synopsis", 
            "text": "Manage service configuration in Netscaler.  This module allows the creation, deletion and modification of Netscaler services.  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.  This module supports check mode.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-service-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-service-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             accessdown  no  \n     \n     Use Layer 2 mode to bridge the packets sent to this service if it is marked as DOWN. If the service is DOWN, and this parameter is disabled, the packets are dropped.          \n             appflowlog  no  ENABLED \n     ENABLED DISABLED \n     Enable logging of AppFlow information.          \n             cacheable  no  \n     \n     Use the transparent cache redirection virtual server to forward requests to the cache server. Note: Do not specify this parameter if you set the Cache Type parameter.          \n             cachetype  no  \n     TRANSPARENT REVERSE FORWARD \n     Cache type supported by the cache server.          \n             cip  no  \n     ENABLED DISABLED \n     Before forwarding a request to the service, insert an HTTP header with the client's IPv4 or IPv6 address as its value. Used if the server needs the client's IP address for security, accounting, or other purposes, and setting the Use Source IP parameter is not a viable option.          \n             cipheader  no  \n     \n     Name for the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If you set the Client IP parameter, and you do not specify a name for the header, the appliance uses the header name specified for the global Client IP Header parameter (the cipHeader parameter in the set ns param CLI command or the Client IP Header parameter in the Configure HTTP Parameters dialog box at System   Settings   Change HTTP parameters). If the global Client IP Header parameter is not specified, the appliance inserts a header with the name \"client-ip.\". Minimum length = 1          \n             cka  no  \n     \n     Enable client keep-alive for the service.          \n             cleartextport  no  \n     \n     Port to which clear text data must be sent after the appliance decrypts incoming SSL traffic. Applicable to transparent SSL services. Minimum value = 1          \n             clttimeout  no  \n     \n     Time, in seconds, after which to terminate an idle client connection. Minimum value = 0 Maximum value = 31536000          \n             cmp  no  \n     \n     Enable compression for the service.          \n             comment  no  \n     \n     Any information about the service.          \n             customserverid  no  None \n     \n     Unique identifier for the service. Used when the persistency type for the virtual server is set to Custom Server ID.          \n             dnsprofilename  no  \n     \n     Name of the DNS profile to be associated with the service. DNS profile properties will applied to the transactions processed by a service. This parameter is valid only for ADNS and ADNS-TCP services. Minimum length = 1 Maximum length = 127          \n             downstateflush  no  ENABLED \n     ENABLED DISABLED \n     Flush all active transactions associated with a service whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.          \n             graceful  no  \n     \n     Shut down gracefully, not accepting any new connections, and disabling the service when all of its connections are closed.          \n             hashid  no  \n     \n     A numerical identifier that can be used by hash based load balancing methods. Must be unique for each service. Minimum value = 1          \n             healthmonitor  no  True \n     \n     Monitor the health of this service          \n             httpprofilename  no  \n     \n     Name of the HTTP profile that contains HTTP configuration settings for the service. Minimum length = 1 Maximum length = 127          \n             ip  no  \n     \n     IP to assign to the service. Minimum length = 1          \n             ipaddress  no  \n     \n     The new IP address of the service.          \n             maxbandwidth  no  \n     \n     Maximum bandwidth, in Kbps, allocated to the service. Minimum value = 0 Maximum value = 4294967287          \n             maxclient  no  \n     \n     Maximum number of simultaneous open connections to the service. Minimum value = 0 Maximum value = 4294967294          \n             maxreq  no  \n     \n     Maximum number of requests that can be sent on a persistent connection to the service. Note: Connection requests beyond this value are rejected. Minimum value = 0 Maximum value = 65535          \n             monitor_bindings  no     A list of load balancing monitors to bind to this service. Each monitor entry is a dictionary which may contain the following options. Note that if not using the built in monitors they must first be setup.          Dictionary object monitor_bindings   parameter  required  default  choices  comments  \n                 monitorname \n     no \n     \n             \n             Name of the monitor.          \n                 dup_state \n     no \n     \n             ENABLED DISABLED \n             State of the monitor. The state setting for a monitor of a given type affects all monitors of that type. For example, if an HTTP monitor is enabled, all HTTP monitors on the appliance are (or remain) enabled. If an HTTP monitor is disabled, all HTTP monitors on the appliance are disabled.          \n                 dup_weight \n     no \n     \n             \n             Weight to assign to the binding between the monitor and service.          \n                 weight \n     no \n     \n             \n             Weight to assign to the binding between the monitor and service.          \n       \n     \n             monthreshold  no  \n     \n     Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN. Minimum value = 0 Maximum value = 65535          \n             name  no  \n     \n     Name for the service. Must begin with an ASCII alphabetic or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at  @ , equals  = , and hyphen  -  characters. Cannot be changed after the service has been created. Minimum length = 1          \n             netprofile  no  \n     \n     Network profile to use for the service. Minimum length = 1 Maximum length = 127          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             pathmonitor  no  \n     \n     Path monitoring for clustering.          \n             pathmonitorindv  no  \n     \n     Individual Path monitoring decisions.          \n             port  no  \n     \n     Port number of the service. Range 1 - 65535 * in CLI is represented as 65535 in NITRO API          \n             processlocal  no  DISABLED \n     ENABLED DISABLED \n     By turning on this option packets destined to a service in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.          \n             rtspsessionidremap  no  \n     \n     Enable RTSP session ID mapping for the service.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             sc  no  \n     \n     State of SureConnect for the service.          \n             serverid  no  \n     \n     The identifier for the service. This is used when the persistency type is set to Custom Server ID.          \n             servername  no  \n     \n     Name of the server that hosts the service. Minimum length = 1          \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP DTLS NNTP RPCSVR DNS ADNS SNMP RTSP DHCPRA ANY SIP_UDP SIP_TCP SIP_SSL DNS_TCP ADNS_TCP MYSQL MSSQL ORACLE RADIUS RADIUSListener RDP DIAMETER SSL_DIAMETER TFTP SMPP PPTP GRE SYSLOGTCP SYSLOGUDP FIX SSL_FIX \n     Protocol in which data is exchanged with the service.          \n             sp  no  \n     \n     Enable surge protection for the service.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             svrtimeout  no  \n     \n     Time, in seconds, after which to terminate an idle server connection. Minimum value = 0 Maximum value = 31536000          \n             tcpb  no  \n     \n     Enable TCP buffering for the service.          \n             tcpprofilename  no  \n     \n     Name of the TCP profile that contains TCP configuration settings for the service. Minimum length = 1 Maximum length = 127          \n             td  no  \n     \n     Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0. Minimum value = 0 Maximum value = 4094          \n             useproxyport  no  \n     \n     Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection. Note: This parameter is available only when the Use Source IP (USIP) parameter is set to YES.          \n             usip  no  \n     \n     Use the client's IP address as the source IP address when initiating a connection to the server. When creating a service, if you do not set this parameter, the service inherits the global Use Source IP setting (available in the enable ns mode and disable ns mode CLI commands, or in the System   Settings   Configure modes   Configure Modes dialog box). However, you can override this setting after you create the service.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-service-module/#examples", 
            "text": "#   Monitor   monitor -1   must   have   been   already   setup  -   name:   Setup   http   service \n   gather_facts:   False \n   delegate_to:   localhost \n   netscaler_service: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n\n     state:   present \n\n     name:   service-http -1 \n     servicetype:   HTTP \n     ipaddress:   10.78 . 0.1 \n     port:   80 \n\n     monitor_bindings: \n       -   monitor -1", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-service-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      diff  \n      A dictionary with a list of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      { 'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0' }   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-service-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-service-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/", 
            "text": "netscaler_servicegroup - Manage service group configuration in Netscaler\n\n\nSynopsis\n\n\n\n\nManage service group configuration in Netscaler.\n\n\nThis module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \nappflowlog\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nEnable logging of AppFlow information for the specified service group.\n        \n\n            \nautoscale\n\n\nno\n\n\n\n    \nDISABLED\nDNS\nPOLICY\n\n    \nAuto scale option for a servicegroup.\n        \n\n            \ncacheable\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nUse the transparent cache redirection virtual server to forward the request to the cache server.\nNote: Do not set this parameter if you set the Cache Type.\n        \n\n            \ncachetype\n\n\nno\n\n\n\n    \nTRANSPARENT\nREVERSE\nFORWARD\n\n    \nCache type supported by the cache server.\n        \n\n            \ncip\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nInsert the Client IP header in requests forwarded to the service.\n        \n\n            \ncipheader\n\n\nno\n\n\n\n    \n\n    \nName of the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If client IP insertion is enabled, and the client IP header is not specified, the value of Client IP Header parameter or the value set by the set ns config command is used as client's IP header name.\nMinimum length = 1\n        \n\n            \ncka\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable client keep-alive for the service group.\n        \n\n            \nclttimeout\n\n\nno\n\n\n\n    \n\n    \nTime, in seconds, after which to terminate an idle client connection.\nMinimum value = \n0\nMaximum value = \n31536000\n        \n\n            \ncmp\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable compression for the specified service.\n        \n\n            \ncomment\n\n\nno\n\n\n\n    \n\n    \nAny information about the service group.\n        \n\n            \ndownstateflush\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nFlush all active transactions associated with all the services in the service group whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.\n        \n\n            \ngraceful\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nWait for all existing connections to the service to terminate before shutting down the service.\n        \n\n            \nhealthmonitor\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nMonitor the health of this service. Available settings function as follows:\nyes\n - Send probes to check the health of the service.\nno\n - Do not send probes to check the health of the service. With the NO option, the appliance shows the service as UP at all times.\n        \n\n            \nhttpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the HTTP profile that contains HTTP configuration settings for the service group.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nmaxbandwidth\n\n\nno\n\n\n\n    \n\n    \nMaximum bandwidth, in Kbps, allocated for all the services in the service group.\nMinimum value = \n0\nMaximum value = \n4294967287\n        \n\n            \nmaxclient\n\n\nno\n\n\n\n    \n\n    \nMaximum number of simultaneous open connections for the service group.\nMinimum value = \n0\nMaximum value = \n4294967294\n        \n\n            \nmaxreq\n\n\nno\n\n\n\n    \n\n    \nMaximum number of requests that can be sent on a persistent connection to the service group.\nNote: Connection requests beyond this value are rejected.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \nmemberport\n\n\nno\n\n\n\n    \n\n    \nmember port.\n        \n\n            \nmonitorbindings\n\n\nno\n\n\n\n\n \nA list of monitornames to bind to this service\nNote that the monitors must have already been setup possibly using the \nnetscaler_lb_monitor\n module or some other method\n    \n\n\n\n\n\n\n\n\nDictionary object monitorbindings\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nmonitorname\n\n    \nno\n\n    \n\n            \n\n            \nThe monitor name to bind to this servicegroup.\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the binding between the monitor and servicegroup.\n        \n\n    \n\n\n\n\n\n    \n\n            \nmonthreshold\n\n\nno\n\n\n\n    \n\n    \nMinimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.\nMinimum value = \n0\nMaximum value = \n65535\n        \n\n            \nnetprofile\n\n\nno\n\n\n\n    \n\n    \nNetwork profile for the service group.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npathmonitor\n\n\nno\n\n\n\n    \n\n    \nPath monitoring for clustering.\n        \n\n            \npathmonitorindv\n\n\nno\n\n\n\n    \n\n    \nIndividual Path monitoring decisions.\n        \n\n            \nrtspsessionidremap\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable RTSP session ID mapping for the service group.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nservicegroupname\n\n\nno\n\n\n\n    \n\n    \nName of the service group. Must begin with an ASCII alphabetic or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Can be changed after the name is created.\nMinimum length = 1\n        \n\n            \nservicemembers\n\n\nno\n\n\n\n\n \nA list of dictionaries describing each service member of the service group.\n    \n\n\n\n\n\n\n\n\nDictionary object servicemembers\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n                \nhashid\n\n    \nno\n\n    \n\n            \n\n            \nThe hash identifier for the service.\nThis must be unique for each service.\nThis parameter is used by hash based load balancing methods.\nMinimum value = \n1\n        \n\n                \nweight\n\n    \nno\n\n    \n\n            \n\n            \nWeight to assign to the servers in the service group.\nSpecifies the capacity of the servers relative to the other servers in the load balancing configuration.\nThe higher the weight, the higher the percentage of requests sent to the service.\nMinimum value = \n1\nMaximum value = \n100\n        \n\n                \nip\n\n    \nno\n\n    \n\n            \n\n            \nIP address of the service. Must not overlap with an existing server entity defined by name.\n        \n\n                \ncustomserverid\n\n    \nno\n\n    \n\n            \n\n            \nThe identifier for this IP:Port pair.\nUsed when the persistency type is set to Custom Server ID.\n        \n\n                \nservername\n\n    \nno\n\n    \n\n            \n\n            \nName of the server to which to bind the service group.\nThe server must already be configured as a named server.\nMinimum length = 1\n        \n\n                \nserverid\n\n    \nno\n\n    \n\n            \n\n            \nThe identifier for the service.\nThis is used when the persistency type is set to Custom Server ID.\n        \n\n                \nport\n\n    \nno\n\n    \n\n            \n\n            \nServer port number.\nRange \n1\n - \n65535\n* in CLI is represented as 65535 in NITRO API\n        \n\n    \n\n\n\n\n\n    \n\n            \nservicetype\n\n\nno\n\n\n\n    \nHTTP\nFTP\nTCP\nUDP\nSSL\nSSL_BRIDGE\nSSL_TCP\nDTLS\nNNTP\nRPCSVR\nDNS\nADNS\nSNMP\nRTSP\nDHCPRA\nANY\nSIP_UDP\nSIP_TCP\nSIP_SSL\nDNS_TCP\nADNS_TCP\nMYSQL\nMSSQL\nORACLE\nRADIUS\nRADIUSListener\nRDP\nDIAMETER\nSSL_DIAMETER\nTFTP\nSMPP\nPPTP\nGRE\nSYSLOGTCP\nSYSLOGUDP\nFIX\nSSL_FIX\n\n    \nProtocol used to exchange data with the service.\n        \n\n            \nsp\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable surge protection for the service group.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nsvrtimeout\n\n\nno\n\n\n\n    \n\n    \nTime, in seconds, after which to terminate an idle server connection.\nMinimum value = \n0\nMaximum value = \n31536000\n        \n\n            \ntcpb\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nEnable TCP buffering for the service group.\n        \n\n            \ntcpprofilename\n\n\nno\n\n\n\n    \n\n    \nName of the TCP profile that contains TCP configuration settings for the service group.\nMinimum length = 1\nMaximum length = 127\n        \n\n            \nuseproxyport\n\n\nno\n\n\n\n    \nyes\nno\n\n    \nUse the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.\nNote: This parameter is available only when the Use Source IP \nusip\n parameter is set to \nyes\n.\n        \n\n            \nusip\n\n\nno\n\n\n\n    \n\n    \nUse client's IP address as the source IP address when initiating connection to the server. With the NO setting, which is the default, a mapped IP (MIP) address or subnet IP (SNIP) address is used as the source IP address to initiate server side connections.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n#\n \nThe\n \nLB\n \nMonitors\n \nmonitor\n-1\n \nand\n \nmonitor\n-2\n \nmust\n \nalready\n \nexist\n\n\n#\n \nService\n \nmembers\n \ndefined\n \nby\n \nC(ip)\n \nmust\n \nnot\n \nredefine\n \nan\n \nexisting\n \nserver\ns\n \nip\n \naddress.\n\n\n#\n \nService\n \nmembers\n \ndefined\n \nby\n \nC(servername)\n \nmust\n \nalready\n \nexist.\n\n\n\n-\n \nname:\n \nSetup\n \nhttp\n \nservice\n \nwith\n \nip\n \nmembers\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_servicegroup:\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n\n    \nstate:\n \npresent\n\n\n    \nservicegroupname:\n \nservice-group\n-1\n\n    \nservicetype:\n \nHTTP\n\n    \nservicemembers:\n\n      \n-\n \nip:\n \n10.78\n.\n78.78\n\n        \nport:\n \n80\n\n        \nweight:\n \n50\n\n      \n-\n \nip:\n \n10.79\n.\n79.79\n\n        \nport:\n \n80\n\n        \nweight:\n \n40\n\n      \n-\n \nservername:\n \nserver\n-1\n\n        \nport:\n \n80\n\n        \nweight:\n \n10\n\n\n    \nmonitorbindings:\n\n      \n-\n \nmonitorname:\n \nmonitor\n-1\n\n        \nweight:\n \n50\n\n      \n-\n \nmonitorname:\n \nmonitor\n-2\n\n        \nweight:\n \n50\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n str \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dict \n\n    \n {'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0'} \n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_servicegroup"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#netscaler95servicegroup-manage-service-group-configuration-in-netscaler", 
            "text": "", 
            "title": "netscaler_servicegroup - Manage service group configuration in Netscaler"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#synopsis", 
            "text": "Manage service group configuration in Netscaler.  This module is intended to run either on the ansible control node or a bastion (jumpserver) with access to the actual netscaler instance.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             appflowlog  no  \n     ENABLED DISABLED \n     Enable logging of AppFlow information for the specified service group.          \n             autoscale  no  \n     DISABLED DNS POLICY \n     Auto scale option for a servicegroup.          \n             cacheable  no  \n     yes no \n     Use the transparent cache redirection virtual server to forward the request to the cache server. Note: Do not set this parameter if you set the Cache Type.          \n             cachetype  no  \n     TRANSPARENT REVERSE FORWARD \n     Cache type supported by the cache server.          \n             cip  no  \n     ENABLED DISABLED \n     Insert the Client IP header in requests forwarded to the service.          \n             cipheader  no  \n     \n     Name of the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If client IP insertion is enabled, and the client IP header is not specified, the value of Client IP Header parameter or the value set by the set ns config command is used as client's IP header name. Minimum length = 1          \n             cka  no  \n     yes no \n     Enable client keep-alive for the service group.          \n             clttimeout  no  \n     \n     Time, in seconds, after which to terminate an idle client connection. Minimum value =  0 Maximum value =  31536000          \n             cmp  no  \n     yes no \n     Enable compression for the specified service.          \n             comment  no  \n     \n     Any information about the service group.          \n             downstateflush  no  \n     ENABLED DISABLED \n     Flush all active transactions associated with all the services in the service group whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.          \n             graceful  no  \n     yes no \n     Wait for all existing connections to the service to terminate before shutting down the service.          \n             healthmonitor  no  \n     yes no \n     Monitor the health of this service. Available settings function as follows: yes  - Send probes to check the health of the service. no  - Do not send probes to check the health of the service. With the NO option, the appliance shows the service as UP at all times.          \n             httpprofilename  no  \n     \n     Name of the HTTP profile that contains HTTP configuration settings for the service group. Minimum length = 1 Maximum length = 127          \n             maxbandwidth  no  \n     \n     Maximum bandwidth, in Kbps, allocated for all the services in the service group. Minimum value =  0 Maximum value =  4294967287          \n             maxclient  no  \n     \n     Maximum number of simultaneous open connections for the service group. Minimum value =  0 Maximum value =  4294967294          \n             maxreq  no  \n     \n     Maximum number of requests that can be sent on a persistent connection to the service group. Note: Connection requests beyond this value are rejected. Minimum value =  0 Maximum value =  65535          \n             memberport  no  \n     \n     member port.          \n             monitorbindings  no     A list of monitornames to bind to this service Note that the monitors must have already been setup possibly using the  netscaler_lb_monitor  module or some other method          Dictionary object monitorbindings   parameter  required  default  choices  comments  \n                 monitorname \n     no \n     \n             \n             The monitor name to bind to this servicegroup.          \n                 weight \n     no \n     \n             \n             Weight to assign to the binding between the monitor and servicegroup.          \n       \n     \n             monthreshold  no  \n     \n     Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN. Minimum value =  0 Maximum value =  65535          \n             netprofile  no  \n     \n     Network profile for the service group. Minimum length = 1 Maximum length = 127          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             pathmonitor  no  \n     \n     Path monitoring for clustering.          \n             pathmonitorindv  no  \n     \n     Individual Path monitoring decisions.          \n             rtspsessionidremap  no  \n     yes no \n     Enable RTSP session ID mapping for the service group.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             servicegroupname  no  \n     \n     Name of the service group. Must begin with an ASCII alphabetic or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at  @ , equals  = , and hyphen  -  characters. Can be changed after the name is created. Minimum length = 1          \n             servicemembers  no     A list of dictionaries describing each service member of the service group.          Dictionary object servicemembers   parameter  required  default  choices  comments  \n                 hashid \n     no \n     \n             \n             The hash identifier for the service. This must be unique for each service. This parameter is used by hash based load balancing methods. Minimum value =  1          \n                 weight \n     no \n     \n             \n             Weight to assign to the servers in the service group. Specifies the capacity of the servers relative to the other servers in the load balancing configuration. The higher the weight, the higher the percentage of requests sent to the service. Minimum value =  1 Maximum value =  100          \n                 ip \n     no \n     \n             \n             IP address of the service. Must not overlap with an existing server entity defined by name.          \n                 customserverid \n     no \n     \n             \n             The identifier for this IP:Port pair. Used when the persistency type is set to Custom Server ID.          \n                 servername \n     no \n     \n             \n             Name of the server to which to bind the service group. The server must already be configured as a named server. Minimum length = 1          \n                 serverid \n     no \n     \n             \n             The identifier for the service. This is used when the persistency type is set to Custom Server ID.          \n                 port \n     no \n     \n             \n             Server port number. Range  1  -  65535 * in CLI is represented as 65535 in NITRO API          \n       \n     \n             servicetype  no  \n     HTTP FTP TCP UDP SSL SSL_BRIDGE SSL_TCP DTLS NNTP RPCSVR DNS ADNS SNMP RTSP DHCPRA ANY SIP_UDP SIP_TCP SIP_SSL DNS_TCP ADNS_TCP MYSQL MSSQL ORACLE RADIUS RADIUSListener RDP DIAMETER SSL_DIAMETER TFTP SMPP PPTP GRE SYSLOGTCP SYSLOGUDP FIX SSL_FIX \n     Protocol used to exchange data with the service.          \n             sp  no  \n     yes no \n     Enable surge protection for the service group.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             svrtimeout  no  \n     \n     Time, in seconds, after which to terminate an idle server connection. Minimum value =  0 Maximum value =  31536000          \n             tcpb  no  \n     yes no \n     Enable TCP buffering for the service group.          \n             tcpprofilename  no  \n     \n     Name of the TCP profile that contains TCP configuration settings for the service group. Minimum length = 1 Maximum length = 127          \n             useproxyport  no  \n     yes no \n     Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection. Note: This parameter is available only when the Use Source IP  usip  parameter is set to  yes .          \n             usip  no  \n     \n     Use client's IP address as the source IP address when initiating connection to the server. With the NO setting, which is the default, a mapped IP (MIP) address or subnet IP (SNIP) address is used as the source IP address to initiate server side connections.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#examples", 
            "text": "#   The   LB   Monitors   monitor -1   and   monitor -2   must   already   exist  #   Service   members   defined   by   C(ip)   must   not   redefine   an   existing   server s   ip   address.  #   Service   members   defined   by   C(servername)   must   already   exist.  -   name:   Setup   http   service   with   ip   members \n   delegate_to:   localhost \n   netscaler_servicegroup: \n     nsip:   172.18 . 0.2 \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n\n     state:   present \n\n     servicegroupname:   service-group -1 \n     servicetype:   HTTP \n     servicemembers: \n       -   ip:   10.78 . 78.78 \n         port:   80 \n         weight:   50 \n       -   ip:   10.79 . 79.79 \n         port:   80 \n         weight:   40 \n       -   servername:   server -1 \n         port:   80 \n         weight:   10 \n\n     monitorbindings: \n       -   monitorname:   monitor -1 \n         weight:   50 \n       -   monitorname:   monitor -2 \n         weight:   50", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      str  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dict  \n      {'clttimeout': 'difference. ours: (float) 10.0 other: (float) 20.0'}   \n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-servicegroup-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/", 
            "text": "netscaler_ssl_certkey - Manage ssl cerificate keys\n\n\nSynopsis\n\n\n\n\nManage ssl cerificate keys.\n\n\n\n\nRequirements (on host that executes module)\n\n\n\n\nnitro python sdk\n\n\n\n\nOptions\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomments\n\n\n\n            \ncert\n\n\nno\n\n\n\n    \n\n    \nName of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.\nMinimum length = 1\n        \n\n            \ncertkey\n\n\nno\n\n\n\n    \n\n    \nName for the certificate and private-key pair. Must begin with an ASCII alphanumeric or underscore \n_\n character, and must contain only ASCII alphanumeric, underscore \n_\n, hash \n#\n, period \n.\n, space \n \n, colon \n:\n, at \n@\n, equals \n=\n, and hyphen \n-\n characters. Cannot be changed after the certificate-key pair is created.\nThe following requirement applies only to the NetScaler CLI:\nIf the name includes one or more spaces, enclose the name in double or single quotation marks (for example, \"my cert\" or 'my cert').\nMinimum length = 1\n        \n\n            \nexpirymonitor\n\n\nno\n\n\n\n    \nENABLED\nDISABLED\n\n    \nIssue an alert when the certificate is about to expire.\n        \n\n            \ninform\n\n\nno\n\n\n\n    \nDER\nPEM\nPFX\n\n    \nInput format of the certificate and the private-key files. The three formats supported by the appliance are:\nPEM - Privacy Enhanced Mail\nDER - Distinguished Encoding Rule\nPFX - Personal Information Exchange.\n        \n\n            \nkey\n\n\nno\n\n\n\n    \n\n    \nName of and, optionally, path to the private-key file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.\nMinimum length = 1\n        \n\n            \nnitro_pass\n\n\nyes\n\n\n\n    \n\n    \nThe password with which to authenticate to the netscaler node.\n        \n\n            \nnitro_protocol\n\n\nno\n\n\nhttp\n\n    \nhttp\nhttps\n\n    \nWhich protocol to use when accessing the nitro API objects.\n        \n\n            \nnitro_timeout\n\n\nno\n\n\n310\n\n    \n\n    \nTime in seconds until a timeout error is thrown when establishing a new session with Netscaler\n        \n\n            \nnitro_user\n\n\nyes\n\n\n\n    \n\n    \nThe username with which to authenticate to the netscaler node.\n        \n\n            \nnotificationperiod\n\n\nno\n\n\n\n    \n\n    \nTime, in number of days, before certificate expiration, at which to generate an alert that the certificate is about to expire.\nMinimum value = \n10\nMaximum value = \n100\n        \n\n            \nnsip\n\n\nyes\n\n\n\n    \n\n    \nThe ip address of the netscaler appliance where the nitro API calls will be made.\nThe port can be specified with the colon (:). E.g. 192.168.1.1:555.\n        \n\n            \npassplain\n\n\nno\n\n\n\n    \n\n    \nPass phrase used to encrypt the private-key. Required when adding an encrypted private-key in PEM format.\nMinimum length = 1\n        \n\n            \npassword\n\n\nno\n\n\n\n    \n\n    \nPassphrase that was used to encrypt the private-key. Use this option to load encrypted private-keys in PEM format.\n        \n\n            \nsave_config\n\n\nno\n\n\nTrue\n\n    \nyes\nno\n\n    \nIf true the module will save the configuration on the netscaler node if it makes any changes.\nThe module will not save the configuration on the netscaler node if it made no changes.\n        \n\n            \nstate\n\n\nno\n\n\npresent\n\n    \npresent\nabsent\n\n    \nThe state of the resource being configured by the module on the netscaler node.\nWhen present the resource will be created if needed and configured according to the module's parameters.\nWhen absent the resource will be deleted from the netscaler node.\n        \n\n            \nvalidate_certs\n\n\nno\n\n\nyes\n\n    \n\n    \nIf \nno\n, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        \n\n    \n\n\n\n\n\nExamples\n\n\n-\n \nname:\n \nSetup\n \nssl\n \ncertkey\n\n  \ndelegate_to:\n \nlocalhost\n\n  \nnetscaler_ssl_certkey:\n\n    \nnitro_user:\n \nnsroot\n\n    \nnitro_pass:\n \nnsroot\n\n    \nnsip:\n \n172.18\n.\n0.2\n\n\n    \ncertkey:\n \ncertirificate_\n1\n\n    \ncert:\n \nserver.crt\n\n    \nkey:\n \nserver.key\n\n    \nexpirymonitor:\n \nENABLED\n\n    \nnotificationperiod:\n \n30\n\n    \ninform:\n \nPEM\n\n    \npassword:\n \nFalse\n\n    \npassplain:\n \nsomesecret\n\n\n\n\n\n\nReturn Values\n\n\nCommon return values are documented here common_return_values, the\nfollowing are the fields unique to this module:\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nreturned\n\n\ntype\n\n\nsample\n\n\n\n\n    \n\n    \n msg \n\n    \n Message detailing the failure reason \n\n    \n failure \n\n    \n string \n\n    \n Action does not exist \n\n\n\n        \n\n    \n diff \n\n    \n List of differences between the actual configured object and the configuration specified in the module \n\n    \n failure \n\n    \n dictionary \n\n    \n { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' } \n\n\n\n    \ncontains: \n\n\n\n    \n\n    \n\n    \nname\n\n    \ndescription\n\n    \nreturned\n\n    \ntype\n\n    \nsample\n\n    \n\n\n\n    \n\n\n\n\n        \n\n    \n loglines \n\n    \n list of logged messages by the module \n\n    \n always \n\n    \n list \n\n    \n ['message 1', 'message 2'] \n\n\n\n\n\n\n\n\n\n\nStatus\n\n\nThis module is flagged as \npreview\n which means that it is not\nguaranteed to have a backwards compatible interface.\n\n\nSupport\n\n\nThis module is community maintained without core committer oversight.\n\n\nFor more information on what this means please read modules_support\n\n\nFor help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "netscaler_ssl_certkey"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#netscaler95ssl95certkey-manage-ssl-cerificate-keys", 
            "text": "", 
            "title": "netscaler_ssl_certkey - Manage ssl cerificate keys"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#synopsis", 
            "text": "Manage ssl cerificate keys.", 
            "title": "Synopsis"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#requirements-on-host-that-executes-module", 
            "text": "nitro python sdk", 
            "title": "Requirements (on host that executes module)"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#options", 
            "text": "parameter  required  default  choices  comments  \n             cert  no  \n     \n     Name of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path. Minimum length = 1          \n             certkey  no  \n     \n     Name for the certificate and private-key pair. Must begin with an ASCII alphanumeric or underscore  _  character, and must contain only ASCII alphanumeric, underscore  _ , hash  # , period  . , space    , colon  : , at  @ , equals  = , and hyphen  -  characters. Cannot be changed after the certificate-key pair is created. The following requirement applies only to the NetScaler CLI: If the name includes one or more spaces, enclose the name in double or single quotation marks (for example, \"my cert\" or 'my cert'). Minimum length = 1          \n             expirymonitor  no  \n     ENABLED DISABLED \n     Issue an alert when the certificate is about to expire.          \n             inform  no  \n     DER PEM PFX \n     Input format of the certificate and the private-key files. The three formats supported by the appliance are: PEM - Privacy Enhanced Mail DER - Distinguished Encoding Rule PFX - Personal Information Exchange.          \n             key  no  \n     \n     Name of and, optionally, path to the private-key file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path. Minimum length = 1          \n             nitro_pass  yes  \n     \n     The password with which to authenticate to the netscaler node.          \n             nitro_protocol  no  http \n     http https \n     Which protocol to use when accessing the nitro API objects.          \n             nitro_timeout  no  310 \n     \n     Time in seconds until a timeout error is thrown when establishing a new session with Netscaler          \n             nitro_user  yes  \n     \n     The username with which to authenticate to the netscaler node.          \n             notificationperiod  no  \n     \n     Time, in number of days, before certificate expiration, at which to generate an alert that the certificate is about to expire. Minimum value =  10 Maximum value =  100          \n             nsip  yes  \n     \n     The ip address of the netscaler appliance where the nitro API calls will be made. The port can be specified with the colon (:). E.g. 192.168.1.1:555.          \n             passplain  no  \n     \n     Pass phrase used to encrypt the private-key. Required when adding an encrypted private-key in PEM format. Minimum length = 1          \n             password  no  \n     \n     Passphrase that was used to encrypt the private-key. Use this option to load encrypted private-keys in PEM format.          \n             save_config  no  True \n     yes no \n     If true the module will save the configuration on the netscaler node if it makes any changes. The module will not save the configuration on the netscaler node if it made no changes.          \n             state  no  present \n     present absent \n     The state of the resource being configured by the module on the netscaler node. When present the resource will be created if needed and configured according to the module's parameters. When absent the resource will be deleted from the netscaler node.          \n             validate_certs  no  yes \n     \n     If  no , SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.", 
            "title": "Options"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#examples", 
            "text": "-   name:   Setup   ssl   certkey \n   delegate_to:   localhost \n   netscaler_ssl_certkey: \n     nitro_user:   nsroot \n     nitro_pass:   nsroot \n     nsip:   172.18 . 0.2 \n\n     certkey:   certirificate_ 1 \n     cert:   server.crt \n     key:   server.key \n     expirymonitor:   ENABLED \n     notificationperiod:   30 \n     inform:   PEM \n     password:   False \n     passplain:   somesecret", 
            "title": "Examples"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#return-values", 
            "text": "Common return values are documented here common_return_values, the\nfollowing are the fields unique to this module:    name  description  returned  type  sample  \n\n     \n      msg  \n      Message detailing the failure reason  \n      failure  \n      string  \n      Action does not exist   \n         \n      diff  \n      List of differences between the actual configured object and the configuration specified in the module  \n      failure  \n      dictionary  \n      { 'targetlbvserver': 'difference. ours: (str) server1 other: (str) server2' }   \n     contains:   \n     \n     \n     name \n     description \n     returned \n     type \n     sample \n     \n\n\n      \n\n         \n      loglines  \n      list of logged messages by the module  \n      always  \n      list  \n      ['message 1', 'message 2']", 
            "title": "Return Values"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#status", 
            "text": "This module is flagged as  preview  which means that it is not\nguaranteed to have a backwards compatible interface.", 
            "title": "Status"
        }, 
        {
            "location": "/modules/netscaler-ssl-certkey-module/#support", 
            "text": "This module is community maintained without core committer oversight.  For more information on what this means please read modules_support  For help in developing on modules, should you be so inclined, please\nread community, dev_guide/developing_test_pr and\ndev_guide/developing_modules.", 
            "title": "Support"
        }, 
        {
            "location": "/development-utilities/", 
            "text": "Development Utilities\n\n\nUnder the utils/ directory there exists a number of scripts and data files that aid in the development process.\n\n\nBe advised that the state of the scripts is always in flux, so this documentation page may lag behind the actual implementation at times.\n\n\nDeveloping a new module\n\n\nThere is a lot of boilerplate code that goes into each module since the workflow is roughly similar for configuring a resource using a singular NITRO object.\n\n\nTo aid with this there are some scripts under utils/ to aid with the generation of this code.\n\n\nThe parts that are not covered by the boilerplate generation code is peculiarities of each NITRO object. For example having to use a different nitro object to add/update the resource and a different object to determine its existance and configuration parameters.\n\n\nAlso when adding bindings to an object there is some manual work to be done to configure how the bindings tie in with the main object and to maintain the correct control flow of the module. Still in this cases generating a module file for the binding may be beneficial since some parts of the generated module can be copied to the more complex one that uses that object combined with that module\u2019s main nitro object.\n\n\nGetting the spec of a nitro object\n\n\nTo get the specification of a nitro object there is a script named scrape.py.\n\n\nThis script scrapes the nitro reference web site for each object defined in a hardcoded list and produces for each page scraped a json file.\n\n\nThis json file contains information about the properties of the nitro object and is used by subsequent scripts.\n\n\nThe operation of scrape.py is based on parsing the HTML DOM for each page and may fail for some nitro objects.\n\n\nTo add an object to be scrapped just edit the hardcoded list of objects and run the script.\n\n\nGenerating the boilerplate\n\n\nTo generate the boilerplate the script compile.py has to be called.\n\n\nThis script has a hardcoded list of objects and generates for each an initial version of the corresponding module.\n\n\nThis script has as input for each nitro object the json data file which was obtained by the scrape.py script and the actual class of the Python NITRO SDK that corresponds to this object. The Python SDK must be importable when this script is run.\n\n\nThe script checks if there are differences between the attributes defined in the SDK and the attributes from the scraped json and will output warnings for each attribute missing. The attributes that will go into the generated code will be the ones present in both the SDK object and the json data file.\n\n\nThe json data file must be under utils/source/scrape.\n\n\nThe output python file is put under utils/output\n\n\nThe generated code contains the documentation for the attributes of the nitro object, the instantiation of a ConfigProxy object for the object and the control flow statements for the main module execution. Placeholders are marked by a single underscore \u201c_\u201d or names that start with a single underscore.\n\n\nReplacing the placeholders, implementing the object bindings if there are any, and verifying and correcting the control flow are the most common manual steps that follow.", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/development-utilities/#development-utilities", 
            "text": "Under the utils/ directory there exists a number of scripts and data files that aid in the development process.  Be advised that the state of the scripts is always in flux, so this documentation page may lag behind the actual implementation at times.", 
            "title": "Development Utilities"
        }, 
        {
            "location": "/development-utilities/#developing-a-new-module", 
            "text": "There is a lot of boilerplate code that goes into each module since the workflow is roughly similar for configuring a resource using a singular NITRO object.  To aid with this there are some scripts under utils/ to aid with the generation of this code.  The parts that are not covered by the boilerplate generation code is peculiarities of each NITRO object. For example having to use a different nitro object to add/update the resource and a different object to determine its existance and configuration parameters.  Also when adding bindings to an object there is some manual work to be done to configure how the bindings tie in with the main object and to maintain the correct control flow of the module. Still in this cases generating a module file for the binding may be beneficial since some parts of the generated module can be copied to the more complex one that uses that object combined with that module\u2019s main nitro object.", 
            "title": "Developing a new module"
        }, 
        {
            "location": "/development-utilities/#getting-the-spec-of-a-nitro-object", 
            "text": "To get the specification of a nitro object there is a script named scrape.py.  This script scrapes the nitro reference web site for each object defined in a hardcoded list and produces for each page scraped a json file.  This json file contains information about the properties of the nitro object and is used by subsequent scripts.  The operation of scrape.py is based on parsing the HTML DOM for each page and may fail for some nitro objects.  To add an object to be scrapped just edit the hardcoded list of objects and run the script.", 
            "title": "Getting the spec of a nitro object"
        }, 
        {
            "location": "/development-utilities/#generating-the-boilerplate", 
            "text": "To generate the boilerplate the script compile.py has to be called.  This script has a hardcoded list of objects and generates for each an initial version of the corresponding module.  This script has as input for each nitro object the json data file which was obtained by the scrape.py script and the actual class of the Python NITRO SDK that corresponds to this object. The Python SDK must be importable when this script is run.  The script checks if there are differences between the attributes defined in the SDK and the attributes from the scraped json and will output warnings for each attribute missing. The attributes that will go into the generated code will be the ones present in both the SDK object and the json data file.  The json data file must be under utils/source/scrape.  The output python file is put under utils/output  The generated code contains the documentation for the attributes of the nitro object, the instantiation of a ConfigProxy object for the object and the control flow statements for the main module execution. Placeholders are marked by a single underscore \u201c_\u201d or names that start with a single underscore.  Replacing the placeholders, implementing the object bindings if there are any, and verifying and correcting the control flow are the most common manual steps that follow.", 
            "title": "Generating the boilerplate"
        }
    ]
}